
CTV_Master2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000635c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  0800650c  0800650c  0001650c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080065ac  080065ac  00020760  2**0
                  CONTENTS
  4 .ARM          00000008  080065ac  080065ac  000165ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080065b4  080065b4  00020760  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080065b4  080065b4  000165b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080065b8  080065b8  000165b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000760  20000000  080065bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020760  2**0
                  CONTENTS
 10 .bss          000034d0  20000760  20000760  00020760  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20003c30  20003c30  00020760  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020760  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010631  00000000  00000000  00020790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002160  00000000  00000000  00030dc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cb0  00000000  00000000  00032f28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c10  00000000  00000000  00033bd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023ae9  00000000  00000000  000347e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001020d  00000000  00000000  000582d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6c13  00000000  00000000  000684de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0013f0f1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000388c  00000000  00000000  0013f144  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000760 	.word	0x20000760
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080064f4 	.word	0x080064f4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000764 	.word	0x20000764
 80001ec:	080064f4 	.word	0x080064f4

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <Flush_Buffer>:
  return ch;
}


static void Flush_Buffer(uint8_t* pBuffer, uint16_t BufferLength)
{
 8000588:	b480      	push	{r7}
 800058a:	b083      	sub	sp, #12
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
 8000590:	460b      	mov	r3, r1
 8000592:	807b      	strh	r3, [r7, #2]
  while (BufferLength--)
 8000594:	e005      	b.n	80005a2 <Flush_Buffer+0x1a>
  {
    *pBuffer = 0;
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	2200      	movs	r2, #0
 800059a:	701a      	strb	r2, [r3, #0]

    pBuffer++;
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	3301      	adds	r3, #1
 80005a0:	607b      	str	r3, [r7, #4]
  while (BufferLength--)
 80005a2:	887b      	ldrh	r3, [r7, #2]
 80005a4:	1e5a      	subs	r2, r3, #1
 80005a6:	807a      	strh	r2, [r7, #2]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d1f4      	bne.n	8000596 <Flush_Buffer+0xe>
  }
}
 80005ac:	bf00      	nop
 80005ae:	bf00      	nop
 80005b0:	370c      	adds	r7, #12
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr

080005ba <delay1>:

//delay2
void delay1(void)
{
 80005ba:	b480      	push	{r7}
 80005bc:	af00      	add	r7, sp, #0
	asm("NOP");
 80005be:	bf00      	nop
	asm("NOP");
 80005c0:	bf00      	nop
	asm("NOP");
 80005c2:	bf00      	nop
	asm("NOP");
 80005c4:	bf00      	nop
	asm("NOP");
 80005c6:	bf00      	nop
	asm("NOP");
 80005c8:	bf00      	nop
	asm("NOP");
 80005ca:	bf00      	nop
	asm("NOP");
 80005cc:	bf00      	nop
	asm("NOP");
 80005ce:	bf00      	nop
	asm("NOP");
 80005d0:	bf00      	nop

	asm("NOP");
 80005d2:	bf00      	nop
	asm("NOP");
 80005d4:	bf00      	nop
	asm("NOP");
 80005d6:	bf00      	nop
	asm("NOP");
 80005d8:	bf00      	nop
	asm("NOP");
 80005da:	bf00      	nop
	asm("NOP");
 80005dc:	bf00      	nop
	asm("NOP");
 80005de:	bf00      	nop
	asm("NOP");
 80005e0:	bf00      	nop
	asm("NOP");
 80005e2:	bf00      	nop
	asm("NOP");
 80005e4:	bf00      	nop

	asm("NOP");
 80005e6:	bf00      	nop
	asm("NOP");
 80005e8:	bf00      	nop
	asm("NOP");
 80005ea:	bf00      	nop
	asm("NOP");
 80005ec:	bf00      	nop
	asm("NOP");
 80005ee:	bf00      	nop
	asm("NOP");
 80005f0:	bf00      	nop
	asm("NOP");
 80005f2:	bf00      	nop
	asm("NOP");
 80005f4:	bf00      	nop
	asm("NOP");
 80005f6:	bf00      	nop
	asm("NOP");
 80005f8:	bf00      	nop

	asm("NOP");
 80005fa:	bf00      	nop
	asm("NOP");
 80005fc:	bf00      	nop
	asm("NOP");
 80005fe:	bf00      	nop
	asm("NOP");
 8000600:	bf00      	nop
	asm("NOP");
 8000602:	bf00      	nop
	asm("NOP");
 8000604:	bf00      	nop
	asm("NOP");
 8000606:	bf00      	nop
	asm("NOP");
 8000608:	bf00      	nop
	asm("NOP");
 800060a:	bf00      	nop
	asm("NOP");
 800060c:	bf00      	nop

	asm("NOP");
 800060e:	bf00      	nop
	asm("NOP");
 8000610:	bf00      	nop
	asm("NOP");
 8000612:	bf00      	nop
	asm("NOP");
 8000614:	bf00      	nop
	asm("NOP");
 8000616:	bf00      	nop
	asm("NOP");
 8000618:	bf00      	nop
	asm("NOP");
 800061a:	bf00      	nop
	asm("NOP");
 800061c:	bf00      	nop
	asm("NOP");
 800061e:	bf00      	nop
	asm("NOP");
 8000620:	bf00      	nop
}
 8000622:	bf00      	nop
 8000624:	46bd      	mov	sp, r7
 8000626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062a:	4770      	bx	lr

0800062c <delay_AFE_Init>:
//with Vref
void delay_AFE_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
	asm("NOP");
 8000630:	bf00      	nop
	asm("NOP");
 8000632:	bf00      	nop
	asm("NOP");
 8000634:	bf00      	nop
	portCTRL->BSRR |= (1<<pinVREFH);	//Vref
 8000636:	4b09      	ldr	r3, [pc, #36]	; (800065c <delay_AFE_Init+0x30>)
 8000638:	699b      	ldr	r3, [r3, #24]
 800063a:	4a08      	ldr	r2, [pc, #32]	; (800065c <delay_AFE_Init+0x30>)
 800063c:	f043 0301 	orr.w	r3, r3, #1
 8000640:	6193      	str	r3, [r2, #24]
	delay1();
 8000642:	f7ff ffba 	bl	80005ba <delay1>
	delay1();
 8000646:	f7ff ffb8 	bl	80005ba <delay1>
	portCTRL->BSRR |= (1<<pinVREFL);	//Vref
 800064a:	4b04      	ldr	r3, [pc, #16]	; (800065c <delay_AFE_Init+0x30>)
 800064c:	699b      	ldr	r3, [r3, #24]
 800064e:	4a03      	ldr	r2, [pc, #12]	; (800065c <delay_AFE_Init+0x30>)
 8000650:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000654:	6193      	str	r3, [r2, #24]
}
 8000656:	bf00      	nop
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	40021000 	.word	0x40021000

08000660 <delay_AFE_Init1>:
//without Vref (ON terus)
void delay_AFE_Init1(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
	asm("NOP");
 8000664:	bf00      	nop
	asm("NOP");
 8000666:	bf00      	nop
	asm("NOP");
 8000668:	bf00      	nop
	portCTRL->BSRR |= (1<<pinVREFH);	//Vref
 800066a:	4b06      	ldr	r3, [pc, #24]	; (8000684 <delay_AFE_Init1+0x24>)
 800066c:	699b      	ldr	r3, [r3, #24]
 800066e:	4a05      	ldr	r2, [pc, #20]	; (8000684 <delay_AFE_Init1+0x24>)
 8000670:	f043 0301 	orr.w	r3, r3, #1
 8000674:	6193      	str	r3, [r2, #24]
	delay1();
 8000676:	f7ff ffa0 	bl	80005ba <delay1>
	delay1();
 800067a:	f7ff ff9e 	bl	80005ba <delay1>
}
 800067e:	bf00      	nop
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	40021000 	.word	0x40021000

08000688 <Tx100k>:

void Tx100k(int ch)
{
 8000688:	b480      	push	{r7}
 800068a:	b085      	sub	sp, #20
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
	uint8_t m=0,n=0,p=0,q=0;
 8000690:	2300      	movs	r3, #0
 8000692:	73fb      	strb	r3, [r7, #15]
 8000694:	2300      	movs	r3, #0
 8000696:	73bb      	strb	r3, [r7, #14]
 8000698:	2300      	movs	r3, #0
 800069a:	737b      	strb	r3, [r7, #13]
 800069c:	2300      	movs	r3, #0
 800069e:	733b      	strb	r3, [r7, #12]
		portCTRL->BSRR |= (1<<pinACCNL)|(1<<pinCINJNL);
 80006a0:	4b36      	ldr	r3, [pc, #216]	; (800077c <Tx100k+0xf4>)
 80006a2:	699b      	ldr	r3, [r3, #24]
 80006a4:	4a35      	ldr	r2, [pc, #212]	; (800077c <Tx100k+0xf4>)
 80006a6:	f443 0310 	orr.w	r3, r3, #9437184	; 0x900000
 80006aa:	6193      	str	r3, [r2, #24]
	//	portCTRL->BSRR |= (1<<pinCINJNL);

		//WAITING DELAYYY
		do
		{
			asm("NOP");
 80006ac:	bf00      	nop
		} while(q++<79);
 80006ae:	7b3b      	ldrb	r3, [r7, #12]
 80006b0:	1c5a      	adds	r2, r3, #1
 80006b2:	733a      	strb	r2, [r7, #12]
 80006b4:	2b4e      	cmp	r3, #78	; 0x4e
 80006b6:	d9f9      	bls.n	80006ac <Tx100k+0x24>


		asm("NOP");
 80006b8:	bf00      	nop
		asm("NOP");
 80006ba:	bf00      	nop
		asm("NOP");
 80006bc:	bf00      	nop
		asm("NOP");
 80006be:	bf00      	nop
		asm("NOP");
 80006c0:	bf00      	nop
		asm("NOP");
 80006c2:	bf00      	nop


		portCTRL->BSRR |= (1<<pinACCPH)|(1<<pinCINJPH);
 80006c4:	4b2d      	ldr	r3, [pc, #180]	; (800077c <Tx100k+0xf4>)
 80006c6:	699b      	ldr	r3, [r3, #24]
 80006c8:	4a2c      	ldr	r2, [pc, #176]	; (800077c <Tx100k+0xf4>)
 80006ca:	f443 7384 	orr.w	r3, r3, #264	; 0x108
 80006ce:	6193      	str	r3, [r2, #24]
	//	portCTRL->BSRR |= (1<<pinCINJPH);
		portTX->BSRR |= (1<<pinTXH[ch]);
 80006d0:	4b2b      	ldr	r3, [pc, #172]	; (8000780 <Tx100k+0xf8>)
 80006d2:	699b      	ldr	r3, [r3, #24]
 80006d4:	492b      	ldr	r1, [pc, #172]	; (8000784 <Tx100k+0xfc>)
 80006d6:	687a      	ldr	r2, [r7, #4]
 80006d8:	440a      	add	r2, r1
 80006da:	7812      	ldrb	r2, [r2, #0]
 80006dc:	4611      	mov	r1, r2
 80006de:	2201      	movs	r2, #1
 80006e0:	408a      	lsls	r2, r1
 80006e2:	4611      	mov	r1, r2
 80006e4:	4a26      	ldr	r2, [pc, #152]	; (8000780 <Tx100k+0xf8>)
 80006e6:	430b      	orrs	r3, r1
 80006e8:	6193      	str	r3, [r2, #24]
		asm("NOP");
 80006ea:	bf00      	nop
		asm("NOP");
 80006ec:	bf00      	nop
		asm("NOP");
 80006ee:	bf00      	nop
		asm("NOP");
 80006f0:	bf00      	nop
		asm("NOP");
 80006f2:	bf00      	nop
		asm("NOP");
 80006f4:	bf00      	nop
	//	portCTRL->BSRR |= (1<<pinACCPL);//|(1<<pinCINJPL);
		do
		{
			asm("NOP");
 80006f6:	bf00      	nop
		} while(m++<13);
 80006f8:	7bfb      	ldrb	r3, [r7, #15]
 80006fa:	1c5a      	adds	r2, r3, #1
 80006fc:	73fa      	strb	r2, [r7, #15]
 80006fe:	2b0c      	cmp	r3, #12
 8000700:	d9f9      	bls.n	80006f6 <Tx100k+0x6e>
		portCTRL->BSRR |= (1<<pinACCPL)|(1<<pinCINJPL);
 8000702:	4b1e      	ldr	r3, [pc, #120]	; (800077c <Tx100k+0xf4>)
 8000704:	699b      	ldr	r3, [r3, #24]
 8000706:	4a1d      	ldr	r2, [pc, #116]	; (800077c <Tx100k+0xf4>)
 8000708:	f043 7384 	orr.w	r3, r3, #17301504	; 0x1080000
 800070c:	6193      	str	r3, [r2, #24]
	//	portCTRL->BSRR |= (1<<pinCINJPL);

		//WAITING DELAYYY
		do
		{
			asm("NOP");
 800070e:	bf00      	nop
		} while(p++<79);
 8000710:	7b7b      	ldrb	r3, [r7, #13]
 8000712:	1c5a      	adds	r2, r3, #1
 8000714:	737a      	strb	r2, [r7, #13]
 8000716:	2b4e      	cmp	r3, #78	; 0x4e
 8000718:	d9f9      	bls.n	800070e <Tx100k+0x86>



		asm("NOP");
 800071a:	bf00      	nop
		asm("NOP");
 800071c:	bf00      	nop
		asm("NOP");
 800071e:	bf00      	nop
		asm("NOP");
 8000720:	bf00      	nop
		asm("NOP");
 8000722:	bf00      	nop
		asm("NOP");
 8000724:	bf00      	nop



		portCTRL->BSRR |= (1<<pinACCNH)|(1<<pinCINJNH);
 8000726:	4b15      	ldr	r3, [pc, #84]	; (800077c <Tx100k+0xf4>)
 8000728:	699b      	ldr	r3, [r3, #24]
 800072a:	4a14      	ldr	r2, [pc, #80]	; (800077c <Tx100k+0xf4>)
 800072c:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8000730:	6193      	str	r3, [r2, #24]
	//	portCTRL->BSRR |= (1<<pinCINJNH);
		portTX->BSRR |= (1<<pinTXL[ch]);
 8000732:	4b13      	ldr	r3, [pc, #76]	; (8000780 <Tx100k+0xf8>)
 8000734:	699b      	ldr	r3, [r3, #24]
 8000736:	4914      	ldr	r1, [pc, #80]	; (8000788 <Tx100k+0x100>)
 8000738:	687a      	ldr	r2, [r7, #4]
 800073a:	440a      	add	r2, r1
 800073c:	7812      	ldrb	r2, [r2, #0]
 800073e:	4611      	mov	r1, r2
 8000740:	2201      	movs	r2, #1
 8000742:	408a      	lsls	r2, r1
 8000744:	4611      	mov	r1, r2
 8000746:	4a0e      	ldr	r2, [pc, #56]	; (8000780 <Tx100k+0xf8>)
 8000748:	430b      	orrs	r3, r1
 800074a:	6193      	str	r3, [r2, #24]
		asm("NOP");
 800074c:	bf00      	nop
		asm("NOP");
 800074e:	bf00      	nop
		asm("NOP");
 8000750:	bf00      	nop
		asm("NOP");
 8000752:	bf00      	nop
		asm("NOP");
 8000754:	bf00      	nop
		asm("NOP");
 8000756:	bf00      	nop
		asm("NOP");
 8000758:	bf00      	nop
		asm("NOP");
 800075a:	bf00      	nop
		asm("NOP");
 800075c:	bf00      	nop
		asm("NOP");
 800075e:	bf00      	nop
		asm("NOP");
 8000760:	bf00      	nop
	//	portCTRL->BSRR |= (1<<pinACCNL);//|(1<<pinCINJNL);
		do
		{
			asm("NOP");
 8000762:	bf00      	nop
		} while(n++<3);
 8000764:	7bbb      	ldrb	r3, [r7, #14]
 8000766:	1c5a      	adds	r2, r3, #1
 8000768:	73ba      	strb	r2, [r7, #14]
 800076a:	2b02      	cmp	r3, #2
 800076c:	d9f9      	bls.n	8000762 <Tx100k+0xda>


}
 800076e:	bf00      	nop
 8000770:	bf00      	nop
 8000772:	3714      	adds	r7, #20
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr
 800077c:	40021000 	.word	0x40021000
 8000780:	40021400 	.word	0x40021400
 8000784:	20000004 	.word	0x20000004
 8000788:	20000018 	.word	0x20000018

0800078c <Tx500k>:

void Tx500k(int ch)
{
 800078c:	b480      	push	{r7}
 800078e:	b085      	sub	sp, #20
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
	uint8_t m=0,n=0;
 8000794:	2300      	movs	r3, #0
 8000796:	73fb      	strb	r3, [r7, #15]
 8000798:	2300      	movs	r3, #0
 800079a:	73bb      	strb	r3, [r7, #14]
	portCTRL->BSRR |= (1<<pinACCNL)|(1<<pinCINJNL);
 800079c:	4b2d      	ldr	r3, [pc, #180]	; (8000854 <Tx500k+0xc8>)
 800079e:	699b      	ldr	r3, [r3, #24]
 80007a0:	4a2c      	ldr	r2, [pc, #176]	; (8000854 <Tx500k+0xc8>)
 80007a2:	f443 0310 	orr.w	r3, r3, #9437184	; 0x900000
 80007a6:	6193      	str	r3, [r2, #24]
//	portCTRL->BSRR |= (1<<pinCINJNL);


	asm("NOP");
 80007a8:	bf00      	nop
	asm("NOP");
 80007aa:	bf00      	nop
	asm("NOP");
 80007ac:	bf00      	nop
	asm("NOP");
 80007ae:	bf00      	nop
	asm("NOP");
 80007b0:	bf00      	nop
	asm("NOP");
 80007b2:	bf00      	nop


	portCTRL->BSRR |= (1<<pinACCPH)|(1<<pinCINJPH);
 80007b4:	4b27      	ldr	r3, [pc, #156]	; (8000854 <Tx500k+0xc8>)
 80007b6:	699b      	ldr	r3, [r3, #24]
 80007b8:	4a26      	ldr	r2, [pc, #152]	; (8000854 <Tx500k+0xc8>)
 80007ba:	f443 7384 	orr.w	r3, r3, #264	; 0x108
 80007be:	6193      	str	r3, [r2, #24]
//	portCTRL->BSRR |= (1<<pinCINJPH);
	portTX->BSRR |= (1<<pinTXH[ch]);
 80007c0:	4b25      	ldr	r3, [pc, #148]	; (8000858 <Tx500k+0xcc>)
 80007c2:	699b      	ldr	r3, [r3, #24]
 80007c4:	4925      	ldr	r1, [pc, #148]	; (800085c <Tx500k+0xd0>)
 80007c6:	687a      	ldr	r2, [r7, #4]
 80007c8:	440a      	add	r2, r1
 80007ca:	7812      	ldrb	r2, [r2, #0]
 80007cc:	4611      	mov	r1, r2
 80007ce:	2201      	movs	r2, #1
 80007d0:	408a      	lsls	r2, r1
 80007d2:	4611      	mov	r1, r2
 80007d4:	4a20      	ldr	r2, [pc, #128]	; (8000858 <Tx500k+0xcc>)
 80007d6:	430b      	orrs	r3, r1
 80007d8:	6193      	str	r3, [r2, #24]
	asm("NOP");
 80007da:	bf00      	nop
	asm("NOP");
 80007dc:	bf00      	nop

//	portCTRL->BSRR |= (1<<pinACCPL);//|(1<<pinCINJPL);
	do
	{
		asm("NOP");
 80007de:	bf00      	nop
	} while(m++<13);	//13
 80007e0:	7bfb      	ldrb	r3, [r7, #15]
 80007e2:	1c5a      	adds	r2, r3, #1
 80007e4:	73fa      	strb	r2, [r7, #15]
 80007e6:	2b0c      	cmp	r3, #12
 80007e8:	d9f9      	bls.n	80007de <Tx500k+0x52>
	portCTRL->BSRR |= (1<<pinACCPL)|(1<<pinCINJPL);
 80007ea:	4b1a      	ldr	r3, [pc, #104]	; (8000854 <Tx500k+0xc8>)
 80007ec:	699b      	ldr	r3, [r3, #24]
 80007ee:	4a19      	ldr	r2, [pc, #100]	; (8000854 <Tx500k+0xc8>)
 80007f0:	f043 7384 	orr.w	r3, r3, #17301504	; 0x1080000
 80007f4:	6193      	str	r3, [r2, #24]
//	portCTRL->BSRR |= (1<<pinCINJPL);



	asm("NOP");
 80007f6:	bf00      	nop
	asm("NOP");
 80007f8:	bf00      	nop
	asm("NOP");
 80007fa:	bf00      	nop
	asm("NOP");
 80007fc:	bf00      	nop
	asm("NOP");
 80007fe:	bf00      	nop
	asm("NOP");
 8000800:	bf00      	nop



	portCTRL->BSRR |= (1<<pinACCNH)|(1<<pinCINJNH);
 8000802:	4b14      	ldr	r3, [pc, #80]	; (8000854 <Tx500k+0xc8>)
 8000804:	699b      	ldr	r3, [r3, #24]
 8000806:	4a13      	ldr	r2, [pc, #76]	; (8000854 <Tx500k+0xc8>)
 8000808:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800080c:	6193      	str	r3, [r2, #24]
//	portCTRL->BSRR |= (1<<pinCINJNH);
	portTX->BSRR |= (1<<pinTXL[ch]);
 800080e:	4b12      	ldr	r3, [pc, #72]	; (8000858 <Tx500k+0xcc>)
 8000810:	699b      	ldr	r3, [r3, #24]
 8000812:	4913      	ldr	r1, [pc, #76]	; (8000860 <Tx500k+0xd4>)
 8000814:	687a      	ldr	r2, [r7, #4]
 8000816:	440a      	add	r2, r1
 8000818:	7812      	ldrb	r2, [r2, #0]
 800081a:	4611      	mov	r1, r2
 800081c:	2201      	movs	r2, #1
 800081e:	408a      	lsls	r2, r1
 8000820:	4611      	mov	r1, r2
 8000822:	4a0d      	ldr	r2, [pc, #52]	; (8000858 <Tx500k+0xcc>)
 8000824:	430b      	orrs	r3, r1
 8000826:	6193      	str	r3, [r2, #24]
	asm("NOP");
 8000828:	bf00      	nop
	asm("NOP");
 800082a:	bf00      	nop
	asm("NOP");
 800082c:	bf00      	nop
	asm("NOP");
 800082e:	bf00      	nop
	asm("NOP");
 8000830:	bf00      	nop
	asm("NOP");
 8000832:	bf00      	nop
	asm("NOP");
 8000834:	bf00      	nop
	asm("NOP");
 8000836:	bf00      	nop

//	portCTRL->BSRR |= (1<<pinACCNL);//|(1<<pinCINJNL);
	do
	{
		asm("NOP");
 8000838:	bf00      	nop
	} while(n++<3);	//3
 800083a:	7bbb      	ldrb	r3, [r7, #14]
 800083c:	1c5a      	adds	r2, r3, #1
 800083e:	73ba      	strb	r2, [r7, #14]
 8000840:	2b02      	cmp	r3, #2
 8000842:	d9f9      	bls.n	8000838 <Tx500k+0xac>

}
 8000844:	bf00      	nop
 8000846:	bf00      	nop
 8000848:	3714      	adds	r7, #20
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	40021000 	.word	0x40021000
 8000858:	40021400 	.word	0x40021400
 800085c:	20000004 	.word	0x20000004
 8000860:	20000018 	.word	0x20000018

08000864 <Tx400k>:

void Tx400k(int ch)
{
 8000864:	b480      	push	{r7}
 8000866:	b085      	sub	sp, #20
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
	uint8_t m=0,n=0,p=0,q=0;
 800086c:	2300      	movs	r3, #0
 800086e:	73fb      	strb	r3, [r7, #15]
 8000870:	2300      	movs	r3, #0
 8000872:	73bb      	strb	r3, [r7, #14]
 8000874:	2300      	movs	r3, #0
 8000876:	737b      	strb	r3, [r7, #13]
 8000878:	2300      	movs	r3, #0
 800087a:	733b      	strb	r3, [r7, #12]
	portCTRL->BSRR |= (1<<pinACCNL)|(1<<pinCINJNL);
 800087c:	4b3b      	ldr	r3, [pc, #236]	; (800096c <Tx400k+0x108>)
 800087e:	699b      	ldr	r3, [r3, #24]
 8000880:	4a3a      	ldr	r2, [pc, #232]	; (800096c <Tx400k+0x108>)
 8000882:	f443 0310 	orr.w	r3, r3, #9437184	; 0x900000
 8000886:	6193      	str	r3, [r2, #24]
//	portCTRL->BSRR |= (1<<pinCINJNL);

	//WAITING DELAYYY
	do
	{
		asm("NOP");
 8000888:	bf00      	nop
	} while(q++<4);
 800088a:	7b3b      	ldrb	r3, [r7, #12]
 800088c:	1c5a      	adds	r2, r3, #1
 800088e:	733a      	strb	r2, [r7, #12]
 8000890:	2b03      	cmp	r3, #3
 8000892:	d9f9      	bls.n	8000888 <Tx400k+0x24>
	asm("NOP");
 8000894:	bf00      	nop
	asm("NOP");
 8000896:	bf00      	nop
	asm("NOP");
 8000898:	bf00      	nop
	asm("NOP");
 800089a:	bf00      	nop
	asm("NOP");
 800089c:	bf00      	nop
	asm("NOP");
 800089e:	bf00      	nop
	asm("NOP");
 80008a0:	bf00      	nop
	asm("NOP");
 80008a2:	bf00      	nop
	asm("NOP");
 80008a4:	bf00      	nop


	asm("NOP");
 80008a6:	bf00      	nop
	asm("NOP");
 80008a8:	bf00      	nop
	asm("NOP");
 80008aa:	bf00      	nop
	asm("NOP");
 80008ac:	bf00      	nop
	asm("NOP");
 80008ae:	bf00      	nop
	asm("NOP");
 80008b0:	bf00      	nop


	portCTRL->BSRR |= (1<<pinACCPH)|(1<<pinCINJPH);
 80008b2:	4b2e      	ldr	r3, [pc, #184]	; (800096c <Tx400k+0x108>)
 80008b4:	699b      	ldr	r3, [r3, #24]
 80008b6:	4a2d      	ldr	r2, [pc, #180]	; (800096c <Tx400k+0x108>)
 80008b8:	f443 7384 	orr.w	r3, r3, #264	; 0x108
 80008bc:	6193      	str	r3, [r2, #24]
//	portCTRL->BSRR |= (1<<pinCINJPH);
	portTX->BSRR |= (1<<pinTXH[ch]);
 80008be:	4b2c      	ldr	r3, [pc, #176]	; (8000970 <Tx400k+0x10c>)
 80008c0:	699b      	ldr	r3, [r3, #24]
 80008c2:	492c      	ldr	r1, [pc, #176]	; (8000974 <Tx400k+0x110>)
 80008c4:	687a      	ldr	r2, [r7, #4]
 80008c6:	440a      	add	r2, r1
 80008c8:	7812      	ldrb	r2, [r2, #0]
 80008ca:	4611      	mov	r1, r2
 80008cc:	2201      	movs	r2, #1
 80008ce:	408a      	lsls	r2, r1
 80008d0:	4611      	mov	r1, r2
 80008d2:	4a27      	ldr	r2, [pc, #156]	; (8000970 <Tx400k+0x10c>)
 80008d4:	430b      	orrs	r3, r1
 80008d6:	6193      	str	r3, [r2, #24]
	asm("NOP");
 80008d8:	bf00      	nop
	asm("NOP");
 80008da:	bf00      	nop
	asm("NOP");
 80008dc:	bf00      	nop
	asm("NOP");
 80008de:	bf00      	nop
	asm("NOP");
 80008e0:	bf00      	nop
	asm("NOP");
 80008e2:	bf00      	nop
//	portCTRL->BSRR |= (1<<pinACCPL);//|(1<<pinCINJPL);
	do
	{
		asm("NOP");
 80008e4:	bf00      	nop
	} while(m++<13);
 80008e6:	7bfb      	ldrb	r3, [r7, #15]
 80008e8:	1c5a      	adds	r2, r3, #1
 80008ea:	73fa      	strb	r2, [r7, #15]
 80008ec:	2b0c      	cmp	r3, #12
 80008ee:	d9f9      	bls.n	80008e4 <Tx400k+0x80>
	portCTRL->BSRR |= (1<<pinACCPL)|(1<<pinCINJPL);
 80008f0:	4b1e      	ldr	r3, [pc, #120]	; (800096c <Tx400k+0x108>)
 80008f2:	699b      	ldr	r3, [r3, #24]
 80008f4:	4a1d      	ldr	r2, [pc, #116]	; (800096c <Tx400k+0x108>)
 80008f6:	f043 7384 	orr.w	r3, r3, #17301504	; 0x1080000
 80008fa:	6193      	str	r3, [r2, #24]
//	portCTRL->BSRR |= (1<<pinCINJPL);

	//WAITING DELAYYY
	do
	{
		asm("NOP");
 80008fc:	bf00      	nop
	} while(p++<4);
 80008fe:	7b7b      	ldrb	r3, [r7, #13]
 8000900:	1c5a      	adds	r2, r3, #1
 8000902:	737a      	strb	r2, [r7, #13]
 8000904:	2b03      	cmp	r3, #3
 8000906:	d9f9      	bls.n	80008fc <Tx400k+0x98>



	asm("NOP");
 8000908:	bf00      	nop
	asm("NOP");
 800090a:	bf00      	nop
	asm("NOP");
 800090c:	bf00      	nop
	asm("NOP");
 800090e:	bf00      	nop
	asm("NOP");
 8000910:	bf00      	nop
	asm("NOP");
 8000912:	bf00      	nop



	portCTRL->BSRR |= (1<<pinACCNH)|(1<<pinCINJNH);
 8000914:	4b15      	ldr	r3, [pc, #84]	; (800096c <Tx400k+0x108>)
 8000916:	699b      	ldr	r3, [r3, #24]
 8000918:	4a14      	ldr	r2, [pc, #80]	; (800096c <Tx400k+0x108>)
 800091a:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800091e:	6193      	str	r3, [r2, #24]
//	portCTRL->BSRR |= (1<<pinCINJNH);
	portTX->BSRR |= (1<<pinTXL[ch]);
 8000920:	4b13      	ldr	r3, [pc, #76]	; (8000970 <Tx400k+0x10c>)
 8000922:	699b      	ldr	r3, [r3, #24]
 8000924:	4914      	ldr	r1, [pc, #80]	; (8000978 <Tx400k+0x114>)
 8000926:	687a      	ldr	r2, [r7, #4]
 8000928:	440a      	add	r2, r1
 800092a:	7812      	ldrb	r2, [r2, #0]
 800092c:	4611      	mov	r1, r2
 800092e:	2201      	movs	r2, #1
 8000930:	408a      	lsls	r2, r1
 8000932:	4611      	mov	r1, r2
 8000934:	4a0e      	ldr	r2, [pc, #56]	; (8000970 <Tx400k+0x10c>)
 8000936:	430b      	orrs	r3, r1
 8000938:	6193      	str	r3, [r2, #24]
	asm("NOP");
 800093a:	bf00      	nop
	asm("NOP");
 800093c:	bf00      	nop
	asm("NOP");
 800093e:	bf00      	nop
	asm("NOP");
 8000940:	bf00      	nop
	asm("NOP");
 8000942:	bf00      	nop
	asm("NOP");
 8000944:	bf00      	nop
	asm("NOP");
 8000946:	bf00      	nop
	asm("NOP");
 8000948:	bf00      	nop
	asm("NOP");
 800094a:	bf00      	nop
	asm("NOP");
 800094c:	bf00      	nop
	asm("NOP");
 800094e:	bf00      	nop
//	portCTRL->BSRR |= (1<<pinACCNL);//|(1<<pinCINJNL);
	do
	{
		asm("NOP");
 8000950:	bf00      	nop
	} while(n++<3);
 8000952:	7bbb      	ldrb	r3, [r7, #14]
 8000954:	1c5a      	adds	r2, r3, #1
 8000956:	73ba      	strb	r2, [r7, #14]
 8000958:	2b02      	cmp	r3, #2
 800095a:	d9f9      	bls.n	8000950 <Tx400k+0xec>


}
 800095c:	bf00      	nop
 800095e:	bf00      	nop
 8000960:	3714      	adds	r7, #20
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	40021000 	.word	0x40021000
 8000970:	40021400 	.word	0x40021400
 8000974:	20000004 	.word	0x20000004
 8000978:	20000018 	.word	0x20000018

0800097c <Tx250k>:

void Tx250k(int ch)
{
 800097c:	b480      	push	{r7}
 800097e:	b085      	sub	sp, #20
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
	uint8_t m=0,n=0,p=0,q=0;
 8000984:	2300      	movs	r3, #0
 8000986:	73fb      	strb	r3, [r7, #15]
 8000988:	2300      	movs	r3, #0
 800098a:	73bb      	strb	r3, [r7, #14]
 800098c:	2300      	movs	r3, #0
 800098e:	737b      	strb	r3, [r7, #13]
 8000990:	2300      	movs	r3, #0
 8000992:	733b      	strb	r3, [r7, #12]
	portCTRL->BSRR |= (1<<pinACCNL)|(1<<pinCINJNL);
 8000994:	4b36      	ldr	r3, [pc, #216]	; (8000a70 <Tx250k+0xf4>)
 8000996:	699b      	ldr	r3, [r3, #24]
 8000998:	4a35      	ldr	r2, [pc, #212]	; (8000a70 <Tx250k+0xf4>)
 800099a:	f443 0310 	orr.w	r3, r3, #9437184	; 0x900000
 800099e:	6193      	str	r3, [r2, #24]
//	portCTRL->BSRR |= (1<<pinCINJNL);

	//WAITING DELAYYY
	do
	{
		asm("NOP");
 80009a0:	bf00      	nop
	} while(q++<19);
 80009a2:	7b3b      	ldrb	r3, [r7, #12]
 80009a4:	1c5a      	adds	r2, r3, #1
 80009a6:	733a      	strb	r2, [r7, #12]
 80009a8:	2b12      	cmp	r3, #18
 80009aa:	d9f9      	bls.n	80009a0 <Tx250k+0x24>


	asm("NOP");
 80009ac:	bf00      	nop
	asm("NOP");
 80009ae:	bf00      	nop
	asm("NOP");
 80009b0:	bf00      	nop
	asm("NOP");
 80009b2:	bf00      	nop
	asm("NOP");
 80009b4:	bf00      	nop
	asm("NOP");
 80009b6:	bf00      	nop


	portCTRL->BSRR |= (1<<pinACCPH)|(1<<pinCINJPH);
 80009b8:	4b2d      	ldr	r3, [pc, #180]	; (8000a70 <Tx250k+0xf4>)
 80009ba:	699b      	ldr	r3, [r3, #24]
 80009bc:	4a2c      	ldr	r2, [pc, #176]	; (8000a70 <Tx250k+0xf4>)
 80009be:	f443 7384 	orr.w	r3, r3, #264	; 0x108
 80009c2:	6193      	str	r3, [r2, #24]
//	portCTRL->BSRR |= (1<<pinCINJPH);
	portTX->BSRR |= (1<<pinTXH[ch]);
 80009c4:	4b2b      	ldr	r3, [pc, #172]	; (8000a74 <Tx250k+0xf8>)
 80009c6:	699b      	ldr	r3, [r3, #24]
 80009c8:	492b      	ldr	r1, [pc, #172]	; (8000a78 <Tx250k+0xfc>)
 80009ca:	687a      	ldr	r2, [r7, #4]
 80009cc:	440a      	add	r2, r1
 80009ce:	7812      	ldrb	r2, [r2, #0]
 80009d0:	4611      	mov	r1, r2
 80009d2:	2201      	movs	r2, #1
 80009d4:	408a      	lsls	r2, r1
 80009d6:	4611      	mov	r1, r2
 80009d8:	4a26      	ldr	r2, [pc, #152]	; (8000a74 <Tx250k+0xf8>)
 80009da:	430b      	orrs	r3, r1
 80009dc:	6193      	str	r3, [r2, #24]
	asm("NOP");
 80009de:	bf00      	nop
	asm("NOP");
 80009e0:	bf00      	nop
	asm("NOP");
 80009e2:	bf00      	nop
	asm("NOP");
 80009e4:	bf00      	nop
	asm("NOP");
 80009e6:	bf00      	nop
	asm("NOP");
 80009e8:	bf00      	nop
//	portCTRL->BSRR |= (1<<pinACCPL);//|(1<<pinCINJPL);
	do
	{
		asm("NOP");
 80009ea:	bf00      	nop
	} while(m++<13);
 80009ec:	7bfb      	ldrb	r3, [r7, #15]
 80009ee:	1c5a      	adds	r2, r3, #1
 80009f0:	73fa      	strb	r2, [r7, #15]
 80009f2:	2b0c      	cmp	r3, #12
 80009f4:	d9f9      	bls.n	80009ea <Tx250k+0x6e>
	portCTRL->BSRR |= (1<<pinACCPL)|(1<<pinCINJPL);
 80009f6:	4b1e      	ldr	r3, [pc, #120]	; (8000a70 <Tx250k+0xf4>)
 80009f8:	699b      	ldr	r3, [r3, #24]
 80009fa:	4a1d      	ldr	r2, [pc, #116]	; (8000a70 <Tx250k+0xf4>)
 80009fc:	f043 7384 	orr.w	r3, r3, #17301504	; 0x1080000
 8000a00:	6193      	str	r3, [r2, #24]
//	portCTRL->BSRR |= (1<<pinCINJPL);

	//WAITING DELAYYY
	do
	{
		asm("NOP");
 8000a02:	bf00      	nop
	} while(p++<19);
 8000a04:	7b7b      	ldrb	r3, [r7, #13]
 8000a06:	1c5a      	adds	r2, r3, #1
 8000a08:	737a      	strb	r2, [r7, #13]
 8000a0a:	2b12      	cmp	r3, #18
 8000a0c:	d9f9      	bls.n	8000a02 <Tx250k+0x86>



	asm("NOP");
 8000a0e:	bf00      	nop
	asm("NOP");
 8000a10:	bf00      	nop
	asm("NOP");
 8000a12:	bf00      	nop
	asm("NOP");
 8000a14:	bf00      	nop
	asm("NOP");
 8000a16:	bf00      	nop
	asm("NOP");
 8000a18:	bf00      	nop



	portCTRL->BSRR |= (1<<pinACCNH)|(1<<pinCINJNH);
 8000a1a:	4b15      	ldr	r3, [pc, #84]	; (8000a70 <Tx250k+0xf4>)
 8000a1c:	699b      	ldr	r3, [r3, #24]
 8000a1e:	4a14      	ldr	r2, [pc, #80]	; (8000a70 <Tx250k+0xf4>)
 8000a20:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8000a24:	6193      	str	r3, [r2, #24]
//	portCTRL->BSRR |= (1<<pinCINJNH);
	portTX->BSRR |= (1<<pinTXL[ch]);
 8000a26:	4b13      	ldr	r3, [pc, #76]	; (8000a74 <Tx250k+0xf8>)
 8000a28:	699b      	ldr	r3, [r3, #24]
 8000a2a:	4914      	ldr	r1, [pc, #80]	; (8000a7c <Tx250k+0x100>)
 8000a2c:	687a      	ldr	r2, [r7, #4]
 8000a2e:	440a      	add	r2, r1
 8000a30:	7812      	ldrb	r2, [r2, #0]
 8000a32:	4611      	mov	r1, r2
 8000a34:	2201      	movs	r2, #1
 8000a36:	408a      	lsls	r2, r1
 8000a38:	4611      	mov	r1, r2
 8000a3a:	4a0e      	ldr	r2, [pc, #56]	; (8000a74 <Tx250k+0xf8>)
 8000a3c:	430b      	orrs	r3, r1
 8000a3e:	6193      	str	r3, [r2, #24]
	asm("NOP");
 8000a40:	bf00      	nop
	asm("NOP");
 8000a42:	bf00      	nop
	asm("NOP");
 8000a44:	bf00      	nop
	asm("NOP");
 8000a46:	bf00      	nop
	asm("NOP");
 8000a48:	bf00      	nop
	asm("NOP");
 8000a4a:	bf00      	nop
	asm("NOP");
 8000a4c:	bf00      	nop
	asm("NOP");
 8000a4e:	bf00      	nop
	asm("NOP");
 8000a50:	bf00      	nop
	asm("NOP");
 8000a52:	bf00      	nop
	asm("NOP");
 8000a54:	bf00      	nop
//	portCTRL->BSRR |= (1<<pinACCNL);//|(1<<pinCINJNL);
	do
	{
		asm("NOP");
 8000a56:	bf00      	nop
	} while(n++<3);
 8000a58:	7bbb      	ldrb	r3, [r7, #14]
 8000a5a:	1c5a      	adds	r2, r3, #1
 8000a5c:	73ba      	strb	r2, [r7, #14]
 8000a5e:	2b02      	cmp	r3, #2
 8000a60:	d9f9      	bls.n	8000a56 <Tx250k+0xda>


}
 8000a62:	bf00      	nop
 8000a64:	bf00      	nop
 8000a66:	3714      	adds	r7, #20
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr
 8000a70:	40021000 	.word	0x40021000
 8000a74:	40021400 	.word	0x40021400
 8000a78:	20000004 	.word	0x20000004
 8000a7c:	20000018 	.word	0x20000018

08000a80 <Run_TX>:

//NEW RUN SCAN PARENT
void Run_TX(int freq, int ch)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
 8000a88:	6039      	str	r1, [r7, #0]
	switch (freq)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	2b02      	cmp	r3, #2
 8000a8e:	d011      	beq.n	8000ab4 <Run_TX+0x34>
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	2b02      	cmp	r3, #2
 8000a94:	dc12      	bgt.n	8000abc <Run_TX+0x3c>
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d003      	beq.n	8000aa4 <Run_TX+0x24>
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	2b01      	cmp	r3, #1
 8000aa0:	d004      	beq.n	8000aac <Run_TX+0x2c>
 8000aa2:	e00b      	b.n	8000abc <Run_TX+0x3c>
	{
	case 0:	Tx500k(ch);	break;
 8000aa4:	6838      	ldr	r0, [r7, #0]
 8000aa6:	f7ff fe71 	bl	800078c <Tx500k>
 8000aaa:	e00b      	b.n	8000ac4 <Run_TX+0x44>
	case 1: Tx400k(ch); break;
 8000aac:	6838      	ldr	r0, [r7, #0]
 8000aae:	f7ff fed9 	bl	8000864 <Tx400k>
 8000ab2:	e007      	b.n	8000ac4 <Run_TX+0x44>
	case 2: Tx250k(ch); break;
 8000ab4:	6838      	ldr	r0, [r7, #0]
 8000ab6:	f7ff ff61 	bl	800097c <Tx250k>
 8000aba:	e003      	b.n	8000ac4 <Run_TX+0x44>
	default: Tx100k(ch);
 8000abc:	6838      	ldr	r0, [r7, #0]
 8000abe:	f7ff fde3 	bl	8000688 <Tx100k>
	}
}
 8000ac2:	bf00      	nop
 8000ac4:	bf00      	nop
 8000ac6:	3708      	adds	r7, #8
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}

08000acc <Run_Scans>:

//NEW Run scan 500khz 3 slave
void Run_Scans(uint8_t freq, uint8_t initTx, uint8_t nTx, uint8_t nAcc, uint8_t vreff)
{
 8000acc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ace:	b09f      	sub	sp, #124	; 0x7c
 8000ad0:	af10      	add	r7, sp, #64	; 0x40
 8000ad2:	4604      	mov	r4, r0
 8000ad4:	4608      	mov	r0, r1
 8000ad6:	4611      	mov	r1, r2
 8000ad8:	461a      	mov	r2, r3
 8000ada:	4623      	mov	r3, r4
 8000adc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8000ae6:	460b      	mov	r3, r1
 8000ae8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8000aec:	4613      	mov	r3, r2
 8000aee:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	uint8_t n=initTx;
 8000af2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000af6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t o=initTx+nTx-1;
 8000afa:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8000afe:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000b02:	4413      	add	r3, r2
 8000b04:	b2db      	uxtb	r3, r3
 8000b06:	3b01      	subs	r3, #1
 8000b08:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	do
	{
		uint8_t m=0;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		//========================= TX(n) =============================

		GPIOA->BSRR |= (1<<20);
 8000b12:	4b0c      	ldr	r3, [pc, #48]	; (8000b44 <Run_Scans+0x78>)
 8000b14:	699b      	ldr	r3, [r3, #24]
 8000b16:	4a0b      	ldr	r2, [pc, #44]	; (8000b44 <Run_Scans+0x78>)
 8000b18:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000b1c:	6193      	str	r3, [r2, #24]
		GPIOE->BSRR |= (1<<27);
 8000b1e:	4b0a      	ldr	r3, [pc, #40]	; (8000b48 <Run_Scans+0x7c>)
 8000b20:	699b      	ldr	r3, [r3, #24]
 8000b22:	4a09      	ldr	r2, [pc, #36]	; (8000b48 <Run_Scans+0x7c>)
 8000b24:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000b28:	6193      	str	r3, [r2, #24]
		GPIOG->BSRR |= (1<<24);
 8000b2a:	4b08      	ldr	r3, [pc, #32]	; (8000b4c <Run_Scans+0x80>)
 8000b2c:	699b      	ldr	r3, [r3, #24]
 8000b2e:	4a07      	ldr	r2, [pc, #28]	; (8000b4c <Run_Scans+0x80>)
 8000b30:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000b34:	6193      	str	r3, [r2, #24]

//		HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_RESET);
//		HAL_GPIO_WritePin(CS2_GPIO_Port, CS2_Pin, GPIO_PIN_RESET);
//		HAL_GPIO_WritePin(CS3_GPIO_Port, CS3_Pin, GPIO_PIN_RESET);
		//===== SEND TX SIGNAL =====
		if(vreff == 1) delay_AFE_Init();
 8000b36:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8000b3a:	2b01      	cmp	r3, #1
 8000b3c:	d108      	bne.n	8000b50 <Run_Scans+0x84>
 8000b3e:	f7ff fd75 	bl	800062c <delay_AFE_Init>
 8000b42:	e007      	b.n	8000b54 <Run_Scans+0x88>
 8000b44:	40020000 	.word	0x40020000
 8000b48:	40021000 	.word	0x40021000
 8000b4c:	40021800 	.word	0x40021800
		else delay_AFE_Init1();
 8000b50:	f7ff fd86 	bl	8000660 <delay_AFE_Init1>

//		portRSTACC->BSRR |= (1<<pinRSTACCL);	//RST ACC low
//		delay1();
//		delay1();
//		delay1();
		delay1();
 8000b54:	f7ff fd31 	bl	80005ba <delay1>
		portCTRL->BSRR |= (1<<pinCTVH);	//CTI ON PB7
 8000b58:	4ba6      	ldr	r3, [pc, #664]	; (8000df4 <Run_Scans+0x328>)
 8000b5a:	699b      	ldr	r3, [r3, #24]
 8000b5c:	4aa5      	ldr	r2, [pc, #660]	; (8000df4 <Run_Scans+0x328>)
 8000b5e:	f043 0302 	orr.w	r3, r3, #2
 8000b62:	6193      	str	r3, [r2, #24]
		portCTRL->BSRR |= (1<<pinACCPL) | (1<<pinCINJPL);
 8000b64:	4ba3      	ldr	r3, [pc, #652]	; (8000df4 <Run_Scans+0x328>)
 8000b66:	699b      	ldr	r3, [r3, #24]
 8000b68:	4aa2      	ldr	r2, [pc, #648]	; (8000df4 <Run_Scans+0x328>)
 8000b6a:	f043 7384 	orr.w	r3, r3, #17301504	; 0x1080000
 8000b6e:	6193      	str	r3, [r2, #24]
		portCTRL->BSRR |= (1<<pinACCNL) | (1<<pinCINJNL);
 8000b70:	4ba0      	ldr	r3, [pc, #640]	; (8000df4 <Run_Scans+0x328>)
 8000b72:	699b      	ldr	r3, [r3, #24]
 8000b74:	4a9f      	ldr	r2, [pc, #636]	; (8000df4 <Run_Scans+0x328>)
 8000b76:	f443 0310 	orr.w	r3, r3, #9437184	; 0x900000
 8000b7a:	6193      	str	r3, [r2, #24]
		delay1();
 8000b7c:	f7ff fd1d 	bl	80005ba <delay1>
		delay1();
 8000b80:	f7ff fd1b 	bl	80005ba <delay1>
		delay1();	//expect 10us
 8000b84:	f7ff fd19 	bl	80005ba <delay1>

		portCTRL->BSRR |= (1<<pinRSTACCL) | (1<<pinCFB1L);
 8000b88:	4b9a      	ldr	r3, [pc, #616]	; (8000df4 <Run_Scans+0x328>)
 8000b8a:	699b      	ldr	r3, [r3, #24]
 8000b8c:	4a99      	ldr	r2, [pc, #612]	; (8000df4 <Run_Scans+0x328>)
 8000b8e:	f443 0388 	orr.w	r3, r3, #4456448	; 0x440000
 8000b92:	6193      	str	r3, [r2, #24]
		//portTX->BSRR |= (1<<pinACCL);
		do
		{
			Run_TX(freq,n+1);
 8000b94:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8000b98:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000b9c:	3301      	adds	r3, #1
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4610      	mov	r0, r2
 8000ba2:	f7ff ff6d 	bl	8000a80 <Run_TX>
			//portTX->BSRR |= (1<<pinACCL);
		} while(m++ < nAcc-1);
 8000ba6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000baa:	1c5a      	adds	r2, r3, #1
 8000bac:	f887 2036 	strb.w	r2, [r7, #54]	; 0x36
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000bb6:	3b01      	subs	r3, #1
 8000bb8:	429a      	cmp	r2, r3
 8000bba:	dbeb      	blt.n	8000b94 <Run_Scans+0xc8>
		portCTRL->BSRR |= (1<<pinACCNL)|(1<<pinCINJNL);
 8000bbc:	4b8d      	ldr	r3, [pc, #564]	; (8000df4 <Run_Scans+0x328>)
 8000bbe:	699b      	ldr	r3, [r3, #24]
 8000bc0:	4a8c      	ldr	r2, [pc, #560]	; (8000df4 <Run_Scans+0x328>)
 8000bc2:	f443 0310 	orr.w	r3, r3, #9437184	; 0x900000
 8000bc6:	6193      	str	r3, [r2, #24]
//		portCTRL->BSRR |= (1<<pinCINJNL);
		portCTRL->BSRR |= (1<<pinCTVL);	//CTI OFF
 8000bc8:	4b8a      	ldr	r3, [pc, #552]	; (8000df4 <Run_Scans+0x328>)
 8000bca:	699b      	ldr	r3, [r3, #24]
 8000bcc:	4a89      	ldr	r2, [pc, #548]	; (8000df4 <Run_Scans+0x328>)
 8000bce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bd2:	6193      	str	r3, [r2, #24]



		//=== SEND READ ADC CMD ===
		portMSTR->BSRR |= (1<<pinMSTRH);	//MSTR ON PC6-------
 8000bd4:	4b88      	ldr	r3, [pc, #544]	; (8000df8 <Run_Scans+0x32c>)
 8000bd6:	699b      	ldr	r3, [r3, #24]
 8000bd8:	4a87      	ldr	r2, [pc, #540]	; (8000df8 <Run_Scans+0x32c>)
 8000bda:	f043 0302 	orr.w	r3, r3, #2
 8000bde:	6193      	str	r3, [r2, #24]
		GPIOB->BSRR |= (1<<11);
 8000be0:	4b86      	ldr	r3, [pc, #536]	; (8000dfc <Run_Scans+0x330>)
 8000be2:	699b      	ldr	r3, [r3, #24]
 8000be4:	4a85      	ldr	r2, [pc, #532]	; (8000dfc <Run_Scans+0x330>)
 8000be6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000bea:	6193      	str	r3, [r2, #24]
		//HAL_Delay(1);
//		portMSTR->BSRR |= (1<<pinMSTRL);	//MSTR OFF PC6

		//portCTRL->BSRR |= (1<<pinVREFL);	//Vref
		asm("NOP");
 8000bec:	bf00      	nop
		asm("NOP");
 8000bee:	bf00      	nop
		asm("NOP");
 8000bf0:	bf00      	nop
//		HAL_GPIO_WritePin(RSTACC_GPIO_Port, RSTACC_Pin, GPIO_PIN_RESET);

		//=== RECEIVE DATA FROM SPI ===
		//===========================================================//
		//portCS->BSRR |= (1<<pinCS1H);	//SS1 ON PB14
		asm("NOP");
 8000bf2:	bf00      	nop
		asm("NOP");
 8000bf4:	bf00      	nop
		asm("NOP");
 8000bf6:	bf00      	nop
		asm("NOP");
 8000bf8:	bf00      	nop
		asm("NOP");
 8000bfa:	bf00      	nop
		asm("NOP");
 8000bfc:	bf00      	nop

		//while(HAL_SPI_Receive(&hspi2, (uint8_t *)pData1, sizeof(pData1), 1000)!=HAL_OK){HAL_Delay(100);}
		while(spi1_f == 0){}
 8000bfe:	bf00      	nop
 8000c00:	4b7f      	ldr	r3, [pc, #508]	; (8000e00 <Run_Scans+0x334>)
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	b2db      	uxtb	r3, r3
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d0fa      	beq.n	8000c00 <Run_Scans+0x134>
		spi1_f = 0;
 8000c0a:	4b7d      	ldr	r3, [pc, #500]	; (8000e00 <Run_Scans+0x334>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	701a      	strb	r2, [r3, #0]
		//-----------------------------------//
		portCTRL->BSRR |= (1<<pinVREFH);	//Vref
 8000c10:	4b78      	ldr	r3, [pc, #480]	; (8000df4 <Run_Scans+0x328>)
 8000c12:	699b      	ldr	r3, [r3, #24]
 8000c14:	4a77      	ldr	r2, [pc, #476]	; (8000df4 <Run_Scans+0x328>)
 8000c16:	f043 0301 	orr.w	r3, r3, #1
 8000c1a:	6193      	str	r3, [r2, #24]


		frame[n][0] = pData[0] - pData[1];
 8000c1c:	4b79      	ldr	r3, [pc, #484]	; (8000e04 <Run_Scans+0x338>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	b29a      	uxth	r2, r3
 8000c22:	4b78      	ldr	r3, [pc, #480]	; (8000e04 <Run_Scans+0x338>)
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	b29b      	uxth	r3, r3
 8000c28:	1ad3      	subs	r3, r2, r3
 8000c2a:	b29b      	uxth	r3, r3
 8000c2c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000c30:	b218      	sxth	r0, r3
 8000c32:	4975      	ldr	r1, [pc, #468]	; (8000e08 <Run_Scans+0x33c>)
 8000c34:	4613      	mov	r3, r2
 8000c36:	00db      	lsls	r3, r3, #3
 8000c38:	4413      	add	r3, r2
 8000c3a:	009b      	lsls	r3, r3, #2
 8000c3c:	440b      	add	r3, r1
 8000c3e:	4602      	mov	r2, r0
 8000c40:	801a      	strh	r2, [r3, #0]
		frame[n][1] = pData[2] - pData[3];
 8000c42:	4b70      	ldr	r3, [pc, #448]	; (8000e04 <Run_Scans+0x338>)
 8000c44:	689b      	ldr	r3, [r3, #8]
 8000c46:	b29a      	uxth	r2, r3
 8000c48:	4b6e      	ldr	r3, [pc, #440]	; (8000e04 <Run_Scans+0x338>)
 8000c4a:	68db      	ldr	r3, [r3, #12]
 8000c4c:	b29b      	uxth	r3, r3
 8000c4e:	1ad3      	subs	r3, r2, r3
 8000c50:	b29b      	uxth	r3, r3
 8000c52:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000c56:	b218      	sxth	r0, r3
 8000c58:	496b      	ldr	r1, [pc, #428]	; (8000e08 <Run_Scans+0x33c>)
 8000c5a:	4613      	mov	r3, r2
 8000c5c:	00db      	lsls	r3, r3, #3
 8000c5e:	4413      	add	r3, r2
 8000c60:	009b      	lsls	r3, r3, #2
 8000c62:	440b      	add	r3, r1
 8000c64:	3302      	adds	r3, #2
 8000c66:	4602      	mov	r2, r0
 8000c68:	801a      	strh	r2, [r3, #0]
		frame[n][2] = pData[4] - pData[5];
 8000c6a:	4b66      	ldr	r3, [pc, #408]	; (8000e04 <Run_Scans+0x338>)
 8000c6c:	691b      	ldr	r3, [r3, #16]
 8000c6e:	b29a      	uxth	r2, r3
 8000c70:	4b64      	ldr	r3, [pc, #400]	; (8000e04 <Run_Scans+0x338>)
 8000c72:	695b      	ldr	r3, [r3, #20]
 8000c74:	b29b      	uxth	r3, r3
 8000c76:	1ad3      	subs	r3, r2, r3
 8000c78:	b29b      	uxth	r3, r3
 8000c7a:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000c7e:	b218      	sxth	r0, r3
 8000c80:	4961      	ldr	r1, [pc, #388]	; (8000e08 <Run_Scans+0x33c>)
 8000c82:	4613      	mov	r3, r2
 8000c84:	00db      	lsls	r3, r3, #3
 8000c86:	4413      	add	r3, r2
 8000c88:	009b      	lsls	r3, r3, #2
 8000c8a:	440b      	add	r3, r1
 8000c8c:	3304      	adds	r3, #4
 8000c8e:	4602      	mov	r2, r0
 8000c90:	801a      	strh	r2, [r3, #0]
		frame[n][3] = pData[6] - pData[7];
 8000c92:	4b5c      	ldr	r3, [pc, #368]	; (8000e04 <Run_Scans+0x338>)
 8000c94:	699b      	ldr	r3, [r3, #24]
 8000c96:	b29a      	uxth	r2, r3
 8000c98:	4b5a      	ldr	r3, [pc, #360]	; (8000e04 <Run_Scans+0x338>)
 8000c9a:	69db      	ldr	r3, [r3, #28]
 8000c9c:	b29b      	uxth	r3, r3
 8000c9e:	1ad3      	subs	r3, r2, r3
 8000ca0:	b29b      	uxth	r3, r3
 8000ca2:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000ca6:	b218      	sxth	r0, r3
 8000ca8:	4957      	ldr	r1, [pc, #348]	; (8000e08 <Run_Scans+0x33c>)
 8000caa:	4613      	mov	r3, r2
 8000cac:	00db      	lsls	r3, r3, #3
 8000cae:	4413      	add	r3, r2
 8000cb0:	009b      	lsls	r3, r3, #2
 8000cb2:	440b      	add	r3, r1
 8000cb4:	3306      	adds	r3, #6
 8000cb6:	4602      	mov	r2, r0
 8000cb8:	801a      	strh	r2, [r3, #0]
		frame[n][4] = pData[8] - pData[9];
 8000cba:	4b52      	ldr	r3, [pc, #328]	; (8000e04 <Run_Scans+0x338>)
 8000cbc:	6a1b      	ldr	r3, [r3, #32]
 8000cbe:	b29a      	uxth	r2, r3
 8000cc0:	4b50      	ldr	r3, [pc, #320]	; (8000e04 <Run_Scans+0x338>)
 8000cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cc4:	b29b      	uxth	r3, r3
 8000cc6:	1ad3      	subs	r3, r2, r3
 8000cc8:	b29b      	uxth	r3, r3
 8000cca:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000cce:	b218      	sxth	r0, r3
 8000cd0:	494d      	ldr	r1, [pc, #308]	; (8000e08 <Run_Scans+0x33c>)
 8000cd2:	4613      	mov	r3, r2
 8000cd4:	00db      	lsls	r3, r3, #3
 8000cd6:	4413      	add	r3, r2
 8000cd8:	009b      	lsls	r3, r3, #2
 8000cda:	440b      	add	r3, r1
 8000cdc:	3308      	adds	r3, #8
 8000cde:	4602      	mov	r2, r0
 8000ce0:	801a      	strh	r2, [r3, #0]
		frame[n][5] = pData[10] - pData[11];
 8000ce2:	4b48      	ldr	r3, [pc, #288]	; (8000e04 <Run_Scans+0x338>)
 8000ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ce6:	b29a      	uxth	r2, r3
 8000ce8:	4b46      	ldr	r3, [pc, #280]	; (8000e04 <Run_Scans+0x338>)
 8000cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cec:	b29b      	uxth	r3, r3
 8000cee:	1ad3      	subs	r3, r2, r3
 8000cf0:	b29b      	uxth	r3, r3
 8000cf2:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000cf6:	b218      	sxth	r0, r3
 8000cf8:	4943      	ldr	r1, [pc, #268]	; (8000e08 <Run_Scans+0x33c>)
 8000cfa:	4613      	mov	r3, r2
 8000cfc:	00db      	lsls	r3, r3, #3
 8000cfe:	4413      	add	r3, r2
 8000d00:	009b      	lsls	r3, r3, #2
 8000d02:	440b      	add	r3, r1
 8000d04:	330a      	adds	r3, #10
 8000d06:	4602      	mov	r2, r0
 8000d08:	801a      	strh	r2, [r3, #0]
		GPIOB->BSRR |= (1<<27);
 8000d0a:	4b3c      	ldr	r3, [pc, #240]	; (8000dfc <Run_Scans+0x330>)
 8000d0c:	699b      	ldr	r3, [r3, #24]
 8000d0e:	4a3b      	ldr	r2, [pc, #236]	; (8000dfc <Run_Scans+0x330>)
 8000d10:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000d14:	6193      	str	r3, [r2, #24]
		GPIOA->BSRR |= (1<<4);
 8000d16:	4b38      	ldr	r3, [pc, #224]	; (8000df8 <Run_Scans+0x32c>)
 8000d18:	699b      	ldr	r3, [r3, #24]
 8000d1a:	4a37      	ldr	r2, [pc, #220]	; (8000df8 <Run_Scans+0x32c>)
 8000d1c:	f043 0310 	orr.w	r3, r3, #16
 8000d20:	6193      	str	r3, [r2, #24]
		//HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);

		asm("NOP");
 8000d22:	bf00      	nop
		asm("NOP");
 8000d24:	bf00      	nop
		asm("NOP");
 8000d26:	bf00      	nop
		asm("NOP");
 8000d28:	bf00      	nop
		asm("NOP");
 8000d2a:	bf00      	nop
		asm("NOP");
 8000d2c:	bf00      	nop

		while(spi4_f == 0){}
 8000d2e:	bf00      	nop
 8000d30:	4b36      	ldr	r3, [pc, #216]	; (8000e0c <Run_Scans+0x340>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	b2db      	uxtb	r3, r3
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d0fa      	beq.n	8000d30 <Run_Scans+0x264>
		spi4_f = 0;
 8000d3a:	4b34      	ldr	r3, [pc, #208]	; (8000e0c <Run_Scans+0x340>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	701a      	strb	r2, [r3, #0]
		frame[n][6] = pData1[0] - pData1[1];
 8000d40:	4b33      	ldr	r3, [pc, #204]	; (8000e10 <Run_Scans+0x344>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	b29a      	uxth	r2, r3
 8000d46:	4b32      	ldr	r3, [pc, #200]	; (8000e10 <Run_Scans+0x344>)
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	b29b      	uxth	r3, r3
 8000d4c:	1ad3      	subs	r3, r2, r3
 8000d4e:	b29b      	uxth	r3, r3
 8000d50:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000d54:	b218      	sxth	r0, r3
 8000d56:	492c      	ldr	r1, [pc, #176]	; (8000e08 <Run_Scans+0x33c>)
 8000d58:	4613      	mov	r3, r2
 8000d5a:	00db      	lsls	r3, r3, #3
 8000d5c:	4413      	add	r3, r2
 8000d5e:	009b      	lsls	r3, r3, #2
 8000d60:	440b      	add	r3, r1
 8000d62:	330c      	adds	r3, #12
 8000d64:	4602      	mov	r2, r0
 8000d66:	801a      	strh	r2, [r3, #0]
		frame[n][7] = pData1[2] - pData1[3];
 8000d68:	4b29      	ldr	r3, [pc, #164]	; (8000e10 <Run_Scans+0x344>)
 8000d6a:	689b      	ldr	r3, [r3, #8]
 8000d6c:	b29a      	uxth	r2, r3
 8000d6e:	4b28      	ldr	r3, [pc, #160]	; (8000e10 <Run_Scans+0x344>)
 8000d70:	68db      	ldr	r3, [r3, #12]
 8000d72:	b29b      	uxth	r3, r3
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	b29b      	uxth	r3, r3
 8000d78:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000d7c:	b218      	sxth	r0, r3
 8000d7e:	4922      	ldr	r1, [pc, #136]	; (8000e08 <Run_Scans+0x33c>)
 8000d80:	4613      	mov	r3, r2
 8000d82:	00db      	lsls	r3, r3, #3
 8000d84:	4413      	add	r3, r2
 8000d86:	009b      	lsls	r3, r3, #2
 8000d88:	440b      	add	r3, r1
 8000d8a:	330e      	adds	r3, #14
 8000d8c:	4602      	mov	r2, r0
 8000d8e:	801a      	strh	r2, [r3, #0]
		frame[n][8] = pData1[4] - pData1[5];
 8000d90:	4b1f      	ldr	r3, [pc, #124]	; (8000e10 <Run_Scans+0x344>)
 8000d92:	691b      	ldr	r3, [r3, #16]
 8000d94:	b29a      	uxth	r2, r3
 8000d96:	4b1e      	ldr	r3, [pc, #120]	; (8000e10 <Run_Scans+0x344>)
 8000d98:	695b      	ldr	r3, [r3, #20]
 8000d9a:	b29b      	uxth	r3, r3
 8000d9c:	1ad3      	subs	r3, r2, r3
 8000d9e:	b29b      	uxth	r3, r3
 8000da0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000da4:	b218      	sxth	r0, r3
 8000da6:	4918      	ldr	r1, [pc, #96]	; (8000e08 <Run_Scans+0x33c>)
 8000da8:	4613      	mov	r3, r2
 8000daa:	00db      	lsls	r3, r3, #3
 8000dac:	4413      	add	r3, r2
 8000dae:	009b      	lsls	r3, r3, #2
 8000db0:	440b      	add	r3, r1
 8000db2:	3310      	adds	r3, #16
 8000db4:	4602      	mov	r2, r0
 8000db6:	801a      	strh	r2, [r3, #0]
		frame[n][9] = pData1[6] - pData1[7];
 8000db8:	4b15      	ldr	r3, [pc, #84]	; (8000e10 <Run_Scans+0x344>)
 8000dba:	699b      	ldr	r3, [r3, #24]
 8000dbc:	b29a      	uxth	r2, r3
 8000dbe:	4b14      	ldr	r3, [pc, #80]	; (8000e10 <Run_Scans+0x344>)
 8000dc0:	69db      	ldr	r3, [r3, #28]
 8000dc2:	b29b      	uxth	r3, r3
 8000dc4:	1ad3      	subs	r3, r2, r3
 8000dc6:	b29b      	uxth	r3, r3
 8000dc8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000dcc:	b218      	sxth	r0, r3
 8000dce:	490e      	ldr	r1, [pc, #56]	; (8000e08 <Run_Scans+0x33c>)
 8000dd0:	4613      	mov	r3, r2
 8000dd2:	00db      	lsls	r3, r3, #3
 8000dd4:	4413      	add	r3, r2
 8000dd6:	009b      	lsls	r3, r3, #2
 8000dd8:	440b      	add	r3, r1
 8000dda:	3312      	adds	r3, #18
 8000ddc:	4602      	mov	r2, r0
 8000dde:	801a      	strh	r2, [r3, #0]
		frame[n][10] = pData1[8] - pData1[9];
 8000de0:	4b0b      	ldr	r3, [pc, #44]	; (8000e10 <Run_Scans+0x344>)
 8000de2:	6a1b      	ldr	r3, [r3, #32]
 8000de4:	b29a      	uxth	r2, r3
 8000de6:	4b0a      	ldr	r3, [pc, #40]	; (8000e10 <Run_Scans+0x344>)
 8000de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dea:	b29b      	uxth	r3, r3
 8000dec:	1ad3      	subs	r3, r2, r3
 8000dee:	b29b      	uxth	r3, r3
 8000df0:	e010      	b.n	8000e14 <Run_Scans+0x348>
 8000df2:	bf00      	nop
 8000df4:	40021000 	.word	0x40021000
 8000df8:	40020000 	.word	0x40020000
 8000dfc:	40020400 	.word	0x40020400
 8000e00:	20000784 	.word	0x20000784
 8000e04:	200016c8 	.word	0x200016c8
 8000e08:	200033ec 	.word	0x200033ec
 8000e0c:	20000785 	.word	0x20000785
 8000e10:	20000cdc 	.word	0x20000cdc
 8000e14:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000e18:	b218      	sxth	r0, r3
 8000e1a:	49c1      	ldr	r1, [pc, #772]	; (8001120 <Run_Scans+0x654>)
 8000e1c:	4613      	mov	r3, r2
 8000e1e:	00db      	lsls	r3, r3, #3
 8000e20:	4413      	add	r3, r2
 8000e22:	009b      	lsls	r3, r3, #2
 8000e24:	440b      	add	r3, r1
 8000e26:	3314      	adds	r3, #20
 8000e28:	4602      	mov	r2, r0
 8000e2a:	801a      	strh	r2, [r3, #0]
		frame[n][11] = pData1[10] - pData1[11];
 8000e2c:	4bbd      	ldr	r3, [pc, #756]	; (8001124 <Run_Scans+0x658>)
 8000e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e30:	b29a      	uxth	r2, r3
 8000e32:	4bbc      	ldr	r3, [pc, #752]	; (8001124 <Run_Scans+0x658>)
 8000e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e36:	b29b      	uxth	r3, r3
 8000e38:	1ad3      	subs	r3, r2, r3
 8000e3a:	b29b      	uxth	r3, r3
 8000e3c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000e40:	b218      	sxth	r0, r3
 8000e42:	49b7      	ldr	r1, [pc, #732]	; (8001120 <Run_Scans+0x654>)
 8000e44:	4613      	mov	r3, r2
 8000e46:	00db      	lsls	r3, r3, #3
 8000e48:	4413      	add	r3, r2
 8000e4a:	009b      	lsls	r3, r3, #2
 8000e4c:	440b      	add	r3, r1
 8000e4e:	3316      	adds	r3, #22
 8000e50:	4602      	mov	r2, r0
 8000e52:	801a      	strh	r2, [r3, #0]

		GPIOE->BSRR |= (1<<11);
 8000e54:	4bb4      	ldr	r3, [pc, #720]	; (8001128 <Run_Scans+0x65c>)
 8000e56:	699b      	ldr	r3, [r3, #24]
 8000e58:	4ab3      	ldr	r2, [pc, #716]	; (8001128 <Run_Scans+0x65c>)
 8000e5a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e5e:	6193      	str	r3, [r2, #24]
		//HAL_GPIO_WritePin(CS2_GPIO_Port, CS2_Pin, GPIO_PIN_SET);


		asm("NOP");
 8000e60:	bf00      	nop
		asm("NOP");
 8000e62:	bf00      	nop
		asm("NOP");
 8000e64:	bf00      	nop
		asm("NOP");
 8000e66:	bf00      	nop
		asm("NOP");
 8000e68:	bf00      	nop
		asm("NOP");
 8000e6a:	bf00      	nop

		while(spi6_f == 0){}
 8000e6c:	bf00      	nop
 8000e6e:	4baf      	ldr	r3, [pc, #700]	; (800112c <Run_Scans+0x660>)
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	b2db      	uxtb	r3, r3
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d0fa      	beq.n	8000e6e <Run_Scans+0x3a2>
		spi6_f = 0;
 8000e78:	4bac      	ldr	r3, [pc, #688]	; (800112c <Run_Scans+0x660>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	701a      	strb	r2, [r3, #0]
		frame[n][12] = pData2[0] - pData2[1];
 8000e7e:	4bac      	ldr	r3, [pc, #688]	; (8001130 <Run_Scans+0x664>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	b29a      	uxth	r2, r3
 8000e84:	4baa      	ldr	r3, [pc, #680]	; (8001130 <Run_Scans+0x664>)
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	b29b      	uxth	r3, r3
 8000e8a:	1ad3      	subs	r3, r2, r3
 8000e8c:	b29b      	uxth	r3, r3
 8000e8e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000e92:	b218      	sxth	r0, r3
 8000e94:	49a2      	ldr	r1, [pc, #648]	; (8001120 <Run_Scans+0x654>)
 8000e96:	4613      	mov	r3, r2
 8000e98:	00db      	lsls	r3, r3, #3
 8000e9a:	4413      	add	r3, r2
 8000e9c:	009b      	lsls	r3, r3, #2
 8000e9e:	440b      	add	r3, r1
 8000ea0:	3318      	adds	r3, #24
 8000ea2:	4602      	mov	r2, r0
 8000ea4:	801a      	strh	r2, [r3, #0]
		frame[n][13] = pData2[2] - pData2[3];
 8000ea6:	4ba2      	ldr	r3, [pc, #648]	; (8001130 <Run_Scans+0x664>)
 8000ea8:	689b      	ldr	r3, [r3, #8]
 8000eaa:	b29a      	uxth	r2, r3
 8000eac:	4ba0      	ldr	r3, [pc, #640]	; (8001130 <Run_Scans+0x664>)
 8000eae:	68db      	ldr	r3, [r3, #12]
 8000eb0:	b29b      	uxth	r3, r3
 8000eb2:	1ad3      	subs	r3, r2, r3
 8000eb4:	b29b      	uxth	r3, r3
 8000eb6:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000eba:	b218      	sxth	r0, r3
 8000ebc:	4998      	ldr	r1, [pc, #608]	; (8001120 <Run_Scans+0x654>)
 8000ebe:	4613      	mov	r3, r2
 8000ec0:	00db      	lsls	r3, r3, #3
 8000ec2:	4413      	add	r3, r2
 8000ec4:	009b      	lsls	r3, r3, #2
 8000ec6:	440b      	add	r3, r1
 8000ec8:	331a      	adds	r3, #26
 8000eca:	4602      	mov	r2, r0
 8000ecc:	801a      	strh	r2, [r3, #0]
		frame[n][14] = pData2[4] - pData2[5];
 8000ece:	4b98      	ldr	r3, [pc, #608]	; (8001130 <Run_Scans+0x664>)
 8000ed0:	691b      	ldr	r3, [r3, #16]
 8000ed2:	b29a      	uxth	r2, r3
 8000ed4:	4b96      	ldr	r3, [pc, #600]	; (8001130 <Run_Scans+0x664>)
 8000ed6:	695b      	ldr	r3, [r3, #20]
 8000ed8:	b29b      	uxth	r3, r3
 8000eda:	1ad3      	subs	r3, r2, r3
 8000edc:	b29b      	uxth	r3, r3
 8000ede:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000ee2:	b218      	sxth	r0, r3
 8000ee4:	498e      	ldr	r1, [pc, #568]	; (8001120 <Run_Scans+0x654>)
 8000ee6:	4613      	mov	r3, r2
 8000ee8:	00db      	lsls	r3, r3, #3
 8000eea:	4413      	add	r3, r2
 8000eec:	009b      	lsls	r3, r3, #2
 8000eee:	440b      	add	r3, r1
 8000ef0:	331c      	adds	r3, #28
 8000ef2:	4602      	mov	r2, r0
 8000ef4:	801a      	strh	r2, [r3, #0]
		frame[n][15] = pData2[6] - pData2[7];
 8000ef6:	4b8e      	ldr	r3, [pc, #568]	; (8001130 <Run_Scans+0x664>)
 8000ef8:	699b      	ldr	r3, [r3, #24]
 8000efa:	b29a      	uxth	r2, r3
 8000efc:	4b8c      	ldr	r3, [pc, #560]	; (8001130 <Run_Scans+0x664>)
 8000efe:	69db      	ldr	r3, [r3, #28]
 8000f00:	b29b      	uxth	r3, r3
 8000f02:	1ad3      	subs	r3, r2, r3
 8000f04:	b29b      	uxth	r3, r3
 8000f06:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000f0a:	b218      	sxth	r0, r3
 8000f0c:	4984      	ldr	r1, [pc, #528]	; (8001120 <Run_Scans+0x654>)
 8000f0e:	4613      	mov	r3, r2
 8000f10:	00db      	lsls	r3, r3, #3
 8000f12:	4413      	add	r3, r2
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	440b      	add	r3, r1
 8000f18:	331e      	adds	r3, #30
 8000f1a:	4602      	mov	r2, r0
 8000f1c:	801a      	strh	r2, [r3, #0]
		frame[n][16] = pData2[8] - pData2[9];
 8000f1e:	4b84      	ldr	r3, [pc, #528]	; (8001130 <Run_Scans+0x664>)
 8000f20:	6a1b      	ldr	r3, [r3, #32]
 8000f22:	b29a      	uxth	r2, r3
 8000f24:	4b82      	ldr	r3, [pc, #520]	; (8001130 <Run_Scans+0x664>)
 8000f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f28:	b29b      	uxth	r3, r3
 8000f2a:	1ad3      	subs	r3, r2, r3
 8000f2c:	b29b      	uxth	r3, r3
 8000f2e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000f32:	b218      	sxth	r0, r3
 8000f34:	497a      	ldr	r1, [pc, #488]	; (8001120 <Run_Scans+0x654>)
 8000f36:	4613      	mov	r3, r2
 8000f38:	00db      	lsls	r3, r3, #3
 8000f3a:	4413      	add	r3, r2
 8000f3c:	009b      	lsls	r3, r3, #2
 8000f3e:	440b      	add	r3, r1
 8000f40:	3320      	adds	r3, #32
 8000f42:	4602      	mov	r2, r0
 8000f44:	801a      	strh	r2, [r3, #0]
		frame[n][17] = pData2[10] - pData2[11];
 8000f46:	4b7a      	ldr	r3, [pc, #488]	; (8001130 <Run_Scans+0x664>)
 8000f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f4a:	b29a      	uxth	r2, r3
 8000f4c:	4b78      	ldr	r3, [pc, #480]	; (8001130 <Run_Scans+0x664>)
 8000f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f50:	b29b      	uxth	r3, r3
 8000f52:	1ad3      	subs	r3, r2, r3
 8000f54:	b29b      	uxth	r3, r3
 8000f56:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000f5a:	b218      	sxth	r0, r3
 8000f5c:	4970      	ldr	r1, [pc, #448]	; (8001120 <Run_Scans+0x654>)
 8000f5e:	4613      	mov	r3, r2
 8000f60:	00db      	lsls	r3, r3, #3
 8000f62:	4413      	add	r3, r2
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	440b      	add	r3, r1
 8000f68:	3322      	adds	r3, #34	; 0x22
 8000f6a:	4602      	mov	r2, r0
 8000f6c:	801a      	strh	r2, [r3, #0]

		GPIOG->BSRR |= (1<<8);
 8000f6e:	4b71      	ldr	r3, [pc, #452]	; (8001134 <Run_Scans+0x668>)
 8000f70:	699b      	ldr	r3, [r3, #24]
 8000f72:	4a70      	ldr	r2, [pc, #448]	; (8001134 <Run_Scans+0x668>)
 8000f74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f78:	6193      	str	r3, [r2, #24]
//		HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);
//		HAL_GPIO_WritePin(CS2_GPIO_Port, CS2_Pin, GPIO_PIN_SET);
//		HAL_GPIO_WritePin(CS3_GPIO_Port, CS3_Pin, GPIO_PIN_SET);

		//=== RESET ACCUMULATOR ===
		portCTRL->BSRR |= (1<<pinRSTACCH)| (1<<pinCFB1H);// | (1<<pinCFB1H) | (1<<pinCFB2H);	//ACCRST ON PB6
 8000f7a:	4b6b      	ldr	r3, [pc, #428]	; (8001128 <Run_Scans+0x65c>)
 8000f7c:	699b      	ldr	r3, [r3, #24]
 8000f7e:	4a6a      	ldr	r2, [pc, #424]	; (8001128 <Run_Scans+0x65c>)
 8000f80:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8000f84:	6193      	str	r3, [r2, #24]

		sprintf(str_Frame,"%5d#%5d#%5d#%5d#%5d#%5d#%5d#%5d#%5d#%5d#%5d#%5d#%5d#%5d#%5d#%5d#%5d#%5d#",frame[n][0],frame[n][1],frame[n][2],frame[n][3],frame[n][4],frame[n][5],frame[n][6],frame[n][7],frame[n][8],frame[n][9],frame[n][10],frame[n][11],frame[n][12],frame[n][13],frame[n][14],frame[n][15],frame[n][16],frame[n][17]);
 8000f86:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000f8a:	4965      	ldr	r1, [pc, #404]	; (8001120 <Run_Scans+0x654>)
 8000f8c:	4613      	mov	r3, r2
 8000f8e:	00db      	lsls	r3, r3, #3
 8000f90:	4413      	add	r3, r2
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	440b      	add	r3, r1
 8000f96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f9a:	469c      	mov	ip, r3
 8000f9c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000fa0:	495f      	ldr	r1, [pc, #380]	; (8001120 <Run_Scans+0x654>)
 8000fa2:	4613      	mov	r3, r2
 8000fa4:	00db      	lsls	r3, r3, #3
 8000fa6:	4413      	add	r3, r2
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	440b      	add	r3, r1
 8000fac:	3302      	adds	r3, #2
 8000fae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fb2:	469e      	mov	lr, r3
 8000fb4:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000fb8:	4959      	ldr	r1, [pc, #356]	; (8001120 <Run_Scans+0x654>)
 8000fba:	4613      	mov	r3, r2
 8000fbc:	00db      	lsls	r3, r3, #3
 8000fbe:	4413      	add	r3, r2
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	440b      	add	r3, r1
 8000fc4:	3304      	adds	r3, #4
 8000fc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fca:	62bb      	str	r3, [r7, #40]	; 0x28
 8000fcc:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000fd0:	4953      	ldr	r1, [pc, #332]	; (8001120 <Run_Scans+0x654>)
 8000fd2:	4613      	mov	r3, r2
 8000fd4:	00db      	lsls	r3, r3, #3
 8000fd6:	4413      	add	r3, r2
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	440b      	add	r3, r1
 8000fdc:	3306      	adds	r3, #6
 8000fde:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fe2:	627b      	str	r3, [r7, #36]	; 0x24
 8000fe4:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000fe8:	494d      	ldr	r1, [pc, #308]	; (8001120 <Run_Scans+0x654>)
 8000fea:	4613      	mov	r3, r2
 8000fec:	00db      	lsls	r3, r3, #3
 8000fee:	4413      	add	r3, r2
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	440b      	add	r3, r1
 8000ff4:	3308      	adds	r3, #8
 8000ff6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ffa:	623b      	str	r3, [r7, #32]
 8000ffc:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8001000:	4947      	ldr	r1, [pc, #284]	; (8001120 <Run_Scans+0x654>)
 8001002:	4613      	mov	r3, r2
 8001004:	00db      	lsls	r3, r3, #3
 8001006:	4413      	add	r3, r2
 8001008:	009b      	lsls	r3, r3, #2
 800100a:	440b      	add	r3, r1
 800100c:	330a      	adds	r3, #10
 800100e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001012:	61fb      	str	r3, [r7, #28]
 8001014:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8001018:	4941      	ldr	r1, [pc, #260]	; (8001120 <Run_Scans+0x654>)
 800101a:	4613      	mov	r3, r2
 800101c:	00db      	lsls	r3, r3, #3
 800101e:	4413      	add	r3, r2
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	440b      	add	r3, r1
 8001024:	330c      	adds	r3, #12
 8001026:	f9b3 3000 	ldrsh.w	r3, [r3]
 800102a:	61bb      	str	r3, [r7, #24]
 800102c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8001030:	493b      	ldr	r1, [pc, #236]	; (8001120 <Run_Scans+0x654>)
 8001032:	4613      	mov	r3, r2
 8001034:	00db      	lsls	r3, r3, #3
 8001036:	4413      	add	r3, r2
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	440b      	add	r3, r1
 800103c:	330e      	adds	r3, #14
 800103e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001042:	617b      	str	r3, [r7, #20]
 8001044:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8001048:	4935      	ldr	r1, [pc, #212]	; (8001120 <Run_Scans+0x654>)
 800104a:	4613      	mov	r3, r2
 800104c:	00db      	lsls	r3, r3, #3
 800104e:	4413      	add	r3, r2
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	440b      	add	r3, r1
 8001054:	3310      	adds	r3, #16
 8001056:	f9b3 3000 	ldrsh.w	r3, [r3]
 800105a:	613b      	str	r3, [r7, #16]
 800105c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8001060:	492f      	ldr	r1, [pc, #188]	; (8001120 <Run_Scans+0x654>)
 8001062:	4613      	mov	r3, r2
 8001064:	00db      	lsls	r3, r3, #3
 8001066:	4413      	add	r3, r2
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	440b      	add	r3, r1
 800106c:	3312      	adds	r3, #18
 800106e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8001078:	4929      	ldr	r1, [pc, #164]	; (8001120 <Run_Scans+0x654>)
 800107a:	4613      	mov	r3, r2
 800107c:	00db      	lsls	r3, r3, #3
 800107e:	4413      	add	r3, r2
 8001080:	009b      	lsls	r3, r3, #2
 8001082:	440b      	add	r3, r1
 8001084:	3314      	adds	r3, #20
 8001086:	f9b3 3000 	ldrsh.w	r3, [r3]
 800108a:	60bb      	str	r3, [r7, #8]
 800108c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8001090:	4923      	ldr	r1, [pc, #140]	; (8001120 <Run_Scans+0x654>)
 8001092:	4613      	mov	r3, r2
 8001094:	00db      	lsls	r3, r3, #3
 8001096:	4413      	add	r3, r2
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	440b      	add	r3, r1
 800109c:	3316      	adds	r3, #22
 800109e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010a2:	607b      	str	r3, [r7, #4]
 80010a4:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80010a8:	491d      	ldr	r1, [pc, #116]	; (8001120 <Run_Scans+0x654>)
 80010aa:	4613      	mov	r3, r2
 80010ac:	00db      	lsls	r3, r3, #3
 80010ae:	4413      	add	r3, r2
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	440b      	add	r3, r1
 80010b4:	3318      	adds	r3, #24
 80010b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010ba:	603b      	str	r3, [r7, #0]
 80010bc:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80010c0:	4917      	ldr	r1, [pc, #92]	; (8001120 <Run_Scans+0x654>)
 80010c2:	4613      	mov	r3, r2
 80010c4:	00db      	lsls	r3, r3, #3
 80010c6:	4413      	add	r3, r2
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	440b      	add	r3, r1
 80010cc:	331a      	adds	r3, #26
 80010ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010d2:	461e      	mov	r6, r3
 80010d4:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80010d8:	4911      	ldr	r1, [pc, #68]	; (8001120 <Run_Scans+0x654>)
 80010da:	4613      	mov	r3, r2
 80010dc:	00db      	lsls	r3, r3, #3
 80010de:	4413      	add	r3, r2
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	440b      	add	r3, r1
 80010e4:	331c      	adds	r3, #28
 80010e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010ea:	461d      	mov	r5, r3
 80010ec:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80010f0:	490b      	ldr	r1, [pc, #44]	; (8001120 <Run_Scans+0x654>)
 80010f2:	4613      	mov	r3, r2
 80010f4:	00db      	lsls	r3, r3, #3
 80010f6:	4413      	add	r3, r2
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	440b      	add	r3, r1
 80010fc:	331e      	adds	r3, #30
 80010fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001102:	461c      	mov	r4, r3
 8001104:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8001108:	4905      	ldr	r1, [pc, #20]	; (8001120 <Run_Scans+0x654>)
 800110a:	4613      	mov	r3, r2
 800110c:	00db      	lsls	r3, r3, #3
 800110e:	4413      	add	r3, r2
 8001110:	009b      	lsls	r3, r3, #2
 8001112:	440b      	add	r3, r1
 8001114:	3320      	adds	r3, #32
 8001116:	f9b3 3000 	ldrsh.w	r3, [r3]
 800111a:	4618      	mov	r0, r3
 800111c:	e00c      	b.n	8001138 <Run_Scans+0x66c>
 800111e:	bf00      	nop
 8001120:	200033ec 	.word	0x200033ec
 8001124:	20000cdc 	.word	0x20000cdc
 8001128:	40021000 	.word	0x40021000
 800112c:	20000786 	.word	0x20000786
 8001130:	20003684 	.word	0x20003684
 8001134:	40021800 	.word	0x40021800
 8001138:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800113c:	491f      	ldr	r1, [pc, #124]	; (80011bc <Run_Scans+0x6f0>)
 800113e:	4613      	mov	r3, r2
 8001140:	00db      	lsls	r3, r3, #3
 8001142:	4413      	add	r3, r2
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	440b      	add	r3, r1
 8001148:	3322      	adds	r3, #34	; 0x22
 800114a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800114e:	930f      	str	r3, [sp, #60]	; 0x3c
 8001150:	900e      	str	r0, [sp, #56]	; 0x38
 8001152:	940d      	str	r4, [sp, #52]	; 0x34
 8001154:	950c      	str	r5, [sp, #48]	; 0x30
 8001156:	960b      	str	r6, [sp, #44]	; 0x2c
 8001158:	683a      	ldr	r2, [r7, #0]
 800115a:	920a      	str	r2, [sp, #40]	; 0x28
 800115c:	687a      	ldr	r2, [r7, #4]
 800115e:	9209      	str	r2, [sp, #36]	; 0x24
 8001160:	68ba      	ldr	r2, [r7, #8]
 8001162:	9208      	str	r2, [sp, #32]
 8001164:	68fa      	ldr	r2, [r7, #12]
 8001166:	9207      	str	r2, [sp, #28]
 8001168:	693a      	ldr	r2, [r7, #16]
 800116a:	9206      	str	r2, [sp, #24]
 800116c:	697a      	ldr	r2, [r7, #20]
 800116e:	9205      	str	r2, [sp, #20]
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	9204      	str	r2, [sp, #16]
 8001174:	69fa      	ldr	r2, [r7, #28]
 8001176:	9203      	str	r2, [sp, #12]
 8001178:	6a3a      	ldr	r2, [r7, #32]
 800117a:	9202      	str	r2, [sp, #8]
 800117c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800117e:	9201      	str	r2, [sp, #4]
 8001180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001182:	9300      	str	r3, [sp, #0]
 8001184:	4673      	mov	r3, lr
 8001186:	4662      	mov	r2, ip
 8001188:	490d      	ldr	r1, [pc, #52]	; (80011c0 <Run_Scans+0x6f4>)
 800118a:	480e      	ldr	r0, [pc, #56]	; (80011c4 <Run_Scans+0x6f8>)
 800118c:	f004 fd84 	bl	8005c98 <siprintf>

		portMSTR->BSRR |= (1<<pinMSTRL);	//MSTR OFF PC6
 8001190:	4b0d      	ldr	r3, [pc, #52]	; (80011c8 <Run_Scans+0x6fc>)
 8001192:	699b      	ldr	r3, [r3, #24]
 8001194:	4a0c      	ldr	r2, [pc, #48]	; (80011c8 <Run_Scans+0x6fc>)
 8001196:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800119a:	6193      	str	r3, [r2, #24]
		//portCS->BSRR |= (1<<pinCS2L);	// SS2 OFF PB12
		//===========================================================//
	} while(n++ < o);
 800119c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80011a0:	1c5a      	adds	r2, r3, #1
 80011a2:	f887 2037 	strb.w	r2, [r7, #55]	; 0x37
 80011a6:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80011aa:	429a      	cmp	r2, r3
 80011ac:	f63f acae 	bhi.w	8000b0c <Run_Scans+0x40>
}
 80011b0:	bf00      	nop
 80011b2:	bf00      	nop
 80011b4:	373c      	adds	r7, #60	; 0x3c
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011ba:	bf00      	nop
 80011bc:	200033ec 	.word	0x200033ec
 80011c0:	0800650c 	.word	0x0800650c
 80011c4:	2000002c 	.word	0x2000002c
 80011c8:	40020000 	.word	0x40020000

080011cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011cc:	b590      	push	{r4, r7, lr}
 80011ce:	b085      	sub	sp, #20
 80011d0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011d2:	f001 f993 	bl	80024fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011d6:	f000 f95b 	bl	8001490 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011da:	f000 fb63 	bl	80018a4 <MX_GPIO_Init>
  MX_DMA_Init();
 80011de:	f000 fb29 	bl	8001834 <MX_DMA_Init>
  MX_SPI1_Init();
 80011e2:	f000 fa05 	bl	80015f0 <MX_SPI1_Init>
  MX_SPI4_Init();
 80011e6:	f000 fa69 	bl	80016bc <MX_SPI4_Init>
  MX_SPI6_Init();
 80011ea:	f000 fa9b 	bl	8001724 <MX_SPI6_Init>
  MX_USART1_UART_Init();
 80011ee:	f000 facd 	bl	800178c <MX_USART1_UART_Init>
  MX_SPI2_Init();
 80011f2:	f000 fa31 	bl	8001658 <MX_SPI2_Init>
  MX_I2C1_Init();
 80011f6:	f000 f9bb 	bl	8001570 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 80011fa:	f000 faf1 	bl	80017e0 <MX_USART3_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  Flush_Buffer((uint8_t *)pData, sizeof(pData));
 80011fe:	2130      	movs	r1, #48	; 0x30
 8001200:	488e      	ldr	r0, [pc, #568]	; (800143c <main+0x270>)
 8001202:	f7ff f9c1 	bl	8000588 <Flush_Buffer>
  Flush_Buffer((uint8_t *)pData1, sizeof(pData1));
 8001206:	2130      	movs	r1, #48	; 0x30
 8001208:	488d      	ldr	r0, [pc, #564]	; (8001440 <main+0x274>)
 800120a:	f7ff f9bd 	bl	8000588 <Flush_Buffer>
  Flush_Buffer((uint8_t *)pData2, sizeof(pData2));
 800120e:	2130      	movs	r1, #48	; 0x30
 8001210:	488c      	ldr	r0, [pc, #560]	; (8001444 <main+0x278>)
 8001212:	f7ff f9b9 	bl	8000588 <Flush_Buffer>

//  HAL_SPI_Receive_IT(&hspi1, (uint8_t *)pData, 24);
  HAL_SPI_Receive_DMA(&hspi1, (uint8_t *)pData, sizeof(pData));
 8001216:	2230      	movs	r2, #48	; 0x30
 8001218:	4988      	ldr	r1, [pc, #544]	; (800143c <main+0x270>)
 800121a:	488b      	ldr	r0, [pc, #556]	; (8001448 <main+0x27c>)
 800121c:	f003 f914 	bl	8004448 <HAL_SPI_Receive_DMA>
  HAL_SPI_Receive_DMA(&hspi4, (uint8_t *)pData1, sizeof(pData1));
 8001220:	2230      	movs	r2, #48	; 0x30
 8001222:	4987      	ldr	r1, [pc, #540]	; (8001440 <main+0x274>)
 8001224:	4889      	ldr	r0, [pc, #548]	; (800144c <main+0x280>)
 8001226:	f003 f90f 	bl	8004448 <HAL_SPI_Receive_DMA>
  HAL_SPI_Receive_DMA(&hspi6, (uint8_t *)pData2, sizeof(pData2));
 800122a:	2230      	movs	r2, #48	; 0x30
 800122c:	4985      	ldr	r1, [pc, #532]	; (8001444 <main+0x278>)
 800122e:	4888      	ldr	r0, [pc, #544]	; (8001450 <main+0x284>)
 8001230:	f003 f90a 	bl	8004448 <HAL_SPI_Receive_DMA>
  HAL_UART_Receive_DMA(&huart1, (uint8_t *)Rx_UART, 100);
 8001234:	2264      	movs	r2, #100	; 0x64
 8001236:	4987      	ldr	r1, [pc, #540]	; (8001454 <main+0x288>)
 8001238:	4887      	ldr	r0, [pc, #540]	; (8001458 <main+0x28c>)
 800123a:	f004 f8c4 	bl	80053c6 <HAL_UART_Receive_DMA>

  uint8_t b;
  for(b=0;b<16;b++)	SelfTx[b] = b*10;
 800123e:	2300      	movs	r3, #0
 8001240:	707b      	strb	r3, [r7, #1]
 8001242:	e00e      	b.n	8001262 <main+0x96>
 8001244:	787b      	ldrb	r3, [r7, #1]
 8001246:	b29b      	uxth	r3, r3
 8001248:	461a      	mov	r2, r3
 800124a:	0092      	lsls	r2, r2, #2
 800124c:	4413      	add	r3, r2
 800124e:	005b      	lsls	r3, r3, #1
 8001250:	b29a      	uxth	r2, r3
 8001252:	787b      	ldrb	r3, [r7, #1]
 8001254:	b211      	sxth	r1, r2
 8001256:	4a81      	ldr	r2, [pc, #516]	; (800145c <main+0x290>)
 8001258:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800125c:	787b      	ldrb	r3, [r7, #1]
 800125e:	3301      	adds	r3, #1
 8001260:	707b      	strb	r3, [r7, #1]
 8001262:	787b      	ldrb	r3, [r7, #1]
 8001264:	2b0f      	cmp	r3, #15
 8001266:	d9ed      	bls.n	8001244 <main+0x78>
  for(b=0;b<18;b++)	SelfRx[b] = b*10;
 8001268:	2300      	movs	r3, #0
 800126a:	707b      	strb	r3, [r7, #1]
 800126c:	e00e      	b.n	800128c <main+0xc0>
 800126e:	787b      	ldrb	r3, [r7, #1]
 8001270:	b29b      	uxth	r3, r3
 8001272:	461a      	mov	r2, r3
 8001274:	0092      	lsls	r2, r2, #2
 8001276:	4413      	add	r3, r2
 8001278:	005b      	lsls	r3, r3, #1
 800127a:	b29a      	uxth	r2, r3
 800127c:	787b      	ldrb	r3, [r7, #1]
 800127e:	b211      	sxth	r1, r2
 8001280:	4a77      	ldr	r2, [pc, #476]	; (8001460 <main+0x294>)
 8001282:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001286:	787b      	ldrb	r3, [r7, #1]
 8001288:	3301      	adds	r3, #1
 800128a:	707b      	strb	r3, [r7, #1]
 800128c:	787b      	ldrb	r3, [r7, #1]
 800128e:	2b11      	cmp	r3, #17
 8001290:	d9ed      	bls.n	800126e <main+0xa2>

  while (1)
  {
		s16p_buf = NULL;
 8001292:	2300      	movs	r3, #0
 8001294:	607b      	str	r3, [r7, #4]
		u16_byteLen = 0;
 8001296:	2300      	movs	r3, #0
 8001298:	807b      	strh	r3, [r7, #2]

	  //=== DIPAKAI TIM FW ===
	  spi2_f = 0;
 800129a:	4b72      	ldr	r3, [pc, #456]	; (8001464 <main+0x298>)
 800129c:	2200      	movs	r2, #0
 800129e:	701a      	strb	r2, [r3, #0]
	  HAL_SPI_Receive_IT(&hspi2, (uint8_t *)cmdhost, sizeof(cmdhost)/sizeof(int16_t));
 80012a0:	2205      	movs	r2, #5
 80012a2:	4971      	ldr	r1, [pc, #452]	; (8001468 <main+0x29c>)
 80012a4:	4871      	ldr	r0, [pc, #452]	; (800146c <main+0x2a0>)
 80012a6:	f002 ff9d 	bl	80041e4 <HAL_SPI_Receive_IT>
	  while(spi2_f == 0){}
 80012aa:	bf00      	nop
 80012ac:	4b6d      	ldr	r3, [pc, #436]	; (8001464 <main+0x298>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d0fa      	beq.n	80012ac <main+0xe0>
	  cmdhost2 = Vref
	  cmdhost3 = Freq
	  cmdhost4 = nTx
	  cmdhost5 = numAcc
*/
	  if(2 == cmdhost[1])
 80012b6:	4b6c      	ldr	r3, [pc, #432]	; (8001468 <main+0x29c>)
 80012b8:	785b      	ldrb	r3, [r3, #1]
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	d159      	bne.n	8001372 <main+0x1a6>
	  {
		  Vref_f = cmdhost[2];
 80012be:	4b6a      	ldr	r3, [pc, #424]	; (8001468 <main+0x29c>)
 80012c0:	789a      	ldrb	r2, [r3, #2]
 80012c2:	4b6b      	ldr	r3, [pc, #428]	; (8001470 <main+0x2a4>)
 80012c4:	701a      	strb	r2, [r3, #0]
		  //Freq_f = cmdhost[3];
		  //nTx_f = cmdhost[4];
		  numAcc_f = cmdhost[5];
 80012c6:	4b68      	ldr	r3, [pc, #416]	; (8001468 <main+0x29c>)
 80012c8:	795a      	ldrb	r2, [r3, #5]
 80012ca:	4b6a      	ldr	r3, [pc, #424]	; (8001474 <main+0x2a8>)
 80012cc:	701a      	strb	r2, [r3, #0]

		  initTx_f = 0; nTx_f = 4;
 80012ce:	4b6a      	ldr	r3, [pc, #424]	; (8001478 <main+0x2ac>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	701a      	strb	r2, [r3, #0]
 80012d4:	4b69      	ldr	r3, [pc, #420]	; (800147c <main+0x2b0>)
 80012d6:	2204      	movs	r2, #4
 80012d8:	701a      	strb	r2, [r3, #0]
		  Run_Scans(0, initTx_f, nTx_f, numAcc_f, Vref_f);	//freq nTx numAcc Vref
 80012da:	4b67      	ldr	r3, [pc, #412]	; (8001478 <main+0x2ac>)
 80012dc:	7819      	ldrb	r1, [r3, #0]
 80012de:	4b67      	ldr	r3, [pc, #412]	; (800147c <main+0x2b0>)
 80012e0:	781a      	ldrb	r2, [r3, #0]
 80012e2:	4b64      	ldr	r3, [pc, #400]	; (8001474 <main+0x2a8>)
 80012e4:	7818      	ldrb	r0, [r3, #0]
 80012e6:	4b62      	ldr	r3, [pc, #392]	; (8001470 <main+0x2a4>)
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	9300      	str	r3, [sp, #0]
 80012ec:	4603      	mov	r3, r0
 80012ee:	2000      	movs	r0, #0
 80012f0:	f7ff fbec 	bl	8000acc <Run_Scans>

		  initTx_f = 5; nTx_f = 8;
 80012f4:	4b60      	ldr	r3, [pc, #384]	; (8001478 <main+0x2ac>)
 80012f6:	2205      	movs	r2, #5
 80012f8:	701a      	strb	r2, [r3, #0]
 80012fa:	4b60      	ldr	r3, [pc, #384]	; (800147c <main+0x2b0>)
 80012fc:	2208      	movs	r2, #8
 80012fe:	701a      	strb	r2, [r3, #0]
		  Run_Scans(1, initTx_f, nTx_f, numAcc_f, Vref_f);	//freq nTx numAcc Vref
 8001300:	4b5d      	ldr	r3, [pc, #372]	; (8001478 <main+0x2ac>)
 8001302:	7819      	ldrb	r1, [r3, #0]
 8001304:	4b5d      	ldr	r3, [pc, #372]	; (800147c <main+0x2b0>)
 8001306:	781a      	ldrb	r2, [r3, #0]
 8001308:	4b5a      	ldr	r3, [pc, #360]	; (8001474 <main+0x2a8>)
 800130a:	7818      	ldrb	r0, [r3, #0]
 800130c:	4b58      	ldr	r3, [pc, #352]	; (8001470 <main+0x2a4>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	9300      	str	r3, [sp, #0]
 8001312:	4603      	mov	r3, r0
 8001314:	2001      	movs	r0, #1
 8001316:	f7ff fbd9 	bl	8000acc <Run_Scans>

		  initTx_f = 9; nTx_f = 12;
 800131a:	4b57      	ldr	r3, [pc, #348]	; (8001478 <main+0x2ac>)
 800131c:	2209      	movs	r2, #9
 800131e:	701a      	strb	r2, [r3, #0]
 8001320:	4b56      	ldr	r3, [pc, #344]	; (800147c <main+0x2b0>)
 8001322:	220c      	movs	r2, #12
 8001324:	701a      	strb	r2, [r3, #0]
		  Run_Scans(2, initTx_f, nTx_f, numAcc_f, Vref_f);	//freq nTx numAcc Vref
 8001326:	4b54      	ldr	r3, [pc, #336]	; (8001478 <main+0x2ac>)
 8001328:	7819      	ldrb	r1, [r3, #0]
 800132a:	4b54      	ldr	r3, [pc, #336]	; (800147c <main+0x2b0>)
 800132c:	781a      	ldrb	r2, [r3, #0]
 800132e:	4b51      	ldr	r3, [pc, #324]	; (8001474 <main+0x2a8>)
 8001330:	7818      	ldrb	r0, [r3, #0]
 8001332:	4b4f      	ldr	r3, [pc, #316]	; (8001470 <main+0x2a4>)
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	9300      	str	r3, [sp, #0]
 8001338:	4603      	mov	r3, r0
 800133a:	2002      	movs	r0, #2
 800133c:	f7ff fbc6 	bl	8000acc <Run_Scans>

		  initTx_f = 13; nTx_f = 16;
 8001340:	4b4d      	ldr	r3, [pc, #308]	; (8001478 <main+0x2ac>)
 8001342:	220d      	movs	r2, #13
 8001344:	701a      	strb	r2, [r3, #0]
 8001346:	4b4d      	ldr	r3, [pc, #308]	; (800147c <main+0x2b0>)
 8001348:	2210      	movs	r2, #16
 800134a:	701a      	strb	r2, [r3, #0]
		  Run_Scans(3, initTx_f, nTx_f, numAcc_f, Vref_f);	//freq nTx numAcc Vref
 800134c:	4b4a      	ldr	r3, [pc, #296]	; (8001478 <main+0x2ac>)
 800134e:	7819      	ldrb	r1, [r3, #0]
 8001350:	4b4a      	ldr	r3, [pc, #296]	; (800147c <main+0x2b0>)
 8001352:	781a      	ldrb	r2, [r3, #0]
 8001354:	4b47      	ldr	r3, [pc, #284]	; (8001474 <main+0x2a8>)
 8001356:	7818      	ldrb	r0, [r3, #0]
 8001358:	4b45      	ldr	r3, [pc, #276]	; (8001470 <main+0x2a4>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	9300      	str	r3, [sp, #0]
 800135e:	4603      	mov	r3, r0
 8001360:	2003      	movs	r0, #3
 8001362:	f7ff fbb3 	bl	8000acc <Run_Scans>

		  //=== DIPAKAI TIM FW ===
			s16p_buf =  (int16_t*)frame;
 8001366:	4b46      	ldr	r3, [pc, #280]	; (8001480 <main+0x2b4>)
 8001368:	607b      	str	r3, [r7, #4]
			u16_byteLen = sizeof(frame);
 800136a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800136e:	807b      	strh	r3, [r7, #2]
 8001370:	e042      	b.n	80013f8 <main+0x22c>
	  }

	  else if(2 == cmdhost[1])
 8001372:	4b3d      	ldr	r3, [pc, #244]	; (8001468 <main+0x29c>)
 8001374:	785b      	ldrb	r3, [r3, #1]
 8001376:	2b02      	cmp	r3, #2
 8001378:	d10b      	bne.n	8001392 <main+0x1c6>
	  {
		  //Vref_f = cmdhost[2];
		  //Freq_f = cmdhost[3];
		  nTx_f = cmdhost[4];
 800137a:	4b3b      	ldr	r3, [pc, #236]	; (8001468 <main+0x29c>)
 800137c:	791a      	ldrb	r2, [r3, #4]
 800137e:	4b3f      	ldr	r3, [pc, #252]	; (800147c <main+0x2b0>)
 8001380:	701a      	strb	r2, [r3, #0]
		  //numAcc_f = cmdhost[5];

		  //=== DIPAKAI TIM FW ===
			s16p_buf = SelfTx;
 8001382:	4b36      	ldr	r3, [pc, #216]	; (800145c <main+0x290>)
 8001384:	607b      	str	r3, [r7, #4]
			u16_byteLen = nTx_f*sizeof(int16_t);
 8001386:	4b3d      	ldr	r3, [pc, #244]	; (800147c <main+0x2b0>)
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	b29b      	uxth	r3, r3
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	807b      	strh	r3, [r7, #2]
 8001390:	e032      	b.n	80013f8 <main+0x22c>
	  }

	  else if(3 == cmdhost[1])
 8001392:	4b35      	ldr	r3, [pc, #212]	; (8001468 <main+0x29c>)
 8001394:	785b      	ldrb	r3, [r3, #1]
 8001396:	2b03      	cmp	r3, #3
 8001398:	d104      	bne.n	80013a4 <main+0x1d8>
		  //Freq_f = cmdhost[3];
		  //nTx_f = cmdhost[4];
		  //numAcc_f = cmdhost[5];

		  //=== DIPAKAI TIM FW ===
			s16p_buf = SelfRx;
 800139a:	4b31      	ldr	r3, [pc, #196]	; (8001460 <main+0x294>)
 800139c:	607b      	str	r3, [r7, #4]
			u16_byteLen = sizeof(SelfRx);
 800139e:	2324      	movs	r3, #36	; 0x24
 80013a0:	807b      	strh	r3, [r7, #2]
 80013a2:	e029      	b.n	80013f8 <main+0x22c>
	  }

	  else if(5 == cmdhost[1])
 80013a4:	4b30      	ldr	r3, [pc, #192]	; (8001468 <main+0x29c>)
 80013a6:	785b      	ldrb	r3, [r3, #1]
 80013a8:	2b05      	cmp	r3, #5
 80013aa:	d125      	bne.n	80013f8 <main+0x22c>
	  {
		  Vref_f = cmdhost[2];
 80013ac:	4b2e      	ldr	r3, [pc, #184]	; (8001468 <main+0x29c>)
 80013ae:	789a      	ldrb	r2, [r3, #2]
 80013b0:	4b2f      	ldr	r3, [pc, #188]	; (8001470 <main+0x2a4>)
 80013b2:	701a      	strb	r2, [r3, #0]
		  Freq_f = cmdhost[3];
 80013b4:	4b2c      	ldr	r3, [pc, #176]	; (8001468 <main+0x29c>)
 80013b6:	78da      	ldrb	r2, [r3, #3]
 80013b8:	4b32      	ldr	r3, [pc, #200]	; (8001484 <main+0x2b8>)
 80013ba:	701a      	strb	r2, [r3, #0]
		  nTx_f = cmdhost[4];
 80013bc:	4b2a      	ldr	r3, [pc, #168]	; (8001468 <main+0x29c>)
 80013be:	791a      	ldrb	r2, [r3, #4]
 80013c0:	4b2e      	ldr	r3, [pc, #184]	; (800147c <main+0x2b0>)
 80013c2:	701a      	strb	r2, [r3, #0]
		  numAcc_f = cmdhost[5];
 80013c4:	4b28      	ldr	r3, [pc, #160]	; (8001468 <main+0x29c>)
 80013c6:	795a      	ldrb	r2, [r3, #5]
 80013c8:	4b2a      	ldr	r3, [pc, #168]	; (8001474 <main+0x2a8>)
 80013ca:	701a      	strb	r2, [r3, #0]
		  initTx_f = 0;
 80013cc:	4b2a      	ldr	r3, [pc, #168]	; (8001478 <main+0x2ac>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	701a      	strb	r2, [r3, #0]

		  Run_Scans(Freq_f, initTx_f, nTx_f, numAcc_f, Vref_f);	//freq nTx numAcc Vref
 80013d2:	4b2c      	ldr	r3, [pc, #176]	; (8001484 <main+0x2b8>)
 80013d4:	7818      	ldrb	r0, [r3, #0]
 80013d6:	4b28      	ldr	r3, [pc, #160]	; (8001478 <main+0x2ac>)
 80013d8:	7819      	ldrb	r1, [r3, #0]
 80013da:	4b28      	ldr	r3, [pc, #160]	; (800147c <main+0x2b0>)
 80013dc:	781a      	ldrb	r2, [r3, #0]
 80013de:	4b25      	ldr	r3, [pc, #148]	; (8001474 <main+0x2a8>)
 80013e0:	781c      	ldrb	r4, [r3, #0]
 80013e2:	4b23      	ldr	r3, [pc, #140]	; (8001470 <main+0x2a4>)
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	9300      	str	r3, [sp, #0]
 80013e8:	4623      	mov	r3, r4
 80013ea:	f7ff fb6f 	bl	8000acc <Run_Scans>

		  //=== DIPAKAI TIM FW ===
			s16p_buf =  (int16_t*)frame;
 80013ee:	4b24      	ldr	r3, [pc, #144]	; (8001480 <main+0x2b4>)
 80013f0:	607b      	str	r3, [r7, #4]
			u16_byteLen = sizeof(frame);
 80013f2:	f44f 7310 	mov.w	r3, #576	; 0x240
 80013f6:	807b      	strh	r3, [r7, #2]
	  }

		//=== DIPAKAI TIM FW ===
		if (NULL != s16p_buf)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	f43f af49 	beq.w	8001292 <main+0xc6>
		{
			spi2t_f = 0;
 8001400:	4b21      	ldr	r3, [pc, #132]	; (8001488 <main+0x2bc>)
 8001402:	2200      	movs	r2, #0
 8001404:	701a      	strb	r2, [r3, #0]
			HAL_SPI_Transmit_IT(&hspi2, (uint8_t*) s16p_buf, u16_byteLen/sizeof(int16_t));
 8001406:	887b      	ldrh	r3, [r7, #2]
 8001408:	085b      	lsrs	r3, r3, #1
 800140a:	b29b      	uxth	r3, r3
 800140c:	461a      	mov	r2, r3
 800140e:	6879      	ldr	r1, [r7, #4]
 8001410:	4816      	ldr	r0, [pc, #88]	; (800146c <main+0x2a0>)
 8001412:	f002 fe5d 	bl	80040d0 <HAL_SPI_Transmit_IT>
			GPIOB->BSRR |= (1<<8);
 8001416:	4b1d      	ldr	r3, [pc, #116]	; (800148c <main+0x2c0>)
 8001418:	699b      	ldr	r3, [r3, #24]
 800141a:	4a1c      	ldr	r2, [pc, #112]	; (800148c <main+0x2c0>)
 800141c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001420:	6193      	str	r3, [r2, #24]
			GPIOB->BSRR |= (1<<24);
 8001422:	4b1a      	ldr	r3, [pc, #104]	; (800148c <main+0x2c0>)
 8001424:	699b      	ldr	r3, [r3, #24]
 8001426:	4a19      	ldr	r2, [pc, #100]	; (800148c <main+0x2c0>)
 8001428:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800142c:	6193      	str	r3, [r2, #24]
			while(spi2t_f == 0){}
 800142e:	bf00      	nop
 8001430:	4b15      	ldr	r3, [pc, #84]	; (8001488 <main+0x2bc>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	b2db      	uxtb	r3, r3
 8001436:	2b00      	cmp	r3, #0
 8001438:	d0fa      	beq.n	8001430 <main+0x264>
		s16p_buf = NULL;
 800143a:	e72a      	b.n	8001292 <main+0xc6>
 800143c:	200016c8 	.word	0x200016c8
 8001440:	20000cdc 	.word	0x20000cdc
 8001444:	20003684 	.word	0x20003684
 8001448:	2000362c 	.word	0x2000362c
 800144c:	20002f14 	.word	0x20002f14
 8001450:	20001be4 	.word	0x20001be4
 8001454:	20000798 	.word	0x20000798
 8001458:	20002a50 	.word	0x20002a50
 800145c:	200016a8 	.word	0x200016a8
 8001460:	200036b4 	.word	0x200036b4
 8001464:	20000787 	.word	0x20000787
 8001468:	200016f8 	.word	0x200016f8
 800146c:	20000c84 	.word	0x20000c84
 8001470:	2000077d 	.word	0x2000077d
 8001474:	20000001 	.word	0x20000001
 8001478:	20000780 	.word	0x20000780
 800147c:	20000000 	.word	0x20000000
 8001480:	200033ec 	.word	0x200033ec
 8001484:	2000077e 	.word	0x2000077e
 8001488:	20000788 	.word	0x20000788
 800148c:	40020400 	.word	0x40020400

08001490 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b094      	sub	sp, #80	; 0x50
 8001494:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001496:	f107 0320 	add.w	r3, r7, #32
 800149a:	2230      	movs	r2, #48	; 0x30
 800149c:	2100      	movs	r1, #0
 800149e:	4618      	mov	r0, r3
 80014a0:	f004 fbf2 	bl	8005c88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014a4:	f107 030c 	add.w	r3, r7, #12
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	605a      	str	r2, [r3, #4]
 80014ae:	609a      	str	r2, [r3, #8]
 80014b0:	60da      	str	r2, [r3, #12]
 80014b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014b4:	2300      	movs	r3, #0
 80014b6:	60bb      	str	r3, [r7, #8]
 80014b8:	4b2b      	ldr	r3, [pc, #172]	; (8001568 <SystemClock_Config+0xd8>)
 80014ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014bc:	4a2a      	ldr	r2, [pc, #168]	; (8001568 <SystemClock_Config+0xd8>)
 80014be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014c2:	6413      	str	r3, [r2, #64]	; 0x40
 80014c4:	4b28      	ldr	r3, [pc, #160]	; (8001568 <SystemClock_Config+0xd8>)
 80014c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014cc:	60bb      	str	r3, [r7, #8]
 80014ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014d0:	2300      	movs	r3, #0
 80014d2:	607b      	str	r3, [r7, #4]
 80014d4:	4b25      	ldr	r3, [pc, #148]	; (800156c <SystemClock_Config+0xdc>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a24      	ldr	r2, [pc, #144]	; (800156c <SystemClock_Config+0xdc>)
 80014da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014de:	6013      	str	r3, [r2, #0]
 80014e0:	4b22      	ldr	r3, [pc, #136]	; (800156c <SystemClock_Config+0xdc>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014e8:	607b      	str	r3, [r7, #4]
 80014ea:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014ec:	2301      	movs	r3, #1
 80014ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014f4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014f6:	2302      	movs	r3, #2
 80014f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80014fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001500:	2304      	movs	r3, #4
 8001502:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001504:	23b4      	movs	r3, #180	; 0xb4
 8001506:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001508:	2302      	movs	r3, #2
 800150a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800150c:	2304      	movs	r3, #4
 800150e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001510:	f107 0320 	add.w	r3, r7, #32
 8001514:	4618      	mov	r0, r3
 8001516:	f002 f8dd 	bl	80036d4 <HAL_RCC_OscConfig>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001520:	f000 fc66 	bl	8001df0 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001524:	f002 f886 	bl	8003634 <HAL_PWREx_EnableOverDrive>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800152e:	f000 fc5f 	bl	8001df0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001532:	230f      	movs	r3, #15
 8001534:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001536:	2302      	movs	r3, #2
 8001538:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800153a:	2300      	movs	r3, #0
 800153c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800153e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001542:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001544:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001548:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800154a:	f107 030c 	add.w	r3, r7, #12
 800154e:	2105      	movs	r1, #5
 8001550:	4618      	mov	r0, r3
 8001552:	f002 fb37 	bl	8003bc4 <HAL_RCC_ClockConfig>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 800155c:	f000 fc48 	bl	8001df0 <Error_Handler>
  }
}
 8001560:	bf00      	nop
 8001562:	3750      	adds	r7, #80	; 0x50
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	40023800 	.word	0x40023800
 800156c:	40007000 	.word	0x40007000

08001570 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001574:	4b1b      	ldr	r3, [pc, #108]	; (80015e4 <MX_I2C1_Init+0x74>)
 8001576:	4a1c      	ldr	r2, [pc, #112]	; (80015e8 <MX_I2C1_Init+0x78>)
 8001578:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800157a:	4b1a      	ldr	r3, [pc, #104]	; (80015e4 <MX_I2C1_Init+0x74>)
 800157c:	4a1b      	ldr	r2, [pc, #108]	; (80015ec <MX_I2C1_Init+0x7c>)
 800157e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001580:	4b18      	ldr	r3, [pc, #96]	; (80015e4 <MX_I2C1_Init+0x74>)
 8001582:	2200      	movs	r2, #0
 8001584:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001586:	4b17      	ldr	r3, [pc, #92]	; (80015e4 <MX_I2C1_Init+0x74>)
 8001588:	2200      	movs	r2, #0
 800158a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800158c:	4b15      	ldr	r3, [pc, #84]	; (80015e4 <MX_I2C1_Init+0x74>)
 800158e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001592:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001594:	4b13      	ldr	r3, [pc, #76]	; (80015e4 <MX_I2C1_Init+0x74>)
 8001596:	2200      	movs	r2, #0
 8001598:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800159a:	4b12      	ldr	r3, [pc, #72]	; (80015e4 <MX_I2C1_Init+0x74>)
 800159c:	2200      	movs	r2, #0
 800159e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015a0:	4b10      	ldr	r3, [pc, #64]	; (80015e4 <MX_I2C1_Init+0x74>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015a6:	4b0f      	ldr	r3, [pc, #60]	; (80015e4 <MX_I2C1_Init+0x74>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015ac:	480d      	ldr	r0, [pc, #52]	; (80015e4 <MX_I2C1_Init+0x74>)
 80015ae:	f001 fe81 	bl	80032b4 <HAL_I2C_Init>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80015b8:	f000 fc1a 	bl	8001df0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80015bc:	2100      	movs	r1, #0
 80015be:	4809      	ldr	r0, [pc, #36]	; (80015e4 <MX_I2C1_Init+0x74>)
 80015c0:	f001 ffbc 	bl	800353c <HAL_I2CEx_ConfigAnalogFilter>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80015ca:	f000 fc11 	bl	8001df0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80015ce:	2100      	movs	r1, #0
 80015d0:	4804      	ldr	r0, [pc, #16]	; (80015e4 <MX_I2C1_Init+0x74>)
 80015d2:	f001 ffef 	bl	80035b4 <HAL_I2CEx_ConfigDigitalFilter>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80015dc:	f000 fc08 	bl	8001df0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015e0:	bf00      	nop
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	20000d54 	.word	0x20000d54
 80015e8:	40005400 	.word	0x40005400
 80015ec:	000186a0 	.word	0x000186a0

080015f0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80015f4:	4b16      	ldr	r3, [pc, #88]	; (8001650 <MX_SPI1_Init+0x60>)
 80015f6:	4a17      	ldr	r2, [pc, #92]	; (8001654 <MX_SPI1_Init+0x64>)
 80015f8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80015fa:	4b15      	ldr	r3, [pc, #84]	; (8001650 <MX_SPI1_Init+0x60>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8001600:	4b13      	ldr	r3, [pc, #76]	; (8001650 <MX_SPI1_Init+0x60>)
 8001602:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001606:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001608:	4b11      	ldr	r3, [pc, #68]	; (8001650 <MX_SPI1_Init+0x60>)
 800160a:	2200      	movs	r2, #0
 800160c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800160e:	4b10      	ldr	r3, [pc, #64]	; (8001650 <MX_SPI1_Init+0x60>)
 8001610:	2200      	movs	r2, #0
 8001612:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001614:	4b0e      	ldr	r3, [pc, #56]	; (8001650 <MX_SPI1_Init+0x60>)
 8001616:	2200      	movs	r2, #0
 8001618:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800161a:	4b0d      	ldr	r3, [pc, #52]	; (8001650 <MX_SPI1_Init+0x60>)
 800161c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001620:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001622:	4b0b      	ldr	r3, [pc, #44]	; (8001650 <MX_SPI1_Init+0x60>)
 8001624:	2200      	movs	r2, #0
 8001626:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001628:	4b09      	ldr	r3, [pc, #36]	; (8001650 <MX_SPI1_Init+0x60>)
 800162a:	2200      	movs	r2, #0
 800162c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800162e:	4b08      	ldr	r3, [pc, #32]	; (8001650 <MX_SPI1_Init+0x60>)
 8001630:	2200      	movs	r2, #0
 8001632:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001634:	4b06      	ldr	r3, [pc, #24]	; (8001650 <MX_SPI1_Init+0x60>)
 8001636:	220a      	movs	r2, #10
 8001638:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800163a:	4805      	ldr	r0, [pc, #20]	; (8001650 <MX_SPI1_Init+0x60>)
 800163c:	f002 fcbe 	bl	8003fbc <HAL_SPI_Init>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <MX_SPI1_Init+0x5a>
  {
    Error_Handler();
 8001646:	f000 fbd3 	bl	8001df0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800164a:	bf00      	nop
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	2000362c 	.word	0x2000362c
 8001654:	40013000 	.word	0x40013000

08001658 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800165c:	4b15      	ldr	r3, [pc, #84]	; (80016b4 <MX_SPI2_Init+0x5c>)
 800165e:	4a16      	ldr	r2, [pc, #88]	; (80016b8 <MX_SPI2_Init+0x60>)
 8001660:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8001662:	4b14      	ldr	r3, [pc, #80]	; (80016b4 <MX_SPI2_Init+0x5c>)
 8001664:	2200      	movs	r2, #0
 8001666:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001668:	4b12      	ldr	r3, [pc, #72]	; (80016b4 <MX_SPI2_Init+0x5c>)
 800166a:	2200      	movs	r2, #0
 800166c:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 800166e:	4b11      	ldr	r3, [pc, #68]	; (80016b4 <MX_SPI2_Init+0x5c>)
 8001670:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001674:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001676:	4b0f      	ldr	r3, [pc, #60]	; (80016b4 <MX_SPI2_Init+0x5c>)
 8001678:	2200      	movs	r2, #0
 800167a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800167c:	4b0d      	ldr	r3, [pc, #52]	; (80016b4 <MX_SPI2_Init+0x5c>)
 800167e:	2200      	movs	r2, #0
 8001680:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8001682:	4b0c      	ldr	r3, [pc, #48]	; (80016b4 <MX_SPI2_Init+0x5c>)
 8001684:	2200      	movs	r2, #0
 8001686:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001688:	4b0a      	ldr	r3, [pc, #40]	; (80016b4 <MX_SPI2_Init+0x5c>)
 800168a:	2200      	movs	r2, #0
 800168c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800168e:	4b09      	ldr	r3, [pc, #36]	; (80016b4 <MX_SPI2_Init+0x5c>)
 8001690:	2200      	movs	r2, #0
 8001692:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001694:	4b07      	ldr	r3, [pc, #28]	; (80016b4 <MX_SPI2_Init+0x5c>)
 8001696:	2200      	movs	r2, #0
 8001698:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800169a:	4b06      	ldr	r3, [pc, #24]	; (80016b4 <MX_SPI2_Init+0x5c>)
 800169c:	220a      	movs	r2, #10
 800169e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80016a0:	4804      	ldr	r0, [pc, #16]	; (80016b4 <MX_SPI2_Init+0x5c>)
 80016a2:	f002 fc8b 	bl	8003fbc <HAL_SPI_Init>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <MX_SPI2_Init+0x58>
  {
    Error_Handler();
 80016ac:	f000 fba0 	bl	8001df0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80016b0:	bf00      	nop
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	20000c84 	.word	0x20000c84
 80016b8:	40003800 	.word	0x40003800

080016bc <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 80016c0:	4b16      	ldr	r3, [pc, #88]	; (800171c <MX_SPI4_Init+0x60>)
 80016c2:	4a17      	ldr	r2, [pc, #92]	; (8001720 <MX_SPI4_Init+0x64>)
 80016c4:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_SLAVE;
 80016c6:	4b15      	ldr	r3, [pc, #84]	; (800171c <MX_SPI4_Init+0x60>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_1LINE;
 80016cc:	4b13      	ldr	r3, [pc, #76]	; (800171c <MX_SPI4_Init+0x60>)
 80016ce:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80016d2:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80016d4:	4b11      	ldr	r3, [pc, #68]	; (800171c <MX_SPI4_Init+0x60>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016da:	4b10      	ldr	r3, [pc, #64]	; (800171c <MX_SPI4_Init+0x60>)
 80016dc:	2200      	movs	r2, #0
 80016de:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016e0:	4b0e      	ldr	r3, [pc, #56]	; (800171c <MX_SPI4_Init+0x60>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80016e6:	4b0d      	ldr	r3, [pc, #52]	; (800171c <MX_SPI4_Init+0x60>)
 80016e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016ec:	619a      	str	r2, [r3, #24]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016ee:	4b0b      	ldr	r3, [pc, #44]	; (800171c <MX_SPI4_Init+0x60>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80016f4:	4b09      	ldr	r3, [pc, #36]	; (800171c <MX_SPI4_Init+0x60>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016fa:	4b08      	ldr	r3, [pc, #32]	; (800171c <MX_SPI4_Init+0x60>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8001700:	4b06      	ldr	r3, [pc, #24]	; (800171c <MX_SPI4_Init+0x60>)
 8001702:	220a      	movs	r2, #10
 8001704:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001706:	4805      	ldr	r0, [pc, #20]	; (800171c <MX_SPI4_Init+0x60>)
 8001708:	f002 fc58 	bl	8003fbc <HAL_SPI_Init>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <MX_SPI4_Init+0x5a>
  {
    Error_Handler();
 8001712:	f000 fb6d 	bl	8001df0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001716:	bf00      	nop
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	20002f14 	.word	0x20002f14
 8001720:	40013400 	.word	0x40013400

08001724 <MX_SPI6_Init>:
  * @brief SPI6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI6_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI6_Init 1 */

  /* USER CODE END SPI6_Init 1 */
  /* SPI6 parameter configuration*/
  hspi6.Instance = SPI6;
 8001728:	4b16      	ldr	r3, [pc, #88]	; (8001784 <MX_SPI6_Init+0x60>)
 800172a:	4a17      	ldr	r2, [pc, #92]	; (8001788 <MX_SPI6_Init+0x64>)
 800172c:	601a      	str	r2, [r3, #0]
  hspi6.Init.Mode = SPI_MODE_SLAVE;
 800172e:	4b15      	ldr	r3, [pc, #84]	; (8001784 <MX_SPI6_Init+0x60>)
 8001730:	2200      	movs	r2, #0
 8001732:	605a      	str	r2, [r3, #4]
  hspi6.Init.Direction = SPI_DIRECTION_1LINE;
 8001734:	4b13      	ldr	r3, [pc, #76]	; (8001784 <MX_SPI6_Init+0x60>)
 8001736:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800173a:	609a      	str	r2, [r3, #8]
  hspi6.Init.DataSize = SPI_DATASIZE_8BIT;
 800173c:	4b11      	ldr	r3, [pc, #68]	; (8001784 <MX_SPI6_Init+0x60>)
 800173e:	2200      	movs	r2, #0
 8001740:	60da      	str	r2, [r3, #12]
  hspi6.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001742:	4b10      	ldr	r3, [pc, #64]	; (8001784 <MX_SPI6_Init+0x60>)
 8001744:	2200      	movs	r2, #0
 8001746:	611a      	str	r2, [r3, #16]
  hspi6.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001748:	4b0e      	ldr	r3, [pc, #56]	; (8001784 <MX_SPI6_Init+0x60>)
 800174a:	2200      	movs	r2, #0
 800174c:	615a      	str	r2, [r3, #20]
  hspi6.Init.NSS = SPI_NSS_SOFT;
 800174e:	4b0d      	ldr	r3, [pc, #52]	; (8001784 <MX_SPI6_Init+0x60>)
 8001750:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001754:	619a      	str	r2, [r3, #24]
  hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001756:	4b0b      	ldr	r3, [pc, #44]	; (8001784 <MX_SPI6_Init+0x60>)
 8001758:	2200      	movs	r2, #0
 800175a:	621a      	str	r2, [r3, #32]
  hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
 800175c:	4b09      	ldr	r3, [pc, #36]	; (8001784 <MX_SPI6_Init+0x60>)
 800175e:	2200      	movs	r2, #0
 8001760:	625a      	str	r2, [r3, #36]	; 0x24
  hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001762:	4b08      	ldr	r3, [pc, #32]	; (8001784 <MX_SPI6_Init+0x60>)
 8001764:	2200      	movs	r2, #0
 8001766:	629a      	str	r2, [r3, #40]	; 0x28
  hspi6.Init.CRCPolynomial = 10;
 8001768:	4b06      	ldr	r3, [pc, #24]	; (8001784 <MX_SPI6_Init+0x60>)
 800176a:	220a      	movs	r2, #10
 800176c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi6) != HAL_OK)
 800176e:	4805      	ldr	r0, [pc, #20]	; (8001784 <MX_SPI6_Init+0x60>)
 8001770:	f002 fc24 	bl	8003fbc <HAL_SPI_Init>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <MX_SPI6_Init+0x5a>
  {
    Error_Handler();
 800177a:	f000 fb39 	bl	8001df0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI6_Init 2 */

  /* USER CODE END SPI6_Init 2 */

}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	20001be4 	.word	0x20001be4
 8001788:	40015400 	.word	0x40015400

0800178c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001790:	4b11      	ldr	r3, [pc, #68]	; (80017d8 <MX_USART1_UART_Init+0x4c>)
 8001792:	4a12      	ldr	r2, [pc, #72]	; (80017dc <MX_USART1_UART_Init+0x50>)
 8001794:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001796:	4b10      	ldr	r3, [pc, #64]	; (80017d8 <MX_USART1_UART_Init+0x4c>)
 8001798:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800179c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800179e:	4b0e      	ldr	r3, [pc, #56]	; (80017d8 <MX_USART1_UART_Init+0x4c>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80017a4:	4b0c      	ldr	r3, [pc, #48]	; (80017d8 <MX_USART1_UART_Init+0x4c>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80017aa:	4b0b      	ldr	r3, [pc, #44]	; (80017d8 <MX_USART1_UART_Init+0x4c>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80017b0:	4b09      	ldr	r3, [pc, #36]	; (80017d8 <MX_USART1_UART_Init+0x4c>)
 80017b2:	220c      	movs	r2, #12
 80017b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017b6:	4b08      	ldr	r3, [pc, #32]	; (80017d8 <MX_USART1_UART_Init+0x4c>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017bc:	4b06      	ldr	r3, [pc, #24]	; (80017d8 <MX_USART1_UART_Init+0x4c>)
 80017be:	2200      	movs	r2, #0
 80017c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017c2:	4805      	ldr	r0, [pc, #20]	; (80017d8 <MX_USART1_UART_Init+0x4c>)
 80017c4:	f003 fdb2 	bl	800532c <HAL_UART_Init>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80017ce:	f000 fb0f 	bl	8001df0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80017d2:	bf00      	nop
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	20002a50 	.word	0x20002a50
 80017dc:	40011000 	.word	0x40011000

080017e0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80017e4:	4b11      	ldr	r3, [pc, #68]	; (800182c <MX_USART3_UART_Init+0x4c>)
 80017e6:	4a12      	ldr	r2, [pc, #72]	; (8001830 <MX_USART3_UART_Init+0x50>)
 80017e8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80017ea:	4b10      	ldr	r3, [pc, #64]	; (800182c <MX_USART3_UART_Init+0x4c>)
 80017ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017f0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80017f2:	4b0e      	ldr	r3, [pc, #56]	; (800182c <MX_USART3_UART_Init+0x4c>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80017f8:	4b0c      	ldr	r3, [pc, #48]	; (800182c <MX_USART3_UART_Init+0x4c>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80017fe:	4b0b      	ldr	r3, [pc, #44]	; (800182c <MX_USART3_UART_Init+0x4c>)
 8001800:	2200      	movs	r2, #0
 8001802:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001804:	4b09      	ldr	r3, [pc, #36]	; (800182c <MX_USART3_UART_Init+0x4c>)
 8001806:	220c      	movs	r2, #12
 8001808:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800180a:	4b08      	ldr	r3, [pc, #32]	; (800182c <MX_USART3_UART_Init+0x4c>)
 800180c:	2200      	movs	r2, #0
 800180e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001810:	4b06      	ldr	r3, [pc, #24]	; (800182c <MX_USART3_UART_Init+0x4c>)
 8001812:	2200      	movs	r2, #0
 8001814:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001816:	4805      	ldr	r0, [pc, #20]	; (800182c <MX_USART3_UART_Init+0x4c>)
 8001818:	f003 fd88 	bl	800532c <HAL_UART_Init>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001822:	f000 fae5 	bl	8001df0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001826:	bf00      	nop
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	20000d0c 	.word	0x20000d0c
 8001830:	40004800 	.word	0x40004800

08001834 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800183a:	2300      	movs	r3, #0
 800183c:	607b      	str	r3, [r7, #4]
 800183e:	4b18      	ldr	r3, [pc, #96]	; (80018a0 <MX_DMA_Init+0x6c>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001842:	4a17      	ldr	r2, [pc, #92]	; (80018a0 <MX_DMA_Init+0x6c>)
 8001844:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001848:	6313      	str	r3, [r2, #48]	; 0x30
 800184a:	4b15      	ldr	r3, [pc, #84]	; (80018a0 <MX_DMA_Init+0x6c>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001852:	607b      	str	r3, [r7, #4]
 8001854:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001856:	2200      	movs	r2, #0
 8001858:	2100      	movs	r1, #0
 800185a:	2038      	movs	r0, #56	; 0x38
 800185c:	f000 ff9b 	bl	8002796 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001860:	2038      	movs	r0, #56	; 0x38
 8001862:	f000 ffb4 	bl	80027ce <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001866:	2200      	movs	r2, #0
 8001868:	2100      	movs	r1, #0
 800186a:	203a      	movs	r0, #58	; 0x3a
 800186c:	f000 ff93 	bl	8002796 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001870:	203a      	movs	r0, #58	; 0x3a
 8001872:	f000 ffac 	bl	80027ce <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001876:	2200      	movs	r2, #0
 8001878:	2100      	movs	r1, #0
 800187a:	203b      	movs	r0, #59	; 0x3b
 800187c:	f000 ff8b 	bl	8002796 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001880:	203b      	movs	r0, #59	; 0x3b
 8001882:	f000 ffa4 	bl	80027ce <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8001886:	2200      	movs	r2, #0
 8001888:	2100      	movs	r1, #0
 800188a:	2045      	movs	r0, #69	; 0x45
 800188c:	f000 ff83 	bl	8002796 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001890:	2045      	movs	r0, #69	; 0x45
 8001892:	f000 ff9c 	bl	80027ce <HAL_NVIC_EnableIRQ>

}
 8001896:	bf00      	nop
 8001898:	3708      	adds	r7, #8
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	40023800 	.word	0x40023800

080018a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b08e      	sub	sp, #56	; 0x38
 80018a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018ae:	2200      	movs	r2, #0
 80018b0:	601a      	str	r2, [r3, #0]
 80018b2:	605a      	str	r2, [r3, #4]
 80018b4:	609a      	str	r2, [r3, #8]
 80018b6:	60da      	str	r2, [r3, #12]
 80018b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80018ba:	2300      	movs	r3, #0
 80018bc:	623b      	str	r3, [r7, #32]
 80018be:	4ba1      	ldr	r3, [pc, #644]	; (8001b44 <MX_GPIO_Init+0x2a0>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c2:	4aa0      	ldr	r2, [pc, #640]	; (8001b44 <MX_GPIO_Init+0x2a0>)
 80018c4:	f043 0310 	orr.w	r3, r3, #16
 80018c8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ca:	4b9e      	ldr	r3, [pc, #632]	; (8001b44 <MX_GPIO_Init+0x2a0>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ce:	f003 0310 	and.w	r3, r3, #16
 80018d2:	623b      	str	r3, [r7, #32]
 80018d4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018d6:	2300      	movs	r3, #0
 80018d8:	61fb      	str	r3, [r7, #28]
 80018da:	4b9a      	ldr	r3, [pc, #616]	; (8001b44 <MX_GPIO_Init+0x2a0>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018de:	4a99      	ldr	r2, [pc, #612]	; (8001b44 <MX_GPIO_Init+0x2a0>)
 80018e0:	f043 0304 	orr.w	r3, r3, #4
 80018e4:	6313      	str	r3, [r2, #48]	; 0x30
 80018e6:	4b97      	ldr	r3, [pc, #604]	; (8001b44 <MX_GPIO_Init+0x2a0>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ea:	f003 0304 	and.w	r3, r3, #4
 80018ee:	61fb      	str	r3, [r7, #28]
 80018f0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80018f2:	2300      	movs	r3, #0
 80018f4:	61bb      	str	r3, [r7, #24]
 80018f6:	4b93      	ldr	r3, [pc, #588]	; (8001b44 <MX_GPIO_Init+0x2a0>)
 80018f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fa:	4a92      	ldr	r2, [pc, #584]	; (8001b44 <MX_GPIO_Init+0x2a0>)
 80018fc:	f043 0320 	orr.w	r3, r3, #32
 8001900:	6313      	str	r3, [r2, #48]	; 0x30
 8001902:	4b90      	ldr	r3, [pc, #576]	; (8001b44 <MX_GPIO_Init+0x2a0>)
 8001904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001906:	f003 0320 	and.w	r3, r3, #32
 800190a:	61bb      	str	r3, [r7, #24]
 800190c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800190e:	2300      	movs	r3, #0
 8001910:	617b      	str	r3, [r7, #20]
 8001912:	4b8c      	ldr	r3, [pc, #560]	; (8001b44 <MX_GPIO_Init+0x2a0>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001916:	4a8b      	ldr	r2, [pc, #556]	; (8001b44 <MX_GPIO_Init+0x2a0>)
 8001918:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800191c:	6313      	str	r3, [r2, #48]	; 0x30
 800191e:	4b89      	ldr	r3, [pc, #548]	; (8001b44 <MX_GPIO_Init+0x2a0>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001922:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001926:	617b      	str	r3, [r7, #20]
 8001928:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800192a:	2300      	movs	r3, #0
 800192c:	613b      	str	r3, [r7, #16]
 800192e:	4b85      	ldr	r3, [pc, #532]	; (8001b44 <MX_GPIO_Init+0x2a0>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001932:	4a84      	ldr	r2, [pc, #528]	; (8001b44 <MX_GPIO_Init+0x2a0>)
 8001934:	f043 0301 	orr.w	r3, r3, #1
 8001938:	6313      	str	r3, [r2, #48]	; 0x30
 800193a:	4b82      	ldr	r3, [pc, #520]	; (8001b44 <MX_GPIO_Init+0x2a0>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193e:	f003 0301 	and.w	r3, r3, #1
 8001942:	613b      	str	r3, [r7, #16]
 8001944:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001946:	2300      	movs	r3, #0
 8001948:	60fb      	str	r3, [r7, #12]
 800194a:	4b7e      	ldr	r3, [pc, #504]	; (8001b44 <MX_GPIO_Init+0x2a0>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194e:	4a7d      	ldr	r2, [pc, #500]	; (8001b44 <MX_GPIO_Init+0x2a0>)
 8001950:	f043 0302 	orr.w	r3, r3, #2
 8001954:	6313      	str	r3, [r2, #48]	; 0x30
 8001956:	4b7b      	ldr	r3, [pc, #492]	; (8001b44 <MX_GPIO_Init+0x2a0>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195a:	f003 0302 	and.w	r3, r3, #2
 800195e:	60fb      	str	r3, [r7, #12]
 8001960:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001962:	2300      	movs	r3, #0
 8001964:	60bb      	str	r3, [r7, #8]
 8001966:	4b77      	ldr	r3, [pc, #476]	; (8001b44 <MX_GPIO_Init+0x2a0>)
 8001968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196a:	4a76      	ldr	r2, [pc, #472]	; (8001b44 <MX_GPIO_Init+0x2a0>)
 800196c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001970:	6313      	str	r3, [r2, #48]	; 0x30
 8001972:	4b74      	ldr	r3, [pc, #464]	; (8001b44 <MX_GPIO_Init+0x2a0>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800197a:	60bb      	str	r3, [r7, #8]
 800197c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800197e:	2300      	movs	r3, #0
 8001980:	607b      	str	r3, [r7, #4]
 8001982:	4b70      	ldr	r3, [pc, #448]	; (8001b44 <MX_GPIO_Init+0x2a0>)
 8001984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001986:	4a6f      	ldr	r2, [pc, #444]	; (8001b44 <MX_GPIO_Init+0x2a0>)
 8001988:	f043 0308 	orr.w	r3, r3, #8
 800198c:	6313      	str	r3, [r2, #48]	; 0x30
 800198e:	4b6d      	ldr	r3, [pc, #436]	; (8001b44 <MX_GPIO_Init+0x2a0>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001992:	f003 0308 	and.w	r3, r3, #8
 8001996:	607b      	str	r3, [r7, #4]
 8001998:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ACCP_Pin|ACCN_Pin|CFB1_Pin|CFB2_Pin
 800199a:	2200      	movs	r2, #0
 800199c:	f640 11ff 	movw	r1, #2559	; 0x9ff
 80019a0:	4869      	ldr	r0, [pc, #420]	; (8001b48 <MX_GPIO_Init+0x2a4>)
 80019a2:	f001 fc6d 	bl	8003280 <HAL_GPIO_WritePin>
                          |CINJN_Pin|GPIO_PIN_7|CINJP_Pin|CS2_Pin
                          |VREF_Pin|CTV_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, TX0_Pin|TX1_Pin|TX2_Pin|TX3_Pin
 80019a6:	2200      	movs	r2, #0
 80019a8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80019ac:	4867      	ldr	r0, [pc, #412]	; (8001b4c <MX_GPIO_Init+0x2a8>)
 80019ae:	f001 fc67 	bl	8003280 <HAL_GPIO_WritePin>
                          |TX4_Pin|TX5_Pin|TX6_Pin|TX7_Pin
                          |TX8_Pin|TX9_Pin|TX10_Pin|TX11_Pin
                          |TX12_Pin|TX13_Pin|TX14_Pin|TX15_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MSTR_Pin|CS1_Pin, GPIO_PIN_RESET);
 80019b2:	2200      	movs	r2, #0
 80019b4:	2112      	movs	r1, #18
 80019b6:	4866      	ldr	r0, [pc, #408]	; (8001b50 <MX_GPIO_Init+0x2ac>)
 80019b8:	f001 fc62 	bl	8003280 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RSV1_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 80019bc:	2200      	movs	r2, #0
 80019be:	f44f 6110 	mov.w	r1, #2304	; 0x900
 80019c2:	4864      	ldr	r0, [pc, #400]	; (8001b54 <MX_GPIO_Init+0x2b0>)
 80019c4:	f001 fc5c 	bl	8003280 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED_Pin|CS3_Pin, GPIO_PIN_RESET);
 80019c8:	2200      	movs	r2, #0
 80019ca:	f44f 7190 	mov.w	r1, #288	; 0x120
 80019ce:	4862      	ldr	r0, [pc, #392]	; (8001b58 <MX_GPIO_Init+0x2b4>)
 80019d0:	f001 fc56 	bl	8003280 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ACCP_Pin ACCN_Pin CFB1_Pin CFB2_Pin
                           CINJN_Pin PE7 CINJP_Pin CS2_Pin
                           VREF_Pin CTV_Pin */
  GPIO_InitStruct.Pin = ACCP_Pin|ACCN_Pin|CFB1_Pin|CFB2_Pin
 80019d4:	f640 13ff 	movw	r3, #2559	; 0x9ff
 80019d8:	627b      	str	r3, [r7, #36]	; 0x24
                          |CINJN_Pin|GPIO_PIN_7|CINJP_Pin|CS2_Pin
                          |VREF_Pin|CTV_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019da:	2301      	movs	r3, #1
 80019dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80019de:	2302      	movs	r3, #2
 80019e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019e2:	2303      	movs	r3, #3
 80019e4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019ea:	4619      	mov	r1, r3
 80019ec:	4856      	ldr	r0, [pc, #344]	; (8001b48 <MX_GPIO_Init+0x2a4>)
 80019ee:	f001 fa9b 	bl	8002f28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC2 PC3 PC4
                           PC5 PC6 PC7 PC8
                           PC9 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 80019f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019f6:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019f8:	2303      	movs	r3, #3
 80019fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fc:	2300      	movs	r3, #0
 80019fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a04:	4619      	mov	r1, r3
 8001a06:	4855      	ldr	r0, [pc, #340]	; (8001b5c <MX_GPIO_Init+0x2b8>)
 8001a08:	f001 fa8e 	bl	8002f28 <HAL_GPIO_Init>

  /*Configure GPIO pins : TX0_Pin TX1_Pin TX2_Pin TX3_Pin
                           TX4_Pin TX5_Pin TX6_Pin TX7_Pin
                           TX8_Pin TX9_Pin TX10_Pin TX11_Pin
                           TX12_Pin TX13_Pin TX14_Pin TX15_Pin */
  GPIO_InitStruct.Pin = TX0_Pin|TX1_Pin|TX2_Pin|TX3_Pin
 8001a0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a10:	627b      	str	r3, [r7, #36]	; 0x24
                          |TX4_Pin|TX5_Pin|TX6_Pin|TX7_Pin
                          |TX8_Pin|TX9_Pin|TX10_Pin|TX11_Pin
                          |TX12_Pin|TX13_Pin|TX14_Pin|TX15_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a12:	2301      	movs	r3, #1
 8001a14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a16:	2302      	movs	r3, #2
 8001a18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a22:	4619      	mov	r1, r3
 8001a24:	4849      	ldr	r0, [pc, #292]	; (8001b4c <MX_GPIO_Init+0x2a8>)
 8001a26:	f001 fa7f 	bl	8002f28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA2 PA3 PA7
                           PA8 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_7
 8001a2a:	f649 138d 	movw	r3, #39309	; 0x998d
 8001a2e:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a30:	2303      	movs	r3, #3
 8001a32:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a34:	2300      	movs	r3, #0
 8001a36:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	4844      	ldr	r0, [pc, #272]	; (8001b50 <MX_GPIO_Init+0x2ac>)
 8001a40:	f001 fa72 	bl	8002f28 <HAL_GPIO_Init>

  /*Configure GPIO pins : MSTR_Pin CS1_Pin */
  GPIO_InitStruct.Pin = MSTR_Pin|CS1_Pin;
 8001a44:	2312      	movs	r3, #18
 8001a46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a50:	2303      	movs	r3, #3
 8001a52:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a58:	4619      	mov	r1, r3
 8001a5a:	483d      	ldr	r0, [pc, #244]	; (8001b50 <MX_GPIO_Init+0x2ac>)
 8001a5c:	f001 fa64 	bl	8002f28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB3 PB4 PB5 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8001a60:	f240 633f 	movw	r3, #1599	; 0x63f
 8001a64:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a66:	2303      	movs	r3, #3
 8001a68:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a72:	4619      	mov	r1, r3
 8001a74:	4837      	ldr	r0, [pc, #220]	; (8001b54 <MX_GPIO_Init+0x2b0>)
 8001a76:	f001 fa57 	bl	8002f28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG2 PG3 PG4
                           PG6 PG7 PG9 PG10
                           PG11 PG14 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8001a7a:	f64c 63dd 	movw	r3, #52957	; 0xcedd
 8001a7e:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a80:	2303      	movs	r3, #3
 8001a82:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a84:	2300      	movs	r3, #0
 8001a86:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	4832      	ldr	r0, [pc, #200]	; (8001b58 <MX_GPIO_Init+0x2b4>)
 8001a90:	f001 fa4a 	bl	8002f28 <HAL_GPIO_Init>

  /*Configure GPIO pin : SWRUN_Pin */
  GPIO_InitStruct.Pin = SWRUN_Pin;
 8001a94:	2302      	movs	r3, #2
 8001a96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SWRUN_GPIO_Port, &GPIO_InitStruct);
 8001aa0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	482c      	ldr	r0, [pc, #176]	; (8001b58 <MX_GPIO_Init+0x2b4>)
 8001aa8:	f001 fa3e 	bl	8002f28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE9 PE10 PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8001aac:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8001ab0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001aba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001abe:	4619      	mov	r1, r3
 8001ac0:	4821      	ldr	r0, [pc, #132]	; (8001b48 <MX_GPIO_Init+0x2a4>)
 8001ac2:	f001 fa31 	bl	8002f28 <HAL_GPIO_Init>

  /*Configure GPIO pin : RSV1_Pin */
  GPIO_InitStruct.Pin = RSV1_Pin;
 8001ac6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001aca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001acc:	2301      	movs	r3, #1
 8001ace:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(RSV1_GPIO_Port, &GPIO_InitStruct);
 8001ad8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001adc:	4619      	mov	r1, r3
 8001ade:	481d      	ldr	r0, [pc, #116]	; (8001b54 <MX_GPIO_Init+0x2b0>)
 8001ae0:	f001 fa22 	bl	8002f28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD11 PD12 PD13
                           PD14 PD15 PD0 PD1
                           PD2 PD3 PD4 PD5
                           PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8001ae4:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 8001ae8:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001aea:	2303      	movs	r3, #3
 8001aec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aee:	2300      	movs	r3, #0
 8001af0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001af2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001af6:	4619      	mov	r1, r3
 8001af8:	4819      	ldr	r0, [pc, #100]	; (8001b60 <MX_GPIO_Init+0x2bc>)
 8001afa:	f001 fa15 	bl	8002f28 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Pin CS3_Pin */
  GPIO_InitStruct.Pin = LED_Pin|CS3_Pin;
 8001afe:	f44f 7390 	mov.w	r3, #288	; 0x120
 8001b02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b04:	2301      	movs	r3, #1
 8001b06:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001b08:	2302      	movs	r3, #2
 8001b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b14:	4619      	mov	r1, r3
 8001b16:	4810      	ldr	r0, [pc, #64]	; (8001b58 <MX_GPIO_Init+0x2b4>)
 8001b18:	f001 fa06 	bl	8002f28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001b1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b22:	2301      	movs	r3, #1
 8001b24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b26:	2301      	movs	r3, #1
 8001b28:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b32:	4619      	mov	r1, r3
 8001b34:	4807      	ldr	r0, [pc, #28]	; (8001b54 <MX_GPIO_Init+0x2b0>)
 8001b36:	f001 f9f7 	bl	8002f28 <HAL_GPIO_Init>

}
 8001b3a:	bf00      	nop
 8001b3c:	3738      	adds	r7, #56	; 0x38
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	40023800 	.word	0x40023800
 8001b48:	40021000 	.word	0x40021000
 8001b4c:	40021400 	.word	0x40021400
 8001b50:	40020000 	.word	0x40020000
 8001b54:	40020400 	.word	0x40020400
 8001b58:	40021800 	.word	0x40021800
 8001b5c:	40020800 	.word	0x40020800
 8001b60:	40020c00 	.word	0x40020c00

08001b64 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
	run_f = Rx_UART[1] - 48;
 8001b6c:	4b20      	ldr	r3, [pc, #128]	; (8001bf0 <HAL_UART_RxCpltCallback+0x8c>)
 8001b6e:	785b      	ldrb	r3, [r3, #1]
 8001b70:	3b30      	subs	r3, #48	; 0x30
 8001b72:	b2da      	uxtb	r2, r3
 8001b74:	4b1f      	ldr	r3, [pc, #124]	; (8001bf4 <HAL_UART_RxCpltCallback+0x90>)
 8001b76:	701a      	strb	r2, [r3, #0]
	Vref_f = Rx_UART[2] - 48;
 8001b78:	4b1d      	ldr	r3, [pc, #116]	; (8001bf0 <HAL_UART_RxCpltCallback+0x8c>)
 8001b7a:	789b      	ldrb	r3, [r3, #2]
 8001b7c:	3b30      	subs	r3, #48	; 0x30
 8001b7e:	b2da      	uxtb	r2, r3
 8001b80:	4b1d      	ldr	r3, [pc, #116]	; (8001bf8 <HAL_UART_RxCpltCallback+0x94>)
 8001b82:	701a      	strb	r2, [r3, #0]
	Freq_f = Rx_UART[3] - 48;
 8001b84:	4b1a      	ldr	r3, [pc, #104]	; (8001bf0 <HAL_UART_RxCpltCallback+0x8c>)
 8001b86:	78db      	ldrb	r3, [r3, #3]
 8001b88:	3b30      	subs	r3, #48	; 0x30
 8001b8a:	b2da      	uxtb	r2, r3
 8001b8c:	4b1b      	ldr	r3, [pc, #108]	; (8001bfc <HAL_UART_RxCpltCallback+0x98>)
 8001b8e:	701a      	strb	r2, [r3, #0]
	Baseline_f = Rx_UART[4] - 48;
 8001b90:	4b17      	ldr	r3, [pc, #92]	; (8001bf0 <HAL_UART_RxCpltCallback+0x8c>)
 8001b92:	791b      	ldrb	r3, [r3, #4]
 8001b94:	3b30      	subs	r3, #48	; 0x30
 8001b96:	b2da      	uxtb	r2, r3
 8001b98:	4b19      	ldr	r3, [pc, #100]	; (8001c00 <HAL_UART_RxCpltCallback+0x9c>)
 8001b9a:	701a      	strb	r2, [r3, #0]
	nTx_f = Rx_UART[5] - 48;
 8001b9c:	4b14      	ldr	r3, [pc, #80]	; (8001bf0 <HAL_UART_RxCpltCallback+0x8c>)
 8001b9e:	795b      	ldrb	r3, [r3, #5]
 8001ba0:	3b30      	subs	r3, #48	; 0x30
 8001ba2:	b2da      	uxtb	r2, r3
 8001ba4:	4b17      	ldr	r3, [pc, #92]	; (8001c04 <HAL_UART_RxCpltCallback+0xa0>)
 8001ba6:	701a      	strb	r2, [r3, #0]
	numAcc_f = Rx_UART[6] - 48;
 8001ba8:	4b11      	ldr	r3, [pc, #68]	; (8001bf0 <HAL_UART_RxCpltCallback+0x8c>)
 8001baa:	799b      	ldrb	r3, [r3, #6]
 8001bac:	3b30      	subs	r3, #48	; 0x30
 8001bae:	b2da      	uxtb	r2, r3
 8001bb0:	4b15      	ldr	r3, [pc, #84]	; (8001c08 <HAL_UART_RxCpltCallback+0xa4>)
 8001bb2:	701a      	strb	r2, [r3, #0]
	dest_USART = Rx_UART[7] - 48;
 8001bb4:	4b0e      	ldr	r3, [pc, #56]	; (8001bf0 <HAL_UART_RxCpltCallback+0x8c>)
 8001bb6:	79db      	ldrb	r3, [r3, #7]
 8001bb8:	3b30      	subs	r3, #48	; 0x30
 8001bba:	b2da      	uxtb	r2, r3
 8001bbc:	4b13      	ldr	r3, [pc, #76]	; (8001c0c <HAL_UART_RxCpltCallback+0xa8>)
 8001bbe:	701a      	strb	r2, [r3, #0]
	dest_SPI = Rx_UART[8] - 48;
 8001bc0:	4b0b      	ldr	r3, [pc, #44]	; (8001bf0 <HAL_UART_RxCpltCallback+0x8c>)
 8001bc2:	7a1b      	ldrb	r3, [r3, #8]
 8001bc4:	3b30      	subs	r3, #48	; 0x30
 8001bc6:	b2da      	uxtb	r2, r3
 8001bc8:	4b11      	ldr	r3, [pc, #68]	; (8001c10 <HAL_UART_RxCpltCallback+0xac>)
 8001bca:	701a      	strb	r2, [r3, #0]
	dest_I2C = Rx_UART[9] - 48;
 8001bcc:	4b08      	ldr	r3, [pc, #32]	; (8001bf0 <HAL_UART_RxCpltCallback+0x8c>)
 8001bce:	7a5b      	ldrb	r3, [r3, #9]
 8001bd0:	3b30      	subs	r3, #48	; 0x30
 8001bd2:	b2da      	uxtb	r2, r3
 8001bd4:	4b0f      	ldr	r3, [pc, #60]	; (8001c14 <HAL_UART_RxCpltCallback+0xb0>)
 8001bd6:	701a      	strb	r2, [r3, #0]

	//New Init
//	spi1_f = 0;
//	spi3_f = 0;
	Flush_Buffer((uint8_t *)pData1, 24);
 8001bd8:	2118      	movs	r1, #24
 8001bda:	480f      	ldr	r0, [pc, #60]	; (8001c18 <HAL_UART_RxCpltCallback+0xb4>)
 8001bdc:	f7fe fcd4 	bl	8000588 <Flush_Buffer>
	Flush_Buffer((uint8_t *)pData, 24);
 8001be0:	2118      	movs	r1, #24
 8001be2:	480e      	ldr	r0, [pc, #56]	; (8001c1c <HAL_UART_RxCpltCallback+0xb8>)
 8001be4:	f7fe fcd0 	bl	8000588 <Flush_Buffer>


//	if(Baseline_f == 1 && Freq_f != prev_Freq)	  Collect_Baseline();
//	prev_Freq = Freq_f;

}
 8001be8:	bf00      	nop
 8001bea:	3708      	adds	r7, #8
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	20000798 	.word	0x20000798
 8001bf4:	2000077c 	.word	0x2000077c
 8001bf8:	2000077d 	.word	0x2000077d
 8001bfc:	2000077e 	.word	0x2000077e
 8001c00:	2000077f 	.word	0x2000077f
 8001c04:	20000000 	.word	0x20000000
 8001c08:	20000001 	.word	0x20000001
 8001c0c:	20000781 	.word	0x20000781
 8001c10:	20000782 	.word	0x20000782
 8001c14:	20000783 	.word	0x20000783
 8001c18:	20000cdc 	.word	0x20000cdc
 8001c1c:	200016c8 	.word	0x200016c8

08001c20 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef * hspi)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
	if(hspi->Instance == SPI2)	spi2t_f = 1;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a05      	ldr	r2, [pc, #20]	; (8001c44 <HAL_SPI_TxCpltCallback+0x24>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d102      	bne.n	8001c38 <HAL_SPI_TxCpltCallback+0x18>
 8001c32:	4b05      	ldr	r3, [pc, #20]	; (8001c48 <HAL_SPI_TxCpltCallback+0x28>)
 8001c34:	2201      	movs	r2, #1
 8001c36:	701a      	strb	r2, [r3, #0]
}
 8001c38:	bf00      	nop
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr
 8001c44:	40003800 	.word	0x40003800
 8001c48:	20000788 	.word	0x20000788

08001c4c <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef * hspi)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
    if(hspi->Instance == SPI1)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a59      	ldr	r2, [pc, #356]	; (8001dc0 <HAL_SPI_RxCpltCallback+0x174>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d132      	bne.n	8001cc4 <HAL_SPI_RxCpltCallback+0x78>
    {
    	temp_pData[0] = pData[0];
 8001c5e:	4b59      	ldr	r3, [pc, #356]	; (8001dc4 <HAL_SPI_RxCpltCallback+0x178>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a59      	ldr	r2, [pc, #356]	; (8001dc8 <HAL_SPI_RxCpltCallback+0x17c>)
 8001c64:	6013      	str	r3, [r2, #0]
    	temp_pData[1] = pData[1];
 8001c66:	4b57      	ldr	r3, [pc, #348]	; (8001dc4 <HAL_SPI_RxCpltCallback+0x178>)
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	4a57      	ldr	r2, [pc, #348]	; (8001dc8 <HAL_SPI_RxCpltCallback+0x17c>)
 8001c6c:	6053      	str	r3, [r2, #4]
    	temp_pData[2] = pData[2];
 8001c6e:	4b55      	ldr	r3, [pc, #340]	; (8001dc4 <HAL_SPI_RxCpltCallback+0x178>)
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	4a55      	ldr	r2, [pc, #340]	; (8001dc8 <HAL_SPI_RxCpltCallback+0x17c>)
 8001c74:	6093      	str	r3, [r2, #8]
    	temp_pData[3] = pData[3];
 8001c76:	4b53      	ldr	r3, [pc, #332]	; (8001dc4 <HAL_SPI_RxCpltCallback+0x178>)
 8001c78:	68db      	ldr	r3, [r3, #12]
 8001c7a:	4a53      	ldr	r2, [pc, #332]	; (8001dc8 <HAL_SPI_RxCpltCallback+0x17c>)
 8001c7c:	60d3      	str	r3, [r2, #12]
    	temp_pData[4] = pData[4];
 8001c7e:	4b51      	ldr	r3, [pc, #324]	; (8001dc4 <HAL_SPI_RxCpltCallback+0x178>)
 8001c80:	691b      	ldr	r3, [r3, #16]
 8001c82:	4a51      	ldr	r2, [pc, #324]	; (8001dc8 <HAL_SPI_RxCpltCallback+0x17c>)
 8001c84:	6113      	str	r3, [r2, #16]
    	temp_pData[5] = pData[5];
 8001c86:	4b4f      	ldr	r3, [pc, #316]	; (8001dc4 <HAL_SPI_RxCpltCallback+0x178>)
 8001c88:	695b      	ldr	r3, [r3, #20]
 8001c8a:	4a4f      	ldr	r2, [pc, #316]	; (8001dc8 <HAL_SPI_RxCpltCallback+0x17c>)
 8001c8c:	6153      	str	r3, [r2, #20]
    	temp_pData[6] = pData[6];
 8001c8e:	4b4d      	ldr	r3, [pc, #308]	; (8001dc4 <HAL_SPI_RxCpltCallback+0x178>)
 8001c90:	699b      	ldr	r3, [r3, #24]
 8001c92:	4a4d      	ldr	r2, [pc, #308]	; (8001dc8 <HAL_SPI_RxCpltCallback+0x17c>)
 8001c94:	6193      	str	r3, [r2, #24]
    	temp_pData[7] = pData[7];
 8001c96:	4b4b      	ldr	r3, [pc, #300]	; (8001dc4 <HAL_SPI_RxCpltCallback+0x178>)
 8001c98:	69db      	ldr	r3, [r3, #28]
 8001c9a:	4a4b      	ldr	r2, [pc, #300]	; (8001dc8 <HAL_SPI_RxCpltCallback+0x17c>)
 8001c9c:	61d3      	str	r3, [r2, #28]
    	temp_pData[8] = pData[8];
 8001c9e:	4b49      	ldr	r3, [pc, #292]	; (8001dc4 <HAL_SPI_RxCpltCallback+0x178>)
 8001ca0:	6a1b      	ldr	r3, [r3, #32]
 8001ca2:	4a49      	ldr	r2, [pc, #292]	; (8001dc8 <HAL_SPI_RxCpltCallback+0x17c>)
 8001ca4:	6213      	str	r3, [r2, #32]
    	temp_pData[9] = pData[9];
 8001ca6:	4b47      	ldr	r3, [pc, #284]	; (8001dc4 <HAL_SPI_RxCpltCallback+0x178>)
 8001ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001caa:	4a47      	ldr	r2, [pc, #284]	; (8001dc8 <HAL_SPI_RxCpltCallback+0x17c>)
 8001cac:	6253      	str	r3, [r2, #36]	; 0x24
    	temp_pData[10] = pData[10];
 8001cae:	4b45      	ldr	r3, [pc, #276]	; (8001dc4 <HAL_SPI_RxCpltCallback+0x178>)
 8001cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb2:	4a45      	ldr	r2, [pc, #276]	; (8001dc8 <HAL_SPI_RxCpltCallback+0x17c>)
 8001cb4:	6293      	str	r3, [r2, #40]	; 0x28
    	temp_pData[11] = pData[11];
 8001cb6:	4b43      	ldr	r3, [pc, #268]	; (8001dc4 <HAL_SPI_RxCpltCallback+0x178>)
 8001cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cba:	4a43      	ldr	r2, [pc, #268]	; (8001dc8 <HAL_SPI_RxCpltCallback+0x17c>)
 8001cbc:	62d3      	str	r3, [r2, #44]	; 0x2c
    	spi1_f = 1;
 8001cbe:	4b43      	ldr	r3, [pc, #268]	; (8001dcc <HAL_SPI_RxCpltCallback+0x180>)
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	701a      	strb	r2, [r3, #0]
    	//Flush_Buffer((uint8_t*)pData, sizeof(pData));

    }
    if(hspi->Instance == SPI4)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a41      	ldr	r2, [pc, #260]	; (8001dd0 <HAL_SPI_RxCpltCallback+0x184>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d132      	bne.n	8001d34 <HAL_SPI_RxCpltCallback+0xe8>
    {

    	temp_pData[0] = pData1[0];
 8001cce:	4b41      	ldr	r3, [pc, #260]	; (8001dd4 <HAL_SPI_RxCpltCallback+0x188>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a3d      	ldr	r2, [pc, #244]	; (8001dc8 <HAL_SPI_RxCpltCallback+0x17c>)
 8001cd4:	6013      	str	r3, [r2, #0]
    	temp_pData[1] = pData1[1];
 8001cd6:	4b3f      	ldr	r3, [pc, #252]	; (8001dd4 <HAL_SPI_RxCpltCallback+0x188>)
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	4a3b      	ldr	r2, [pc, #236]	; (8001dc8 <HAL_SPI_RxCpltCallback+0x17c>)
 8001cdc:	6053      	str	r3, [r2, #4]
    	temp_pData[2] = pData1[2];
 8001cde:	4b3d      	ldr	r3, [pc, #244]	; (8001dd4 <HAL_SPI_RxCpltCallback+0x188>)
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	4a39      	ldr	r2, [pc, #228]	; (8001dc8 <HAL_SPI_RxCpltCallback+0x17c>)
 8001ce4:	6093      	str	r3, [r2, #8]
    	temp_pData[3] = pData1[3];
 8001ce6:	4b3b      	ldr	r3, [pc, #236]	; (8001dd4 <HAL_SPI_RxCpltCallback+0x188>)
 8001ce8:	68db      	ldr	r3, [r3, #12]
 8001cea:	4a37      	ldr	r2, [pc, #220]	; (8001dc8 <HAL_SPI_RxCpltCallback+0x17c>)
 8001cec:	60d3      	str	r3, [r2, #12]
    	temp_pData[4] = pData1[4];
 8001cee:	4b39      	ldr	r3, [pc, #228]	; (8001dd4 <HAL_SPI_RxCpltCallback+0x188>)
 8001cf0:	691b      	ldr	r3, [r3, #16]
 8001cf2:	4a35      	ldr	r2, [pc, #212]	; (8001dc8 <HAL_SPI_RxCpltCallback+0x17c>)
 8001cf4:	6113      	str	r3, [r2, #16]
    	temp_pData[5] = pData1[5];
 8001cf6:	4b37      	ldr	r3, [pc, #220]	; (8001dd4 <HAL_SPI_RxCpltCallback+0x188>)
 8001cf8:	695b      	ldr	r3, [r3, #20]
 8001cfa:	4a33      	ldr	r2, [pc, #204]	; (8001dc8 <HAL_SPI_RxCpltCallback+0x17c>)
 8001cfc:	6153      	str	r3, [r2, #20]
    	temp_pData[6] = pData1[6];
 8001cfe:	4b35      	ldr	r3, [pc, #212]	; (8001dd4 <HAL_SPI_RxCpltCallback+0x188>)
 8001d00:	699b      	ldr	r3, [r3, #24]
 8001d02:	4a31      	ldr	r2, [pc, #196]	; (8001dc8 <HAL_SPI_RxCpltCallback+0x17c>)
 8001d04:	6193      	str	r3, [r2, #24]
    	temp_pData[7] = pData1[7];
 8001d06:	4b33      	ldr	r3, [pc, #204]	; (8001dd4 <HAL_SPI_RxCpltCallback+0x188>)
 8001d08:	69db      	ldr	r3, [r3, #28]
 8001d0a:	4a2f      	ldr	r2, [pc, #188]	; (8001dc8 <HAL_SPI_RxCpltCallback+0x17c>)
 8001d0c:	61d3      	str	r3, [r2, #28]
    	temp_pData[8] = pData1[8];
 8001d0e:	4b31      	ldr	r3, [pc, #196]	; (8001dd4 <HAL_SPI_RxCpltCallback+0x188>)
 8001d10:	6a1b      	ldr	r3, [r3, #32]
 8001d12:	4a2d      	ldr	r2, [pc, #180]	; (8001dc8 <HAL_SPI_RxCpltCallback+0x17c>)
 8001d14:	6213      	str	r3, [r2, #32]
    	temp_pData[9] = pData1[9];
 8001d16:	4b2f      	ldr	r3, [pc, #188]	; (8001dd4 <HAL_SPI_RxCpltCallback+0x188>)
 8001d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d1a:	4a2b      	ldr	r2, [pc, #172]	; (8001dc8 <HAL_SPI_RxCpltCallback+0x17c>)
 8001d1c:	6253      	str	r3, [r2, #36]	; 0x24
    	temp_pData[10] = pData1[10];
 8001d1e:	4b2d      	ldr	r3, [pc, #180]	; (8001dd4 <HAL_SPI_RxCpltCallback+0x188>)
 8001d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d22:	4a29      	ldr	r2, [pc, #164]	; (8001dc8 <HAL_SPI_RxCpltCallback+0x17c>)
 8001d24:	6293      	str	r3, [r2, #40]	; 0x28
    	temp_pData[11] = pData1[11];
 8001d26:	4b2b      	ldr	r3, [pc, #172]	; (8001dd4 <HAL_SPI_RxCpltCallback+0x188>)
 8001d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d2a:	4a27      	ldr	r2, [pc, #156]	; (8001dc8 <HAL_SPI_RxCpltCallback+0x17c>)
 8001d2c:	62d3      	str	r3, [r2, #44]	; 0x2c
    	spi4_f = 1;
 8001d2e:	4b2a      	ldr	r3, [pc, #168]	; (8001dd8 <HAL_SPI_RxCpltCallback+0x18c>)
 8001d30:	2201      	movs	r2, #1
 8001d32:	701a      	strb	r2, [r3, #0]
    }
    if(hspi->Instance == SPI6)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a28      	ldr	r2, [pc, #160]	; (8001ddc <HAL_SPI_RxCpltCallback+0x190>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d132      	bne.n	8001da4 <HAL_SPI_RxCpltCallback+0x158>
    {

    	temp_pData[0] = pData2[0];
 8001d3e:	4b28      	ldr	r3, [pc, #160]	; (8001de0 <HAL_SPI_RxCpltCallback+0x194>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a21      	ldr	r2, [pc, #132]	; (8001dc8 <HAL_SPI_RxCpltCallback+0x17c>)
 8001d44:	6013      	str	r3, [r2, #0]
    	temp_pData[1] = pData2[1];
 8001d46:	4b26      	ldr	r3, [pc, #152]	; (8001de0 <HAL_SPI_RxCpltCallback+0x194>)
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	4a1f      	ldr	r2, [pc, #124]	; (8001dc8 <HAL_SPI_RxCpltCallback+0x17c>)
 8001d4c:	6053      	str	r3, [r2, #4]
    	temp_pData[2] = pData2[2];
 8001d4e:	4b24      	ldr	r3, [pc, #144]	; (8001de0 <HAL_SPI_RxCpltCallback+0x194>)
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	4a1d      	ldr	r2, [pc, #116]	; (8001dc8 <HAL_SPI_RxCpltCallback+0x17c>)
 8001d54:	6093      	str	r3, [r2, #8]
    	temp_pData[3] = pData2[3];
 8001d56:	4b22      	ldr	r3, [pc, #136]	; (8001de0 <HAL_SPI_RxCpltCallback+0x194>)
 8001d58:	68db      	ldr	r3, [r3, #12]
 8001d5a:	4a1b      	ldr	r2, [pc, #108]	; (8001dc8 <HAL_SPI_RxCpltCallback+0x17c>)
 8001d5c:	60d3      	str	r3, [r2, #12]
    	temp_pData[4] = pData2[4];
 8001d5e:	4b20      	ldr	r3, [pc, #128]	; (8001de0 <HAL_SPI_RxCpltCallback+0x194>)
 8001d60:	691b      	ldr	r3, [r3, #16]
 8001d62:	4a19      	ldr	r2, [pc, #100]	; (8001dc8 <HAL_SPI_RxCpltCallback+0x17c>)
 8001d64:	6113      	str	r3, [r2, #16]
    	temp_pData[5] = pData2[5];
 8001d66:	4b1e      	ldr	r3, [pc, #120]	; (8001de0 <HAL_SPI_RxCpltCallback+0x194>)
 8001d68:	695b      	ldr	r3, [r3, #20]
 8001d6a:	4a17      	ldr	r2, [pc, #92]	; (8001dc8 <HAL_SPI_RxCpltCallback+0x17c>)
 8001d6c:	6153      	str	r3, [r2, #20]
    	temp_pData[6] = pData2[6];
 8001d6e:	4b1c      	ldr	r3, [pc, #112]	; (8001de0 <HAL_SPI_RxCpltCallback+0x194>)
 8001d70:	699b      	ldr	r3, [r3, #24]
 8001d72:	4a15      	ldr	r2, [pc, #84]	; (8001dc8 <HAL_SPI_RxCpltCallback+0x17c>)
 8001d74:	6193      	str	r3, [r2, #24]
    	temp_pData[7] = pData2[7];
 8001d76:	4b1a      	ldr	r3, [pc, #104]	; (8001de0 <HAL_SPI_RxCpltCallback+0x194>)
 8001d78:	69db      	ldr	r3, [r3, #28]
 8001d7a:	4a13      	ldr	r2, [pc, #76]	; (8001dc8 <HAL_SPI_RxCpltCallback+0x17c>)
 8001d7c:	61d3      	str	r3, [r2, #28]
    	temp_pData[8] = pData2[8];
 8001d7e:	4b18      	ldr	r3, [pc, #96]	; (8001de0 <HAL_SPI_RxCpltCallback+0x194>)
 8001d80:	6a1b      	ldr	r3, [r3, #32]
 8001d82:	4a11      	ldr	r2, [pc, #68]	; (8001dc8 <HAL_SPI_RxCpltCallback+0x17c>)
 8001d84:	6213      	str	r3, [r2, #32]
    	temp_pData[9] = pData2[9];
 8001d86:	4b16      	ldr	r3, [pc, #88]	; (8001de0 <HAL_SPI_RxCpltCallback+0x194>)
 8001d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d8a:	4a0f      	ldr	r2, [pc, #60]	; (8001dc8 <HAL_SPI_RxCpltCallback+0x17c>)
 8001d8c:	6253      	str	r3, [r2, #36]	; 0x24
    	temp_pData[10] = pData2[10];
 8001d8e:	4b14      	ldr	r3, [pc, #80]	; (8001de0 <HAL_SPI_RxCpltCallback+0x194>)
 8001d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d92:	4a0d      	ldr	r2, [pc, #52]	; (8001dc8 <HAL_SPI_RxCpltCallback+0x17c>)
 8001d94:	6293      	str	r3, [r2, #40]	; 0x28
    	temp_pData[11] = pData2[11];
 8001d96:	4b12      	ldr	r3, [pc, #72]	; (8001de0 <HAL_SPI_RxCpltCallback+0x194>)
 8001d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d9a:	4a0b      	ldr	r2, [pc, #44]	; (8001dc8 <HAL_SPI_RxCpltCallback+0x17c>)
 8001d9c:	62d3      	str	r3, [r2, #44]	; 0x2c
    	spi6_f = 1;
 8001d9e:	4b11      	ldr	r3, [pc, #68]	; (8001de4 <HAL_SPI_RxCpltCallback+0x198>)
 8001da0:	2201      	movs	r2, #1
 8001da2:	701a      	strb	r2, [r3, #0]
    }
    if(hspi->Instance == SPI2)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a0f      	ldr	r2, [pc, #60]	; (8001de8 <HAL_SPI_RxCpltCallback+0x19c>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d102      	bne.n	8001db4 <HAL_SPI_RxCpltCallback+0x168>
    {
    	spi2_f = 1;
 8001dae:	4b0f      	ldr	r3, [pc, #60]	; (8001dec <HAL_SPI_RxCpltCallback+0x1a0>)
 8001db0:	2201      	movs	r2, #1
 8001db2:	701a      	strb	r2, [r3, #0]
    }
}
 8001db4:	bf00      	nop
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr
 8001dc0:	40013000 	.word	0x40013000
 8001dc4:	200016c8 	.word	0x200016c8
 8001dc8:	2000253c 	.word	0x2000253c
 8001dcc:	20000784 	.word	0x20000784
 8001dd0:	40013400 	.word	0x40013400
 8001dd4:	20000cdc 	.word	0x20000cdc
 8001dd8:	20000785 	.word	0x20000785
 8001ddc:	40015400 	.word	0x40015400
 8001de0:	20003684 	.word	0x20003684
 8001de4:	20000786 	.word	0x20000786
 8001de8:	40003800 	.word	0x40003800
 8001dec:	20000787 	.word	0x20000787

08001df0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001df4:	b672      	cpsid	i
}
 8001df6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001df8:	e7fe      	b.n	8001df8 <Error_Handler+0x8>
	...

08001dfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e02:	2300      	movs	r3, #0
 8001e04:	607b      	str	r3, [r7, #4]
 8001e06:	4b10      	ldr	r3, [pc, #64]	; (8001e48 <HAL_MspInit+0x4c>)
 8001e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e0a:	4a0f      	ldr	r2, [pc, #60]	; (8001e48 <HAL_MspInit+0x4c>)
 8001e0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e10:	6453      	str	r3, [r2, #68]	; 0x44
 8001e12:	4b0d      	ldr	r3, [pc, #52]	; (8001e48 <HAL_MspInit+0x4c>)
 8001e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e1a:	607b      	str	r3, [r7, #4]
 8001e1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e1e:	2300      	movs	r3, #0
 8001e20:	603b      	str	r3, [r7, #0]
 8001e22:	4b09      	ldr	r3, [pc, #36]	; (8001e48 <HAL_MspInit+0x4c>)
 8001e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e26:	4a08      	ldr	r2, [pc, #32]	; (8001e48 <HAL_MspInit+0x4c>)
 8001e28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e2c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e2e:	4b06      	ldr	r3, [pc, #24]	; (8001e48 <HAL_MspInit+0x4c>)
 8001e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e36:	603b      	str	r3, [r7, #0]
 8001e38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e3a:	bf00      	nop
 8001e3c:	370c      	adds	r7, #12
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	40023800 	.word	0x40023800

08001e4c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b08a      	sub	sp, #40	; 0x28
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e54:	f107 0314 	add.w	r3, r7, #20
 8001e58:	2200      	movs	r2, #0
 8001e5a:	601a      	str	r2, [r3, #0]
 8001e5c:	605a      	str	r2, [r3, #4]
 8001e5e:	609a      	str	r2, [r3, #8]
 8001e60:	60da      	str	r2, [r3, #12]
 8001e62:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a19      	ldr	r2, [pc, #100]	; (8001ed0 <HAL_I2C_MspInit+0x84>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d12b      	bne.n	8001ec6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e6e:	2300      	movs	r3, #0
 8001e70:	613b      	str	r3, [r7, #16]
 8001e72:	4b18      	ldr	r3, [pc, #96]	; (8001ed4 <HAL_I2C_MspInit+0x88>)
 8001e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e76:	4a17      	ldr	r2, [pc, #92]	; (8001ed4 <HAL_I2C_MspInit+0x88>)
 8001e78:	f043 0302 	orr.w	r3, r3, #2
 8001e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e7e:	4b15      	ldr	r3, [pc, #84]	; (8001ed4 <HAL_I2C_MspInit+0x88>)
 8001e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e82:	f003 0302 	and.w	r3, r3, #2
 8001e86:	613b      	str	r3, [r7, #16]
 8001e88:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e8a:	23c0      	movs	r3, #192	; 0xc0
 8001e8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e8e:	2312      	movs	r3, #18
 8001e90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e92:	2300      	movs	r3, #0
 8001e94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e96:	2303      	movs	r3, #3
 8001e98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e9a:	2304      	movs	r3, #4
 8001e9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e9e:	f107 0314 	add.w	r3, r7, #20
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	480c      	ldr	r0, [pc, #48]	; (8001ed8 <HAL_I2C_MspInit+0x8c>)
 8001ea6:	f001 f83f 	bl	8002f28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001eaa:	2300      	movs	r3, #0
 8001eac:	60fb      	str	r3, [r7, #12]
 8001eae:	4b09      	ldr	r3, [pc, #36]	; (8001ed4 <HAL_I2C_MspInit+0x88>)
 8001eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb2:	4a08      	ldr	r2, [pc, #32]	; (8001ed4 <HAL_I2C_MspInit+0x88>)
 8001eb4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001eb8:	6413      	str	r3, [r2, #64]	; 0x40
 8001eba:	4b06      	ldr	r3, [pc, #24]	; (8001ed4 <HAL_I2C_MspInit+0x88>)
 8001ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ec2:	60fb      	str	r3, [r7, #12]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001ec6:	bf00      	nop
 8001ec8:	3728      	adds	r7, #40	; 0x28
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	40005400 	.word	0x40005400
 8001ed4:	40023800 	.word	0x40023800
 8001ed8:	40020400 	.word	0x40020400

08001edc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b090      	sub	sp, #64	; 0x40
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ee8:	2200      	movs	r2, #0
 8001eea:	601a      	str	r2, [r3, #0]
 8001eec:	605a      	str	r2, [r3, #4]
 8001eee:	609a      	str	r2, [r3, #8]
 8001ef0:	60da      	str	r2, [r3, #12]
 8001ef2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a7d      	ldr	r2, [pc, #500]	; (80020f0 <HAL_SPI_MspInit+0x214>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d15b      	bne.n	8001fb6 <HAL_SPI_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001efe:	2300      	movs	r3, #0
 8001f00:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f02:	4b7c      	ldr	r3, [pc, #496]	; (80020f4 <HAL_SPI_MspInit+0x218>)
 8001f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f06:	4a7b      	ldr	r2, [pc, #492]	; (80020f4 <HAL_SPI_MspInit+0x218>)
 8001f08:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f0c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f0e:	4b79      	ldr	r3, [pc, #484]	; (80020f4 <HAL_SPI_MspInit+0x218>)
 8001f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f16:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f18:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	627b      	str	r3, [r7, #36]	; 0x24
 8001f1e:	4b75      	ldr	r3, [pc, #468]	; (80020f4 <HAL_SPI_MspInit+0x218>)
 8001f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f22:	4a74      	ldr	r2, [pc, #464]	; (80020f4 <HAL_SPI_MspInit+0x218>)
 8001f24:	f043 0301 	orr.w	r3, r3, #1
 8001f28:	6313      	str	r3, [r2, #48]	; 0x30
 8001f2a:	4b72      	ldr	r3, [pc, #456]	; (80020f4 <HAL_SPI_MspInit+0x218>)
 8001f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2e:	f003 0301 	and.w	r3, r3, #1
 8001f32:	627b      	str	r3, [r7, #36]	; 0x24
 8001f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001f36:	2360      	movs	r3, #96	; 0x60
 8001f38:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f3a:	2302      	movs	r3, #2
 8001f3c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f42:	2303      	movs	r3, #3
 8001f44:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001f46:	2305      	movs	r3, #5
 8001f48:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f4e:	4619      	mov	r1, r3
 8001f50:	4869      	ldr	r0, [pc, #420]	; (80020f8 <HAL_SPI_MspInit+0x21c>)
 8001f52:	f000 ffe9 	bl	8002f28 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8001f56:	4b69      	ldr	r3, [pc, #420]	; (80020fc <HAL_SPI_MspInit+0x220>)
 8001f58:	4a69      	ldr	r2, [pc, #420]	; (8002100 <HAL_SPI_MspInit+0x224>)
 8001f5a:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8001f5c:	4b67      	ldr	r3, [pc, #412]	; (80020fc <HAL_SPI_MspInit+0x220>)
 8001f5e:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001f62:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f64:	4b65      	ldr	r3, [pc, #404]	; (80020fc <HAL_SPI_MspInit+0x220>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f6a:	4b64      	ldr	r3, [pc, #400]	; (80020fc <HAL_SPI_MspInit+0x220>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001f70:	4b62      	ldr	r3, [pc, #392]	; (80020fc <HAL_SPI_MspInit+0x220>)
 8001f72:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f76:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f78:	4b60      	ldr	r3, [pc, #384]	; (80020fc <HAL_SPI_MspInit+0x220>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f7e:	4b5f      	ldr	r3, [pc, #380]	; (80020fc <HAL_SPI_MspInit+0x220>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8001f84:	4b5d      	ldr	r3, [pc, #372]	; (80020fc <HAL_SPI_MspInit+0x220>)
 8001f86:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f8a:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001f8c:	4b5b      	ldr	r3, [pc, #364]	; (80020fc <HAL_SPI_MspInit+0x220>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f92:	4b5a      	ldr	r3, [pc, #360]	; (80020fc <HAL_SPI_MspInit+0x220>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001f98:	4858      	ldr	r0, [pc, #352]	; (80020fc <HAL_SPI_MspInit+0x220>)
 8001f9a:	f000 fc33 	bl	8002804 <HAL_DMA_Init>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d001      	beq.n	8001fa8 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8001fa4:	f7ff ff24 	bl	8001df0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	4a54      	ldr	r2, [pc, #336]	; (80020fc <HAL_SPI_MspInit+0x220>)
 8001fac:	64da      	str	r2, [r3, #76]	; 0x4c
 8001fae:	4a53      	ldr	r2, [pc, #332]	; (80020fc <HAL_SPI_MspInit+0x220>)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI6_MspInit 1 */

  /* USER CODE END SPI6_MspInit 1 */
  }

}
 8001fb4:	e113      	b.n	80021de <HAL_SPI_MspInit+0x302>
  else if(hspi->Instance==SPI2)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a52      	ldr	r2, [pc, #328]	; (8002104 <HAL_SPI_MspInit+0x228>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d135      	bne.n	800202c <HAL_SPI_MspInit+0x150>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	623b      	str	r3, [r7, #32]
 8001fc4:	4b4b      	ldr	r3, [pc, #300]	; (80020f4 <HAL_SPI_MspInit+0x218>)
 8001fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc8:	4a4a      	ldr	r2, [pc, #296]	; (80020f4 <HAL_SPI_MspInit+0x218>)
 8001fca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fce:	6413      	str	r3, [r2, #64]	; 0x40
 8001fd0:	4b48      	ldr	r3, [pc, #288]	; (80020f4 <HAL_SPI_MspInit+0x218>)
 8001fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fd8:	623b      	str	r3, [r7, #32]
 8001fda:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fdc:	2300      	movs	r3, #0
 8001fde:	61fb      	str	r3, [r7, #28]
 8001fe0:	4b44      	ldr	r3, [pc, #272]	; (80020f4 <HAL_SPI_MspInit+0x218>)
 8001fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe4:	4a43      	ldr	r2, [pc, #268]	; (80020f4 <HAL_SPI_MspInit+0x218>)
 8001fe6:	f043 0302 	orr.w	r3, r3, #2
 8001fea:	6313      	str	r3, [r2, #48]	; 0x30
 8001fec:	4b41      	ldr	r3, [pc, #260]	; (80020f4 <HAL_SPI_MspInit+0x218>)
 8001fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff0:	f003 0302 	and.w	r3, r3, #2
 8001ff4:	61fb      	str	r3, [r7, #28]
 8001ff6:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001ff8:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ffe:	2302      	movs	r3, #2
 8002000:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002002:	2300      	movs	r3, #0
 8002004:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002006:	2303      	movs	r3, #3
 8002008:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800200a:	2305      	movs	r3, #5
 800200c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800200e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002012:	4619      	mov	r1, r3
 8002014:	483c      	ldr	r0, [pc, #240]	; (8002108 <HAL_SPI_MspInit+0x22c>)
 8002016:	f000 ff87 	bl	8002f28 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800201a:	2200      	movs	r2, #0
 800201c:	2100      	movs	r1, #0
 800201e:	2024      	movs	r0, #36	; 0x24
 8002020:	f000 fbb9 	bl	8002796 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8002024:	2024      	movs	r0, #36	; 0x24
 8002026:	f000 fbd2 	bl	80027ce <HAL_NVIC_EnableIRQ>
}
 800202a:	e0d8      	b.n	80021de <HAL_SPI_MspInit+0x302>
  else if(hspi->Instance==SPI4)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a36      	ldr	r2, [pc, #216]	; (800210c <HAL_SPI_MspInit+0x230>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d172      	bne.n	800211c <HAL_SPI_MspInit+0x240>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002036:	2300      	movs	r3, #0
 8002038:	61bb      	str	r3, [r7, #24]
 800203a:	4b2e      	ldr	r3, [pc, #184]	; (80020f4 <HAL_SPI_MspInit+0x218>)
 800203c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800203e:	4a2d      	ldr	r2, [pc, #180]	; (80020f4 <HAL_SPI_MspInit+0x218>)
 8002040:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002044:	6453      	str	r3, [r2, #68]	; 0x44
 8002046:	4b2b      	ldr	r3, [pc, #172]	; (80020f4 <HAL_SPI_MspInit+0x218>)
 8002048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800204a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800204e:	61bb      	str	r3, [r7, #24]
 8002050:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002052:	2300      	movs	r3, #0
 8002054:	617b      	str	r3, [r7, #20]
 8002056:	4b27      	ldr	r3, [pc, #156]	; (80020f4 <HAL_SPI_MspInit+0x218>)
 8002058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205a:	4a26      	ldr	r2, [pc, #152]	; (80020f4 <HAL_SPI_MspInit+0x218>)
 800205c:	f043 0310 	orr.w	r3, r3, #16
 8002060:	6313      	str	r3, [r2, #48]	; 0x30
 8002062:	4b24      	ldr	r3, [pc, #144]	; (80020f4 <HAL_SPI_MspInit+0x218>)
 8002064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002066:	f003 0310 	and.w	r3, r3, #16
 800206a:	617b      	str	r3, [r7, #20]
 800206c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800206e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002072:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002074:	2302      	movs	r3, #2
 8002076:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002078:	2300      	movs	r3, #0
 800207a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800207c:	2303      	movs	r3, #3
 800207e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002080:	2305      	movs	r3, #5
 8002082:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002084:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002088:	4619      	mov	r1, r3
 800208a:	4821      	ldr	r0, [pc, #132]	; (8002110 <HAL_SPI_MspInit+0x234>)
 800208c:	f000 ff4c 	bl	8002f28 <HAL_GPIO_Init>
    hdma_spi4_rx.Instance = DMA2_Stream3;
 8002090:	4b20      	ldr	r3, [pc, #128]	; (8002114 <HAL_SPI_MspInit+0x238>)
 8002092:	4a21      	ldr	r2, [pc, #132]	; (8002118 <HAL_SPI_MspInit+0x23c>)
 8002094:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Channel = DMA_CHANNEL_5;
 8002096:	4b1f      	ldr	r3, [pc, #124]	; (8002114 <HAL_SPI_MspInit+0x238>)
 8002098:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800209c:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800209e:	4b1d      	ldr	r3, [pc, #116]	; (8002114 <HAL_SPI_MspInit+0x238>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80020a4:	4b1b      	ldr	r3, [pc, #108]	; (8002114 <HAL_SPI_MspInit+0x238>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80020aa:	4b1a      	ldr	r3, [pc, #104]	; (8002114 <HAL_SPI_MspInit+0x238>)
 80020ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020b0:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020b2:	4b18      	ldr	r3, [pc, #96]	; (8002114 <HAL_SPI_MspInit+0x238>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020b8:	4b16      	ldr	r3, [pc, #88]	; (8002114 <HAL_SPI_MspInit+0x238>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_CIRCULAR;
 80020be:	4b15      	ldr	r3, [pc, #84]	; (8002114 <HAL_SPI_MspInit+0x238>)
 80020c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020c4:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80020c6:	4b13      	ldr	r3, [pc, #76]	; (8002114 <HAL_SPI_MspInit+0x238>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	621a      	str	r2, [r3, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80020cc:	4b11      	ldr	r3, [pc, #68]	; (8002114 <HAL_SPI_MspInit+0x238>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 80020d2:	4810      	ldr	r0, [pc, #64]	; (8002114 <HAL_SPI_MspInit+0x238>)
 80020d4:	f000 fb96 	bl	8002804 <HAL_DMA_Init>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d001      	beq.n	80020e2 <HAL_SPI_MspInit+0x206>
      Error_Handler();
 80020de:	f7ff fe87 	bl	8001df0 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi4_rx);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a0b      	ldr	r2, [pc, #44]	; (8002114 <HAL_SPI_MspInit+0x238>)
 80020e6:	64da      	str	r2, [r3, #76]	; 0x4c
 80020e8:	4a0a      	ldr	r2, [pc, #40]	; (8002114 <HAL_SPI_MspInit+0x238>)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6393      	str	r3, [r2, #56]	; 0x38
}
 80020ee:	e076      	b.n	80021de <HAL_SPI_MspInit+0x302>
 80020f0:	40013000 	.word	0x40013000
 80020f4:	40023800 	.word	0x40023800
 80020f8:	40020000 	.word	0x40020000
 80020fc:	20003b58 	.word	0x20003b58
 8002100:	40026410 	.word	0x40026410
 8002104:	40003800 	.word	0x40003800
 8002108:	40020400 	.word	0x40020400
 800210c:	40013400 	.word	0x40013400
 8002110:	40021000 	.word	0x40021000
 8002114:	20001b84 	.word	0x20001b84
 8002118:	40026458 	.word	0x40026458
  else if(hspi->Instance==SPI6)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a31      	ldr	r2, [pc, #196]	; (80021e8 <HAL_SPI_MspInit+0x30c>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d15b      	bne.n	80021de <HAL_SPI_MspInit+0x302>
    __HAL_RCC_SPI6_CLK_ENABLE();
 8002126:	2300      	movs	r3, #0
 8002128:	613b      	str	r3, [r7, #16]
 800212a:	4b30      	ldr	r3, [pc, #192]	; (80021ec <HAL_SPI_MspInit+0x310>)
 800212c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212e:	4a2f      	ldr	r2, [pc, #188]	; (80021ec <HAL_SPI_MspInit+0x310>)
 8002130:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002134:	6453      	str	r3, [r2, #68]	; 0x44
 8002136:	4b2d      	ldr	r3, [pc, #180]	; (80021ec <HAL_SPI_MspInit+0x310>)
 8002138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800213a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800213e:	613b      	str	r3, [r7, #16]
 8002140:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002142:	2300      	movs	r3, #0
 8002144:	60fb      	str	r3, [r7, #12]
 8002146:	4b29      	ldr	r3, [pc, #164]	; (80021ec <HAL_SPI_MspInit+0x310>)
 8002148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214a:	4a28      	ldr	r2, [pc, #160]	; (80021ec <HAL_SPI_MspInit+0x310>)
 800214c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002150:	6313      	str	r3, [r2, #48]	; 0x30
 8002152:	4b26      	ldr	r3, [pc, #152]	; (80021ec <HAL_SPI_MspInit+0x310>)
 8002154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002156:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800215a:	60fb      	str	r3, [r7, #12]
 800215c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800215e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002162:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002164:	2302      	movs	r3, #2
 8002166:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002168:	2300      	movs	r3, #0
 800216a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800216c:	2303      	movs	r3, #3
 800216e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 8002170:	2305      	movs	r3, #5
 8002172:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002174:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002178:	4619      	mov	r1, r3
 800217a:	481d      	ldr	r0, [pc, #116]	; (80021f0 <HAL_SPI_MspInit+0x314>)
 800217c:	f000 fed4 	bl	8002f28 <HAL_GPIO_Init>
    hdma_spi6_rx.Instance = DMA2_Stream6;
 8002180:	4b1c      	ldr	r3, [pc, #112]	; (80021f4 <HAL_SPI_MspInit+0x318>)
 8002182:	4a1d      	ldr	r2, [pc, #116]	; (80021f8 <HAL_SPI_MspInit+0x31c>)
 8002184:	601a      	str	r2, [r3, #0]
    hdma_spi6_rx.Init.Channel = DMA_CHANNEL_1;
 8002186:	4b1b      	ldr	r3, [pc, #108]	; (80021f4 <HAL_SPI_MspInit+0x318>)
 8002188:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800218c:	605a      	str	r2, [r3, #4]
    hdma_spi6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800218e:	4b19      	ldr	r3, [pc, #100]	; (80021f4 <HAL_SPI_MspInit+0x318>)
 8002190:	2200      	movs	r2, #0
 8002192:	609a      	str	r2, [r3, #8]
    hdma_spi6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002194:	4b17      	ldr	r3, [pc, #92]	; (80021f4 <HAL_SPI_MspInit+0x318>)
 8002196:	2200      	movs	r2, #0
 8002198:	60da      	str	r2, [r3, #12]
    hdma_spi6_rx.Init.MemInc = DMA_MINC_ENABLE;
 800219a:	4b16      	ldr	r3, [pc, #88]	; (80021f4 <HAL_SPI_MspInit+0x318>)
 800219c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021a0:	611a      	str	r2, [r3, #16]
    hdma_spi6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021a2:	4b14      	ldr	r3, [pc, #80]	; (80021f4 <HAL_SPI_MspInit+0x318>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	615a      	str	r2, [r3, #20]
    hdma_spi6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021a8:	4b12      	ldr	r3, [pc, #72]	; (80021f4 <HAL_SPI_MspInit+0x318>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	619a      	str	r2, [r3, #24]
    hdma_spi6_rx.Init.Mode = DMA_CIRCULAR;
 80021ae:	4b11      	ldr	r3, [pc, #68]	; (80021f4 <HAL_SPI_MspInit+0x318>)
 80021b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021b4:	61da      	str	r2, [r3, #28]
    hdma_spi6_rx.Init.Priority = DMA_PRIORITY_LOW;
 80021b6:	4b0f      	ldr	r3, [pc, #60]	; (80021f4 <HAL_SPI_MspInit+0x318>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	621a      	str	r2, [r3, #32]
    hdma_spi6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80021bc:	4b0d      	ldr	r3, [pc, #52]	; (80021f4 <HAL_SPI_MspInit+0x318>)
 80021be:	2200      	movs	r2, #0
 80021c0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi6_rx) != HAL_OK)
 80021c2:	480c      	ldr	r0, [pc, #48]	; (80021f4 <HAL_SPI_MspInit+0x318>)
 80021c4:	f000 fb1e 	bl	8002804 <HAL_DMA_Init>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d001      	beq.n	80021d2 <HAL_SPI_MspInit+0x2f6>
      Error_Handler();
 80021ce:	f7ff fe0f 	bl	8001df0 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi6_rx);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a07      	ldr	r2, [pc, #28]	; (80021f4 <HAL_SPI_MspInit+0x318>)
 80021d6:	64da      	str	r2, [r3, #76]	; 0x4c
 80021d8:	4a06      	ldr	r2, [pc, #24]	; (80021f4 <HAL_SPI_MspInit+0x318>)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6393      	str	r3, [r2, #56]	; 0x38
}
 80021de:	bf00      	nop
 80021e0:	3740      	adds	r7, #64	; 0x40
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	40015400 	.word	0x40015400
 80021ec:	40023800 	.word	0x40023800
 80021f0:	40021800 	.word	0x40021800
 80021f4:	20003bb8 	.word	0x20003bb8
 80021f8:	400264a0 	.word	0x400264a0

080021fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b08c      	sub	sp, #48	; 0x30
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002204:	f107 031c 	add.w	r3, r7, #28
 8002208:	2200      	movs	r2, #0
 800220a:	601a      	str	r2, [r3, #0]
 800220c:	605a      	str	r2, [r3, #4]
 800220e:	609a      	str	r2, [r3, #8]
 8002210:	60da      	str	r2, [r3, #12]
 8002212:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a4a      	ldr	r2, [pc, #296]	; (8002344 <HAL_UART_MspInit+0x148>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d15c      	bne.n	80022d8 <HAL_UART_MspInit+0xdc>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800221e:	2300      	movs	r3, #0
 8002220:	61bb      	str	r3, [r7, #24]
 8002222:	4b49      	ldr	r3, [pc, #292]	; (8002348 <HAL_UART_MspInit+0x14c>)
 8002224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002226:	4a48      	ldr	r2, [pc, #288]	; (8002348 <HAL_UART_MspInit+0x14c>)
 8002228:	f043 0310 	orr.w	r3, r3, #16
 800222c:	6453      	str	r3, [r2, #68]	; 0x44
 800222e:	4b46      	ldr	r3, [pc, #280]	; (8002348 <HAL_UART_MspInit+0x14c>)
 8002230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002232:	f003 0310 	and.w	r3, r3, #16
 8002236:	61bb      	str	r3, [r7, #24]
 8002238:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800223a:	2300      	movs	r3, #0
 800223c:	617b      	str	r3, [r7, #20]
 800223e:	4b42      	ldr	r3, [pc, #264]	; (8002348 <HAL_UART_MspInit+0x14c>)
 8002240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002242:	4a41      	ldr	r2, [pc, #260]	; (8002348 <HAL_UART_MspInit+0x14c>)
 8002244:	f043 0301 	orr.w	r3, r3, #1
 8002248:	6313      	str	r3, [r2, #48]	; 0x30
 800224a:	4b3f      	ldr	r3, [pc, #252]	; (8002348 <HAL_UART_MspInit+0x14c>)
 800224c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224e:	f003 0301 	and.w	r3, r3, #1
 8002252:	617b      	str	r3, [r7, #20]
 8002254:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002256:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800225a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800225c:	2302      	movs	r3, #2
 800225e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002260:	2300      	movs	r3, #0
 8002262:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002264:	2303      	movs	r3, #3
 8002266:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002268:	2307      	movs	r3, #7
 800226a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800226c:	f107 031c 	add.w	r3, r7, #28
 8002270:	4619      	mov	r1, r3
 8002272:	4836      	ldr	r0, [pc, #216]	; (800234c <HAL_UART_MspInit+0x150>)
 8002274:	f000 fe58 	bl	8002f28 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002278:	4b35      	ldr	r3, [pc, #212]	; (8002350 <HAL_UART_MspInit+0x154>)
 800227a:	4a36      	ldr	r2, [pc, #216]	; (8002354 <HAL_UART_MspInit+0x158>)
 800227c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800227e:	4b34      	ldr	r3, [pc, #208]	; (8002350 <HAL_UART_MspInit+0x154>)
 8002280:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002284:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002286:	4b32      	ldr	r3, [pc, #200]	; (8002350 <HAL_UART_MspInit+0x154>)
 8002288:	2200      	movs	r2, #0
 800228a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800228c:	4b30      	ldr	r3, [pc, #192]	; (8002350 <HAL_UART_MspInit+0x154>)
 800228e:	2200      	movs	r2, #0
 8002290:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002292:	4b2f      	ldr	r3, [pc, #188]	; (8002350 <HAL_UART_MspInit+0x154>)
 8002294:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002298:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800229a:	4b2d      	ldr	r3, [pc, #180]	; (8002350 <HAL_UART_MspInit+0x154>)
 800229c:	2200      	movs	r2, #0
 800229e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80022a0:	4b2b      	ldr	r3, [pc, #172]	; (8002350 <HAL_UART_MspInit+0x154>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80022a6:	4b2a      	ldr	r3, [pc, #168]	; (8002350 <HAL_UART_MspInit+0x154>)
 80022a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022ac:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80022ae:	4b28      	ldr	r3, [pc, #160]	; (8002350 <HAL_UART_MspInit+0x154>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80022b4:	4b26      	ldr	r3, [pc, #152]	; (8002350 <HAL_UART_MspInit+0x154>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80022ba:	4825      	ldr	r0, [pc, #148]	; (8002350 <HAL_UART_MspInit+0x154>)
 80022bc:	f000 faa2 	bl	8002804 <HAL_DMA_Init>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80022c6:	f7ff fd93 	bl	8001df0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a20      	ldr	r2, [pc, #128]	; (8002350 <HAL_UART_MspInit+0x154>)
 80022ce:	639a      	str	r2, [r3, #56]	; 0x38
 80022d0:	4a1f      	ldr	r2, [pc, #124]	; (8002350 <HAL_UART_MspInit+0x154>)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80022d6:	e031      	b.n	800233c <HAL_UART_MspInit+0x140>
  else if(huart->Instance==USART3)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a1e      	ldr	r2, [pc, #120]	; (8002358 <HAL_UART_MspInit+0x15c>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d12c      	bne.n	800233c <HAL_UART_MspInit+0x140>
    __HAL_RCC_USART3_CLK_ENABLE();
 80022e2:	2300      	movs	r3, #0
 80022e4:	613b      	str	r3, [r7, #16]
 80022e6:	4b18      	ldr	r3, [pc, #96]	; (8002348 <HAL_UART_MspInit+0x14c>)
 80022e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ea:	4a17      	ldr	r2, [pc, #92]	; (8002348 <HAL_UART_MspInit+0x14c>)
 80022ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022f0:	6413      	str	r3, [r2, #64]	; 0x40
 80022f2:	4b15      	ldr	r3, [pc, #84]	; (8002348 <HAL_UART_MspInit+0x14c>)
 80022f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022fa:	613b      	str	r3, [r7, #16]
 80022fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80022fe:	2300      	movs	r3, #0
 8002300:	60fb      	str	r3, [r7, #12]
 8002302:	4b11      	ldr	r3, [pc, #68]	; (8002348 <HAL_UART_MspInit+0x14c>)
 8002304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002306:	4a10      	ldr	r2, [pc, #64]	; (8002348 <HAL_UART_MspInit+0x14c>)
 8002308:	f043 0308 	orr.w	r3, r3, #8
 800230c:	6313      	str	r3, [r2, #48]	; 0x30
 800230e:	4b0e      	ldr	r3, [pc, #56]	; (8002348 <HAL_UART_MspInit+0x14c>)
 8002310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002312:	f003 0308 	and.w	r3, r3, #8
 8002316:	60fb      	str	r3, [r7, #12]
 8002318:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800231a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800231e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002320:	2302      	movs	r3, #2
 8002322:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002324:	2300      	movs	r3, #0
 8002326:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002328:	2303      	movs	r3, #3
 800232a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800232c:	2307      	movs	r3, #7
 800232e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002330:	f107 031c 	add.w	r3, r7, #28
 8002334:	4619      	mov	r1, r3
 8002336:	4809      	ldr	r0, [pc, #36]	; (800235c <HAL_UART_MspInit+0x160>)
 8002338:	f000 fdf6 	bl	8002f28 <HAL_GPIO_Init>
}
 800233c:	bf00      	nop
 800233e:	3730      	adds	r7, #48	; 0x30
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	40011000 	.word	0x40011000
 8002348:	40023800 	.word	0x40023800
 800234c:	40020000 	.word	0x40020000
 8002350:	200029ec 	.word	0x200029ec
 8002354:	40026440 	.word	0x40026440
 8002358:	40004800 	.word	0x40004800
 800235c:	40020c00 	.word	0x40020c00

08002360 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002364:	e7fe      	b.n	8002364 <NMI_Handler+0x4>

08002366 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002366:	b480      	push	{r7}
 8002368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800236a:	e7fe      	b.n	800236a <HardFault_Handler+0x4>

0800236c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002370:	e7fe      	b.n	8002370 <MemManage_Handler+0x4>

08002372 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002372:	b480      	push	{r7}
 8002374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002376:	e7fe      	b.n	8002376 <BusFault_Handler+0x4>

08002378 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800237c:	e7fe      	b.n	800237c <UsageFault_Handler+0x4>

0800237e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800237e:	b480      	push	{r7}
 8002380:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002382:	bf00      	nop
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002390:	bf00      	nop
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr

0800239a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800239a:	b480      	push	{r7}
 800239c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800239e:	bf00      	nop
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr

080023a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023ac:	f000 f8f8 	bl	80025a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023b0:	bf00      	nop
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80023b8:	4802      	ldr	r0, [pc, #8]	; (80023c4 <SPI2_IRQHandler+0x10>)
 80023ba:	f002 fa0f 	bl	80047dc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80023be:	bf00      	nop
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	20000c84 	.word	0x20000c84

080023c8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80023cc:	4802      	ldr	r0, [pc, #8]	; (80023d8 <DMA2_Stream0_IRQHandler+0x10>)
 80023ce:	f000 fb41 	bl	8002a54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80023d2:	bf00      	nop
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	20003b58 	.word	0x20003b58

080023dc <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80023e0:	4802      	ldr	r0, [pc, #8]	; (80023ec <DMA2_Stream2_IRQHandler+0x10>)
 80023e2:	f000 fb37 	bl	8002a54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80023e6:	bf00      	nop
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	200029ec 	.word	0x200029ec

080023f0 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 80023f4:	4802      	ldr	r0, [pc, #8]	; (8002400 <DMA2_Stream3_IRQHandler+0x10>)
 80023f6:	f000 fb2d 	bl	8002a54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80023fa:	bf00      	nop
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	20001b84 	.word	0x20001b84

08002404 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi6_rx);
 8002408:	4802      	ldr	r0, [pc, #8]	; (8002414 <DMA2_Stream6_IRQHandler+0x10>)
 800240a:	f000 fb23 	bl	8002a54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800240e:	bf00      	nop
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	20003bb8 	.word	0x20003bb8

08002418 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b086      	sub	sp, #24
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002420:	4a14      	ldr	r2, [pc, #80]	; (8002474 <_sbrk+0x5c>)
 8002422:	4b15      	ldr	r3, [pc, #84]	; (8002478 <_sbrk+0x60>)
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800242c:	4b13      	ldr	r3, [pc, #76]	; (800247c <_sbrk+0x64>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d102      	bne.n	800243a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002434:	4b11      	ldr	r3, [pc, #68]	; (800247c <_sbrk+0x64>)
 8002436:	4a12      	ldr	r2, [pc, #72]	; (8002480 <_sbrk+0x68>)
 8002438:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800243a:	4b10      	ldr	r3, [pc, #64]	; (800247c <_sbrk+0x64>)
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4413      	add	r3, r2
 8002442:	693a      	ldr	r2, [r7, #16]
 8002444:	429a      	cmp	r2, r3
 8002446:	d207      	bcs.n	8002458 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002448:	f003 fbf4 	bl	8005c34 <__errno>
 800244c:	4603      	mov	r3, r0
 800244e:	220c      	movs	r2, #12
 8002450:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002452:	f04f 33ff 	mov.w	r3, #4294967295
 8002456:	e009      	b.n	800246c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002458:	4b08      	ldr	r3, [pc, #32]	; (800247c <_sbrk+0x64>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800245e:	4b07      	ldr	r3, [pc, #28]	; (800247c <_sbrk+0x64>)
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4413      	add	r3, r2
 8002466:	4a05      	ldr	r2, [pc, #20]	; (800247c <_sbrk+0x64>)
 8002468:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800246a:	68fb      	ldr	r3, [r7, #12]
}
 800246c:	4618      	mov	r0, r3
 800246e:	3718      	adds	r7, #24
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	20030000 	.word	0x20030000
 8002478:	00000400 	.word	0x00000400
 800247c:	2000078c 	.word	0x2000078c
 8002480:	20003c30 	.word	0x20003c30

08002484 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002488:	4b06      	ldr	r3, [pc, #24]	; (80024a4 <SystemInit+0x20>)
 800248a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800248e:	4a05      	ldr	r2, [pc, #20]	; (80024a4 <SystemInit+0x20>)
 8002490:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002494:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002498:	bf00      	nop
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	e000ed00 	.word	0xe000ed00

080024a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80024a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024e0 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80024ac:	480d      	ldr	r0, [pc, #52]	; (80024e4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80024ae:	490e      	ldr	r1, [pc, #56]	; (80024e8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80024b0:	4a0e      	ldr	r2, [pc, #56]	; (80024ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80024b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024b4:	e002      	b.n	80024bc <LoopCopyDataInit>

080024b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024ba:	3304      	adds	r3, #4

080024bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024c0:	d3f9      	bcc.n	80024b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024c2:	4a0b      	ldr	r2, [pc, #44]	; (80024f0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80024c4:	4c0b      	ldr	r4, [pc, #44]	; (80024f4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80024c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024c8:	e001      	b.n	80024ce <LoopFillZerobss>

080024ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024cc:	3204      	adds	r2, #4

080024ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024d0:	d3fb      	bcc.n	80024ca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80024d2:	f7ff ffd7 	bl	8002484 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024d6:	f003 fbb3 	bl	8005c40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024da:	f7fe fe77 	bl	80011cc <main>
  bx  lr    
 80024de:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80024e0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80024e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024e8:	20000760 	.word	0x20000760
  ldr r2, =_sidata
 80024ec:	080065bc 	.word	0x080065bc
  ldr r2, =_sbss
 80024f0:	20000760 	.word	0x20000760
  ldr r4, =_ebss
 80024f4:	20003c30 	.word	0x20003c30

080024f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024f8:	e7fe      	b.n	80024f8 <ADC_IRQHandler>
	...

080024fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002500:	4b0e      	ldr	r3, [pc, #56]	; (800253c <HAL_Init+0x40>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a0d      	ldr	r2, [pc, #52]	; (800253c <HAL_Init+0x40>)
 8002506:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800250a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800250c:	4b0b      	ldr	r3, [pc, #44]	; (800253c <HAL_Init+0x40>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a0a      	ldr	r2, [pc, #40]	; (800253c <HAL_Init+0x40>)
 8002512:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002516:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002518:	4b08      	ldr	r3, [pc, #32]	; (800253c <HAL_Init+0x40>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a07      	ldr	r2, [pc, #28]	; (800253c <HAL_Init+0x40>)
 800251e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002522:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002524:	2003      	movs	r0, #3
 8002526:	f000 f92b 	bl	8002780 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800252a:	200f      	movs	r0, #15
 800252c:	f000 f808 	bl	8002540 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002530:	f7ff fc64 	bl	8001dfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002534:	2300      	movs	r3, #0
}
 8002536:	4618      	mov	r0, r3
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	40023c00 	.word	0x40023c00

08002540 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002548:	4b12      	ldr	r3, [pc, #72]	; (8002594 <HAL_InitTick+0x54>)
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	4b12      	ldr	r3, [pc, #72]	; (8002598 <HAL_InitTick+0x58>)
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	4619      	mov	r1, r3
 8002552:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002556:	fbb3 f3f1 	udiv	r3, r3, r1
 800255a:	fbb2 f3f3 	udiv	r3, r2, r3
 800255e:	4618      	mov	r0, r3
 8002560:	f000 f943 	bl	80027ea <HAL_SYSTICK_Config>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d001      	beq.n	800256e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e00e      	b.n	800258c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2b0f      	cmp	r3, #15
 8002572:	d80a      	bhi.n	800258a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002574:	2200      	movs	r2, #0
 8002576:	6879      	ldr	r1, [r7, #4]
 8002578:	f04f 30ff 	mov.w	r0, #4294967295
 800257c:	f000 f90b 	bl	8002796 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002580:	4a06      	ldr	r2, [pc, #24]	; (800259c <HAL_InitTick+0x5c>)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002586:	2300      	movs	r3, #0
 8002588:	e000      	b.n	800258c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
}
 800258c:	4618      	mov	r0, r3
 800258e:	3708      	adds	r7, #8
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	200006f0 	.word	0x200006f0
 8002598:	200006f8 	.word	0x200006f8
 800259c:	200006f4 	.word	0x200006f4

080025a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025a4:	4b06      	ldr	r3, [pc, #24]	; (80025c0 <HAL_IncTick+0x20>)
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	461a      	mov	r2, r3
 80025aa:	4b06      	ldr	r3, [pc, #24]	; (80025c4 <HAL_IncTick+0x24>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4413      	add	r3, r2
 80025b0:	4a04      	ldr	r2, [pc, #16]	; (80025c4 <HAL_IncTick+0x24>)
 80025b2:	6013      	str	r3, [r2, #0]
}
 80025b4:	bf00      	nop
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr
 80025be:	bf00      	nop
 80025c0:	200006f8 	.word	0x200006f8
 80025c4:	20003c1c 	.word	0x20003c1c

080025c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
  return uwTick;
 80025cc:	4b03      	ldr	r3, [pc, #12]	; (80025dc <HAL_GetTick+0x14>)
 80025ce:	681b      	ldr	r3, [r3, #0]
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop
 80025dc:	20003c1c 	.word	0x20003c1c

080025e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b085      	sub	sp, #20
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	f003 0307 	and.w	r3, r3, #7
 80025ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025f0:	4b0c      	ldr	r3, [pc, #48]	; (8002624 <__NVIC_SetPriorityGrouping+0x44>)
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025f6:	68ba      	ldr	r2, [r7, #8]
 80025f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025fc:	4013      	ands	r3, r2
 80025fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002608:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800260c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002610:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002612:	4a04      	ldr	r2, [pc, #16]	; (8002624 <__NVIC_SetPriorityGrouping+0x44>)
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	60d3      	str	r3, [r2, #12]
}
 8002618:	bf00      	nop
 800261a:	3714      	adds	r7, #20
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr
 8002624:	e000ed00 	.word	0xe000ed00

08002628 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800262c:	4b04      	ldr	r3, [pc, #16]	; (8002640 <__NVIC_GetPriorityGrouping+0x18>)
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	0a1b      	lsrs	r3, r3, #8
 8002632:	f003 0307 	and.w	r3, r3, #7
}
 8002636:	4618      	mov	r0, r3
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr
 8002640:	e000ed00 	.word	0xe000ed00

08002644 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	4603      	mov	r3, r0
 800264c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800264e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002652:	2b00      	cmp	r3, #0
 8002654:	db0b      	blt.n	800266e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002656:	79fb      	ldrb	r3, [r7, #7]
 8002658:	f003 021f 	and.w	r2, r3, #31
 800265c:	4907      	ldr	r1, [pc, #28]	; (800267c <__NVIC_EnableIRQ+0x38>)
 800265e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002662:	095b      	lsrs	r3, r3, #5
 8002664:	2001      	movs	r0, #1
 8002666:	fa00 f202 	lsl.w	r2, r0, r2
 800266a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800266e:	bf00      	nop
 8002670:	370c      	adds	r7, #12
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	e000e100 	.word	0xe000e100

08002680 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	4603      	mov	r3, r0
 8002688:	6039      	str	r1, [r7, #0]
 800268a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800268c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002690:	2b00      	cmp	r3, #0
 8002692:	db0a      	blt.n	80026aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	b2da      	uxtb	r2, r3
 8002698:	490c      	ldr	r1, [pc, #48]	; (80026cc <__NVIC_SetPriority+0x4c>)
 800269a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800269e:	0112      	lsls	r2, r2, #4
 80026a0:	b2d2      	uxtb	r2, r2
 80026a2:	440b      	add	r3, r1
 80026a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026a8:	e00a      	b.n	80026c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	b2da      	uxtb	r2, r3
 80026ae:	4908      	ldr	r1, [pc, #32]	; (80026d0 <__NVIC_SetPriority+0x50>)
 80026b0:	79fb      	ldrb	r3, [r7, #7]
 80026b2:	f003 030f 	and.w	r3, r3, #15
 80026b6:	3b04      	subs	r3, #4
 80026b8:	0112      	lsls	r2, r2, #4
 80026ba:	b2d2      	uxtb	r2, r2
 80026bc:	440b      	add	r3, r1
 80026be:	761a      	strb	r2, [r3, #24]
}
 80026c0:	bf00      	nop
 80026c2:	370c      	adds	r7, #12
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr
 80026cc:	e000e100 	.word	0xe000e100
 80026d0:	e000ed00 	.word	0xe000ed00

080026d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b089      	sub	sp, #36	; 0x24
 80026d8:	af00      	add	r7, sp, #0
 80026da:	60f8      	str	r0, [r7, #12]
 80026dc:	60b9      	str	r1, [r7, #8]
 80026de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	f003 0307 	and.w	r3, r3, #7
 80026e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	f1c3 0307 	rsb	r3, r3, #7
 80026ee:	2b04      	cmp	r3, #4
 80026f0:	bf28      	it	cs
 80026f2:	2304      	movcs	r3, #4
 80026f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	3304      	adds	r3, #4
 80026fa:	2b06      	cmp	r3, #6
 80026fc:	d902      	bls.n	8002704 <NVIC_EncodePriority+0x30>
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	3b03      	subs	r3, #3
 8002702:	e000      	b.n	8002706 <NVIC_EncodePriority+0x32>
 8002704:	2300      	movs	r3, #0
 8002706:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002708:	f04f 32ff 	mov.w	r2, #4294967295
 800270c:	69bb      	ldr	r3, [r7, #24]
 800270e:	fa02 f303 	lsl.w	r3, r2, r3
 8002712:	43da      	mvns	r2, r3
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	401a      	ands	r2, r3
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800271c:	f04f 31ff 	mov.w	r1, #4294967295
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	fa01 f303 	lsl.w	r3, r1, r3
 8002726:	43d9      	mvns	r1, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800272c:	4313      	orrs	r3, r2
         );
}
 800272e:	4618      	mov	r0, r3
 8002730:	3724      	adds	r7, #36	; 0x24
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
	...

0800273c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	3b01      	subs	r3, #1
 8002748:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800274c:	d301      	bcc.n	8002752 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800274e:	2301      	movs	r3, #1
 8002750:	e00f      	b.n	8002772 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002752:	4a0a      	ldr	r2, [pc, #40]	; (800277c <SysTick_Config+0x40>)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	3b01      	subs	r3, #1
 8002758:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800275a:	210f      	movs	r1, #15
 800275c:	f04f 30ff 	mov.w	r0, #4294967295
 8002760:	f7ff ff8e 	bl	8002680 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002764:	4b05      	ldr	r3, [pc, #20]	; (800277c <SysTick_Config+0x40>)
 8002766:	2200      	movs	r2, #0
 8002768:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800276a:	4b04      	ldr	r3, [pc, #16]	; (800277c <SysTick_Config+0x40>)
 800276c:	2207      	movs	r2, #7
 800276e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002770:	2300      	movs	r3, #0
}
 8002772:	4618      	mov	r0, r3
 8002774:	3708      	adds	r7, #8
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	e000e010 	.word	0xe000e010

08002780 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	f7ff ff29 	bl	80025e0 <__NVIC_SetPriorityGrouping>
}
 800278e:	bf00      	nop
 8002790:	3708      	adds	r7, #8
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}

08002796 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002796:	b580      	push	{r7, lr}
 8002798:	b086      	sub	sp, #24
 800279a:	af00      	add	r7, sp, #0
 800279c:	4603      	mov	r3, r0
 800279e:	60b9      	str	r1, [r7, #8]
 80027a0:	607a      	str	r2, [r7, #4]
 80027a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027a4:	2300      	movs	r3, #0
 80027a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027a8:	f7ff ff3e 	bl	8002628 <__NVIC_GetPriorityGrouping>
 80027ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	68b9      	ldr	r1, [r7, #8]
 80027b2:	6978      	ldr	r0, [r7, #20]
 80027b4:	f7ff ff8e 	bl	80026d4 <NVIC_EncodePriority>
 80027b8:	4602      	mov	r2, r0
 80027ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027be:	4611      	mov	r1, r2
 80027c0:	4618      	mov	r0, r3
 80027c2:	f7ff ff5d 	bl	8002680 <__NVIC_SetPriority>
}
 80027c6:	bf00      	nop
 80027c8:	3718      	adds	r7, #24
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}

080027ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027ce:	b580      	push	{r7, lr}
 80027d0:	b082      	sub	sp, #8
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	4603      	mov	r3, r0
 80027d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027dc:	4618      	mov	r0, r3
 80027de:	f7ff ff31 	bl	8002644 <__NVIC_EnableIRQ>
}
 80027e2:	bf00      	nop
 80027e4:	3708      	adds	r7, #8
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}

080027ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027ea:	b580      	push	{r7, lr}
 80027ec:	b082      	sub	sp, #8
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f7ff ffa2 	bl	800273c <SysTick_Config>
 80027f8:	4603      	mov	r3, r0
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3708      	adds	r7, #8
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
	...

08002804 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b086      	sub	sp, #24
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800280c:	2300      	movs	r3, #0
 800280e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002810:	f7ff feda 	bl	80025c8 <HAL_GetTick>
 8002814:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d101      	bne.n	8002820 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e099      	b.n	8002954 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2202      	movs	r2, #2
 8002824:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2200      	movs	r2, #0
 800282c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f022 0201 	bic.w	r2, r2, #1
 800283e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002840:	e00f      	b.n	8002862 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002842:	f7ff fec1 	bl	80025c8 <HAL_GetTick>
 8002846:	4602      	mov	r2, r0
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	2b05      	cmp	r3, #5
 800284e:	d908      	bls.n	8002862 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2220      	movs	r2, #32
 8002854:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2203      	movs	r2, #3
 800285a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	e078      	b.n	8002954 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0301 	and.w	r3, r3, #1
 800286c:	2b00      	cmp	r3, #0
 800286e:	d1e8      	bne.n	8002842 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002878:	697a      	ldr	r2, [r7, #20]
 800287a:	4b38      	ldr	r3, [pc, #224]	; (800295c <HAL_DMA_Init+0x158>)
 800287c:	4013      	ands	r3, r2
 800287e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	685a      	ldr	r2, [r3, #4]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800288e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	691b      	ldr	r3, [r3, #16]
 8002894:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800289a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	699b      	ldr	r3, [r3, #24]
 80028a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6a1b      	ldr	r3, [r3, #32]
 80028ac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028ae:	697a      	ldr	r2, [r7, #20]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b8:	2b04      	cmp	r3, #4
 80028ba:	d107      	bne.n	80028cc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c4:	4313      	orrs	r3, r2
 80028c6:	697a      	ldr	r2, [r7, #20]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	697a      	ldr	r2, [r7, #20]
 80028d2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	695b      	ldr	r3, [r3, #20]
 80028da:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	f023 0307 	bic.w	r3, r3, #7
 80028e2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e8:	697a      	ldr	r2, [r7, #20]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f2:	2b04      	cmp	r3, #4
 80028f4:	d117      	bne.n	8002926 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028fa:	697a      	ldr	r2, [r7, #20]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002904:	2b00      	cmp	r3, #0
 8002906:	d00e      	beq.n	8002926 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f000 fa91 	bl	8002e30 <DMA_CheckFifoParam>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d008      	beq.n	8002926 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2240      	movs	r2, #64	; 0x40
 8002918:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2201      	movs	r2, #1
 800291e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002922:	2301      	movs	r3, #1
 8002924:	e016      	b.n	8002954 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	697a      	ldr	r2, [r7, #20]
 800292c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f000 fa48 	bl	8002dc4 <DMA_CalcBaseAndBitshift>
 8002934:	4603      	mov	r3, r0
 8002936:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800293c:	223f      	movs	r2, #63	; 0x3f
 800293e:	409a      	lsls	r2, r3
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2200      	movs	r2, #0
 8002948:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2201      	movs	r2, #1
 800294e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002952:	2300      	movs	r3, #0
}
 8002954:	4618      	mov	r0, r3
 8002956:	3718      	adds	r7, #24
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}
 800295c:	f010803f 	.word	0xf010803f

08002960 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b086      	sub	sp, #24
 8002964:	af00      	add	r7, sp, #0
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	60b9      	str	r1, [r7, #8]
 800296a:	607a      	str	r2, [r7, #4]
 800296c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800296e:	2300      	movs	r3, #0
 8002970:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002976:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800297e:	2b01      	cmp	r3, #1
 8002980:	d101      	bne.n	8002986 <HAL_DMA_Start_IT+0x26>
 8002982:	2302      	movs	r3, #2
 8002984:	e040      	b.n	8002a08 <HAL_DMA_Start_IT+0xa8>
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2201      	movs	r2, #1
 800298a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002994:	b2db      	uxtb	r3, r3
 8002996:	2b01      	cmp	r3, #1
 8002998:	d12f      	bne.n	80029fa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2202      	movs	r2, #2
 800299e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2200      	movs	r2, #0
 80029a6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	68b9      	ldr	r1, [r7, #8]
 80029ae:	68f8      	ldr	r0, [r7, #12]
 80029b0:	f000 f9da 	bl	8002d68 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029b8:	223f      	movs	r2, #63	; 0x3f
 80029ba:	409a      	lsls	r2, r3
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f042 0216 	orr.w	r2, r2, #22
 80029ce:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d007      	beq.n	80029e8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f042 0208 	orr.w	r2, r2, #8
 80029e6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f042 0201 	orr.w	r2, r2, #1
 80029f6:	601a      	str	r2, [r3, #0]
 80029f8:	e005      	b.n	8002a06 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002a02:	2302      	movs	r3, #2
 8002a04:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002a06:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3718      	adds	r7, #24
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d004      	beq.n	8002a2e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2280      	movs	r2, #128	; 0x80
 8002a28:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e00c      	b.n	8002a48 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2205      	movs	r2, #5
 8002a32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f022 0201 	bic.w	r2, r2, #1
 8002a44:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002a46:	2300      	movs	r3, #0
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	370c      	adds	r7, #12
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr

08002a54 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b086      	sub	sp, #24
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002a60:	4b92      	ldr	r3, [pc, #584]	; (8002cac <HAL_DMA_IRQHandler+0x258>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a92      	ldr	r2, [pc, #584]	; (8002cb0 <HAL_DMA_IRQHandler+0x25c>)
 8002a66:	fba2 2303 	umull	r2, r3, r2, r3
 8002a6a:	0a9b      	lsrs	r3, r3, #10
 8002a6c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a72:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a7e:	2208      	movs	r2, #8
 8002a80:	409a      	lsls	r2, r3
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	4013      	ands	r3, r2
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d01a      	beq.n	8002ac0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0304 	and.w	r3, r3, #4
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d013      	beq.n	8002ac0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f022 0204 	bic.w	r2, r2, #4
 8002aa6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aac:	2208      	movs	r2, #8
 8002aae:	409a      	lsls	r2, r3
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ab8:	f043 0201 	orr.w	r2, r3, #1
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	409a      	lsls	r2, r3
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	4013      	ands	r3, r2
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d012      	beq.n	8002af6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	695b      	ldr	r3, [r3, #20]
 8002ad6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d00b      	beq.n	8002af6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	409a      	lsls	r2, r3
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aee:	f043 0202 	orr.w	r2, r3, #2
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002afa:	2204      	movs	r2, #4
 8002afc:	409a      	lsls	r2, r3
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	4013      	ands	r3, r2
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d012      	beq.n	8002b2c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0302 	and.w	r3, r3, #2
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d00b      	beq.n	8002b2c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b18:	2204      	movs	r2, #4
 8002b1a:	409a      	lsls	r2, r3
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b24:	f043 0204 	orr.w	r2, r3, #4
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b30:	2210      	movs	r2, #16
 8002b32:	409a      	lsls	r2, r3
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	4013      	ands	r3, r2
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d043      	beq.n	8002bc4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0308 	and.w	r3, r3, #8
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d03c      	beq.n	8002bc4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b4e:	2210      	movs	r2, #16
 8002b50:	409a      	lsls	r2, r3
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d018      	beq.n	8002b96 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d108      	bne.n	8002b84 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d024      	beq.n	8002bc4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	4798      	blx	r3
 8002b82:	e01f      	b.n	8002bc4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d01b      	beq.n	8002bc4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	4798      	blx	r3
 8002b94:	e016      	b.n	8002bc4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d107      	bne.n	8002bb4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f022 0208 	bic.w	r2, r2, #8
 8002bb2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d003      	beq.n	8002bc4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bc8:	2220      	movs	r2, #32
 8002bca:	409a      	lsls	r2, r3
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	4013      	ands	r3, r2
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	f000 808e 	beq.w	8002cf2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0310 	and.w	r3, r3, #16
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	f000 8086 	beq.w	8002cf2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bea:	2220      	movs	r2, #32
 8002bec:	409a      	lsls	r2, r3
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	2b05      	cmp	r3, #5
 8002bfc:	d136      	bne.n	8002c6c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f022 0216 	bic.w	r2, r2, #22
 8002c0c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	695a      	ldr	r2, [r3, #20]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c1c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d103      	bne.n	8002c2e <HAL_DMA_IRQHandler+0x1da>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d007      	beq.n	8002c3e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f022 0208 	bic.w	r2, r2, #8
 8002c3c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c42:	223f      	movs	r2, #63	; 0x3f
 8002c44:	409a      	lsls	r2, r3
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2200      	movs	r2, #0
 8002c56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d07d      	beq.n	8002d5e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	4798      	blx	r3
        }
        return;
 8002c6a:	e078      	b.n	8002d5e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d01c      	beq.n	8002cb4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d108      	bne.n	8002c9a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d030      	beq.n	8002cf2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	4798      	blx	r3
 8002c98:	e02b      	b.n	8002cf2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d027      	beq.n	8002cf2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	4798      	blx	r3
 8002caa:	e022      	b.n	8002cf2 <HAL_DMA_IRQHandler+0x29e>
 8002cac:	200006f0 	.word	0x200006f0
 8002cb0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d10f      	bne.n	8002ce2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f022 0210 	bic.w	r2, r2, #16
 8002cd0:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d003      	beq.n	8002cf2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d032      	beq.n	8002d60 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cfe:	f003 0301 	and.w	r3, r3, #1
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d022      	beq.n	8002d4c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2205      	movs	r2, #5
 8002d0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f022 0201 	bic.w	r2, r2, #1
 8002d1c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	3301      	adds	r3, #1
 8002d22:	60bb      	str	r3, [r7, #8]
 8002d24:	697a      	ldr	r2, [r7, #20]
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d307      	bcc.n	8002d3a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0301 	and.w	r3, r3, #1
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d1f2      	bne.n	8002d1e <HAL_DMA_IRQHandler+0x2ca>
 8002d38:	e000      	b.n	8002d3c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002d3a:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2201      	movs	r2, #1
 8002d40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2200      	movs	r2, #0
 8002d48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d005      	beq.n	8002d60 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	4798      	blx	r3
 8002d5c:	e000      	b.n	8002d60 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002d5e:	bf00      	nop
    }
  }
}
 8002d60:	3718      	adds	r7, #24
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop

08002d68 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b085      	sub	sp, #20
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	60f8      	str	r0, [r7, #12]
 8002d70:	60b9      	str	r1, [r7, #8]
 8002d72:	607a      	str	r2, [r7, #4]
 8002d74:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002d84:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	683a      	ldr	r2, [r7, #0]
 8002d8c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	2b40      	cmp	r3, #64	; 0x40
 8002d94:	d108      	bne.n	8002da8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	68ba      	ldr	r2, [r7, #8]
 8002da4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002da6:	e007      	b.n	8002db8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	68ba      	ldr	r2, [r7, #8]
 8002dae:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	60da      	str	r2, [r3, #12]
}
 8002db8:	bf00      	nop
 8002dba:	3714      	adds	r7, #20
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr

08002dc4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b085      	sub	sp, #20
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	3b10      	subs	r3, #16
 8002dd4:	4a14      	ldr	r2, [pc, #80]	; (8002e28 <DMA_CalcBaseAndBitshift+0x64>)
 8002dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002dda:	091b      	lsrs	r3, r3, #4
 8002ddc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002dde:	4a13      	ldr	r2, [pc, #76]	; (8002e2c <DMA_CalcBaseAndBitshift+0x68>)
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	4413      	add	r3, r2
 8002de4:	781b      	ldrb	r3, [r3, #0]
 8002de6:	461a      	mov	r2, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2b03      	cmp	r3, #3
 8002df0:	d909      	bls.n	8002e06 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002dfa:	f023 0303 	bic.w	r3, r3, #3
 8002dfe:	1d1a      	adds	r2, r3, #4
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	659a      	str	r2, [r3, #88]	; 0x58
 8002e04:	e007      	b.n	8002e16 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002e0e:	f023 0303 	bic.w	r3, r3, #3
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3714      	adds	r7, #20
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr
 8002e26:	bf00      	nop
 8002e28:	aaaaaaab 	.word	0xaaaaaaab
 8002e2c:	08006570 	.word	0x08006570

08002e30 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b085      	sub	sp, #20
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e40:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	699b      	ldr	r3, [r3, #24]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d11f      	bne.n	8002e8a <DMA_CheckFifoParam+0x5a>
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	2b03      	cmp	r3, #3
 8002e4e:	d856      	bhi.n	8002efe <DMA_CheckFifoParam+0xce>
 8002e50:	a201      	add	r2, pc, #4	; (adr r2, 8002e58 <DMA_CheckFifoParam+0x28>)
 8002e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e56:	bf00      	nop
 8002e58:	08002e69 	.word	0x08002e69
 8002e5c:	08002e7b 	.word	0x08002e7b
 8002e60:	08002e69 	.word	0x08002e69
 8002e64:	08002eff 	.word	0x08002eff
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d046      	beq.n	8002f02 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e78:	e043      	b.n	8002f02 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e7e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002e82:	d140      	bne.n	8002f06 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e88:	e03d      	b.n	8002f06 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	699b      	ldr	r3, [r3, #24]
 8002e8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e92:	d121      	bne.n	8002ed8 <DMA_CheckFifoParam+0xa8>
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	2b03      	cmp	r3, #3
 8002e98:	d837      	bhi.n	8002f0a <DMA_CheckFifoParam+0xda>
 8002e9a:	a201      	add	r2, pc, #4	; (adr r2, 8002ea0 <DMA_CheckFifoParam+0x70>)
 8002e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ea0:	08002eb1 	.word	0x08002eb1
 8002ea4:	08002eb7 	.word	0x08002eb7
 8002ea8:	08002eb1 	.word	0x08002eb1
 8002eac:	08002ec9 	.word	0x08002ec9
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	73fb      	strb	r3, [r7, #15]
      break;
 8002eb4:	e030      	b.n	8002f18 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d025      	beq.n	8002f0e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ec6:	e022      	b.n	8002f0e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ecc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ed0:	d11f      	bne.n	8002f12 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002ed6:	e01c      	b.n	8002f12 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d903      	bls.n	8002ee6 <DMA_CheckFifoParam+0xb6>
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	2b03      	cmp	r3, #3
 8002ee2:	d003      	beq.n	8002eec <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002ee4:	e018      	b.n	8002f18 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	73fb      	strb	r3, [r7, #15]
      break;
 8002eea:	e015      	b.n	8002f18 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d00e      	beq.n	8002f16 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	73fb      	strb	r3, [r7, #15]
      break;
 8002efc:	e00b      	b.n	8002f16 <DMA_CheckFifoParam+0xe6>
      break;
 8002efe:	bf00      	nop
 8002f00:	e00a      	b.n	8002f18 <DMA_CheckFifoParam+0xe8>
      break;
 8002f02:	bf00      	nop
 8002f04:	e008      	b.n	8002f18 <DMA_CheckFifoParam+0xe8>
      break;
 8002f06:	bf00      	nop
 8002f08:	e006      	b.n	8002f18 <DMA_CheckFifoParam+0xe8>
      break;
 8002f0a:	bf00      	nop
 8002f0c:	e004      	b.n	8002f18 <DMA_CheckFifoParam+0xe8>
      break;
 8002f0e:	bf00      	nop
 8002f10:	e002      	b.n	8002f18 <DMA_CheckFifoParam+0xe8>
      break;   
 8002f12:	bf00      	nop
 8002f14:	e000      	b.n	8002f18 <DMA_CheckFifoParam+0xe8>
      break;
 8002f16:	bf00      	nop
    }
  } 
  
  return status; 
 8002f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3714      	adds	r7, #20
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop

08002f28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b089      	sub	sp, #36	; 0x24
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f32:	2300      	movs	r3, #0
 8002f34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f36:	2300      	movs	r3, #0
 8002f38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f3e:	2300      	movs	r3, #0
 8002f40:	61fb      	str	r3, [r7, #28]
 8002f42:	e177      	b.n	8003234 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f44:	2201      	movs	r2, #1
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	697a      	ldr	r2, [r7, #20]
 8002f54:	4013      	ands	r3, r2
 8002f56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f58:	693a      	ldr	r2, [r7, #16]
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	f040 8166 	bne.w	800322e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f003 0303 	and.w	r3, r3, #3
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d005      	beq.n	8002f7a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d130      	bne.n	8002fdc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f80:	69fb      	ldr	r3, [r7, #28]
 8002f82:	005b      	lsls	r3, r3, #1
 8002f84:	2203      	movs	r2, #3
 8002f86:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8a:	43db      	mvns	r3, r3
 8002f8c:	69ba      	ldr	r2, [r7, #24]
 8002f8e:	4013      	ands	r3, r2
 8002f90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	68da      	ldr	r2, [r3, #12]
 8002f96:	69fb      	ldr	r3, [r7, #28]
 8002f98:	005b      	lsls	r3, r3, #1
 8002f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9e:	69ba      	ldr	r2, [r7, #24]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	69ba      	ldr	r2, [r7, #24]
 8002fa8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb8:	43db      	mvns	r3, r3
 8002fba:	69ba      	ldr	r2, [r7, #24]
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	091b      	lsrs	r3, r3, #4
 8002fc6:	f003 0201 	and.w	r2, r3, #1
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd0:	69ba      	ldr	r2, [r7, #24]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	69ba      	ldr	r2, [r7, #24]
 8002fda:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	f003 0303 	and.w	r3, r3, #3
 8002fe4:	2b03      	cmp	r3, #3
 8002fe6:	d017      	beq.n	8003018 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	005b      	lsls	r3, r3, #1
 8002ff2:	2203      	movs	r2, #3
 8002ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff8:	43db      	mvns	r3, r3
 8002ffa:	69ba      	ldr	r2, [r7, #24]
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	689a      	ldr	r2, [r3, #8]
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	005b      	lsls	r3, r3, #1
 8003008:	fa02 f303 	lsl.w	r3, r2, r3
 800300c:	69ba      	ldr	r2, [r7, #24]
 800300e:	4313      	orrs	r3, r2
 8003010:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	69ba      	ldr	r2, [r7, #24]
 8003016:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	f003 0303 	and.w	r3, r3, #3
 8003020:	2b02      	cmp	r3, #2
 8003022:	d123      	bne.n	800306c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	08da      	lsrs	r2, r3, #3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	3208      	adds	r2, #8
 800302c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003030:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	f003 0307 	and.w	r3, r3, #7
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	220f      	movs	r2, #15
 800303c:	fa02 f303 	lsl.w	r3, r2, r3
 8003040:	43db      	mvns	r3, r3
 8003042:	69ba      	ldr	r2, [r7, #24]
 8003044:	4013      	ands	r3, r2
 8003046:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	691a      	ldr	r2, [r3, #16]
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	f003 0307 	and.w	r3, r3, #7
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	fa02 f303 	lsl.w	r3, r2, r3
 8003058:	69ba      	ldr	r2, [r7, #24]
 800305a:	4313      	orrs	r3, r2
 800305c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	08da      	lsrs	r2, r3, #3
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	3208      	adds	r2, #8
 8003066:	69b9      	ldr	r1, [r7, #24]
 8003068:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	005b      	lsls	r3, r3, #1
 8003076:	2203      	movs	r2, #3
 8003078:	fa02 f303 	lsl.w	r3, r2, r3
 800307c:	43db      	mvns	r3, r3
 800307e:	69ba      	ldr	r2, [r7, #24]
 8003080:	4013      	ands	r3, r2
 8003082:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f003 0203 	and.w	r2, r3, #3
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	005b      	lsls	r3, r3, #1
 8003090:	fa02 f303 	lsl.w	r3, r2, r3
 8003094:	69ba      	ldr	r2, [r7, #24]
 8003096:	4313      	orrs	r3, r2
 8003098:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	69ba      	ldr	r2, [r7, #24]
 800309e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	f000 80c0 	beq.w	800322e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030ae:	2300      	movs	r3, #0
 80030b0:	60fb      	str	r3, [r7, #12]
 80030b2:	4b66      	ldr	r3, [pc, #408]	; (800324c <HAL_GPIO_Init+0x324>)
 80030b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030b6:	4a65      	ldr	r2, [pc, #404]	; (800324c <HAL_GPIO_Init+0x324>)
 80030b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030bc:	6453      	str	r3, [r2, #68]	; 0x44
 80030be:	4b63      	ldr	r3, [pc, #396]	; (800324c <HAL_GPIO_Init+0x324>)
 80030c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030c6:	60fb      	str	r3, [r7, #12]
 80030c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030ca:	4a61      	ldr	r2, [pc, #388]	; (8003250 <HAL_GPIO_Init+0x328>)
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	089b      	lsrs	r3, r3, #2
 80030d0:	3302      	adds	r3, #2
 80030d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	f003 0303 	and.w	r3, r3, #3
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	220f      	movs	r2, #15
 80030e2:	fa02 f303 	lsl.w	r3, r2, r3
 80030e6:	43db      	mvns	r3, r3
 80030e8:	69ba      	ldr	r2, [r7, #24]
 80030ea:	4013      	ands	r3, r2
 80030ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4a58      	ldr	r2, [pc, #352]	; (8003254 <HAL_GPIO_Init+0x32c>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d037      	beq.n	8003166 <HAL_GPIO_Init+0x23e>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a57      	ldr	r2, [pc, #348]	; (8003258 <HAL_GPIO_Init+0x330>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d031      	beq.n	8003162 <HAL_GPIO_Init+0x23a>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4a56      	ldr	r2, [pc, #344]	; (800325c <HAL_GPIO_Init+0x334>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d02b      	beq.n	800315e <HAL_GPIO_Init+0x236>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a55      	ldr	r2, [pc, #340]	; (8003260 <HAL_GPIO_Init+0x338>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d025      	beq.n	800315a <HAL_GPIO_Init+0x232>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4a54      	ldr	r2, [pc, #336]	; (8003264 <HAL_GPIO_Init+0x33c>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d01f      	beq.n	8003156 <HAL_GPIO_Init+0x22e>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4a53      	ldr	r2, [pc, #332]	; (8003268 <HAL_GPIO_Init+0x340>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d019      	beq.n	8003152 <HAL_GPIO_Init+0x22a>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a52      	ldr	r2, [pc, #328]	; (800326c <HAL_GPIO_Init+0x344>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d013      	beq.n	800314e <HAL_GPIO_Init+0x226>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a51      	ldr	r2, [pc, #324]	; (8003270 <HAL_GPIO_Init+0x348>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d00d      	beq.n	800314a <HAL_GPIO_Init+0x222>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a50      	ldr	r2, [pc, #320]	; (8003274 <HAL_GPIO_Init+0x34c>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d007      	beq.n	8003146 <HAL_GPIO_Init+0x21e>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a4f      	ldr	r2, [pc, #316]	; (8003278 <HAL_GPIO_Init+0x350>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d101      	bne.n	8003142 <HAL_GPIO_Init+0x21a>
 800313e:	2309      	movs	r3, #9
 8003140:	e012      	b.n	8003168 <HAL_GPIO_Init+0x240>
 8003142:	230a      	movs	r3, #10
 8003144:	e010      	b.n	8003168 <HAL_GPIO_Init+0x240>
 8003146:	2308      	movs	r3, #8
 8003148:	e00e      	b.n	8003168 <HAL_GPIO_Init+0x240>
 800314a:	2307      	movs	r3, #7
 800314c:	e00c      	b.n	8003168 <HAL_GPIO_Init+0x240>
 800314e:	2306      	movs	r3, #6
 8003150:	e00a      	b.n	8003168 <HAL_GPIO_Init+0x240>
 8003152:	2305      	movs	r3, #5
 8003154:	e008      	b.n	8003168 <HAL_GPIO_Init+0x240>
 8003156:	2304      	movs	r3, #4
 8003158:	e006      	b.n	8003168 <HAL_GPIO_Init+0x240>
 800315a:	2303      	movs	r3, #3
 800315c:	e004      	b.n	8003168 <HAL_GPIO_Init+0x240>
 800315e:	2302      	movs	r3, #2
 8003160:	e002      	b.n	8003168 <HAL_GPIO_Init+0x240>
 8003162:	2301      	movs	r3, #1
 8003164:	e000      	b.n	8003168 <HAL_GPIO_Init+0x240>
 8003166:	2300      	movs	r3, #0
 8003168:	69fa      	ldr	r2, [r7, #28]
 800316a:	f002 0203 	and.w	r2, r2, #3
 800316e:	0092      	lsls	r2, r2, #2
 8003170:	4093      	lsls	r3, r2
 8003172:	69ba      	ldr	r2, [r7, #24]
 8003174:	4313      	orrs	r3, r2
 8003176:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003178:	4935      	ldr	r1, [pc, #212]	; (8003250 <HAL_GPIO_Init+0x328>)
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	089b      	lsrs	r3, r3, #2
 800317e:	3302      	adds	r3, #2
 8003180:	69ba      	ldr	r2, [r7, #24]
 8003182:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003186:	4b3d      	ldr	r3, [pc, #244]	; (800327c <HAL_GPIO_Init+0x354>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	43db      	mvns	r3, r3
 8003190:	69ba      	ldr	r2, [r7, #24]
 8003192:	4013      	ands	r3, r2
 8003194:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d003      	beq.n	80031aa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80031a2:	69ba      	ldr	r2, [r7, #24]
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031aa:	4a34      	ldr	r2, [pc, #208]	; (800327c <HAL_GPIO_Init+0x354>)
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80031b0:	4b32      	ldr	r3, [pc, #200]	; (800327c <HAL_GPIO_Init+0x354>)
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	43db      	mvns	r3, r3
 80031ba:	69ba      	ldr	r2, [r7, #24]
 80031bc:	4013      	ands	r3, r2
 80031be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d003      	beq.n	80031d4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80031cc:	69ba      	ldr	r2, [r7, #24]
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031d4:	4a29      	ldr	r2, [pc, #164]	; (800327c <HAL_GPIO_Init+0x354>)
 80031d6:	69bb      	ldr	r3, [r7, #24]
 80031d8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031da:	4b28      	ldr	r3, [pc, #160]	; (800327c <HAL_GPIO_Init+0x354>)
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	43db      	mvns	r3, r3
 80031e4:	69ba      	ldr	r2, [r7, #24]
 80031e6:	4013      	ands	r3, r2
 80031e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d003      	beq.n	80031fe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80031f6:	69ba      	ldr	r2, [r7, #24]
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80031fe:	4a1f      	ldr	r2, [pc, #124]	; (800327c <HAL_GPIO_Init+0x354>)
 8003200:	69bb      	ldr	r3, [r7, #24]
 8003202:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003204:	4b1d      	ldr	r3, [pc, #116]	; (800327c <HAL_GPIO_Init+0x354>)
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	43db      	mvns	r3, r3
 800320e:	69ba      	ldr	r2, [r7, #24]
 8003210:	4013      	ands	r3, r2
 8003212:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800321c:	2b00      	cmp	r3, #0
 800321e:	d003      	beq.n	8003228 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003220:	69ba      	ldr	r2, [r7, #24]
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	4313      	orrs	r3, r2
 8003226:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003228:	4a14      	ldr	r2, [pc, #80]	; (800327c <HAL_GPIO_Init+0x354>)
 800322a:	69bb      	ldr	r3, [r7, #24]
 800322c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	3301      	adds	r3, #1
 8003232:	61fb      	str	r3, [r7, #28]
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	2b0f      	cmp	r3, #15
 8003238:	f67f ae84 	bls.w	8002f44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800323c:	bf00      	nop
 800323e:	bf00      	nop
 8003240:	3724      	adds	r7, #36	; 0x24
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr
 800324a:	bf00      	nop
 800324c:	40023800 	.word	0x40023800
 8003250:	40013800 	.word	0x40013800
 8003254:	40020000 	.word	0x40020000
 8003258:	40020400 	.word	0x40020400
 800325c:	40020800 	.word	0x40020800
 8003260:	40020c00 	.word	0x40020c00
 8003264:	40021000 	.word	0x40021000
 8003268:	40021400 	.word	0x40021400
 800326c:	40021800 	.word	0x40021800
 8003270:	40021c00 	.word	0x40021c00
 8003274:	40022000 	.word	0x40022000
 8003278:	40022400 	.word	0x40022400
 800327c:	40013c00 	.word	0x40013c00

08003280 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	460b      	mov	r3, r1
 800328a:	807b      	strh	r3, [r7, #2]
 800328c:	4613      	mov	r3, r2
 800328e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003290:	787b      	ldrb	r3, [r7, #1]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d003      	beq.n	800329e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003296:	887a      	ldrh	r2, [r7, #2]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800329c:	e003      	b.n	80032a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800329e:	887b      	ldrh	r3, [r7, #2]
 80032a0:	041a      	lsls	r2, r3, #16
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	619a      	str	r2, [r3, #24]
}
 80032a6:	bf00      	nop
 80032a8:	370c      	adds	r7, #12
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr
	...

080032b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b084      	sub	sp, #16
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d101      	bne.n	80032c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e12b      	b.n	800351e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d106      	bne.n	80032e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2200      	movs	r2, #0
 80032d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f7fe fdb6 	bl	8001e4c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2224      	movs	r2, #36	; 0x24
 80032e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f022 0201 	bic.w	r2, r2, #1
 80032f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003306:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003316:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003318:	f000 fe28 	bl	8003f6c <HAL_RCC_GetPCLK1Freq>
 800331c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	4a81      	ldr	r2, [pc, #516]	; (8003528 <HAL_I2C_Init+0x274>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d807      	bhi.n	8003338 <HAL_I2C_Init+0x84>
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	4a80      	ldr	r2, [pc, #512]	; (800352c <HAL_I2C_Init+0x278>)
 800332c:	4293      	cmp	r3, r2
 800332e:	bf94      	ite	ls
 8003330:	2301      	movls	r3, #1
 8003332:	2300      	movhi	r3, #0
 8003334:	b2db      	uxtb	r3, r3
 8003336:	e006      	b.n	8003346 <HAL_I2C_Init+0x92>
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	4a7d      	ldr	r2, [pc, #500]	; (8003530 <HAL_I2C_Init+0x27c>)
 800333c:	4293      	cmp	r3, r2
 800333e:	bf94      	ite	ls
 8003340:	2301      	movls	r3, #1
 8003342:	2300      	movhi	r3, #0
 8003344:	b2db      	uxtb	r3, r3
 8003346:	2b00      	cmp	r3, #0
 8003348:	d001      	beq.n	800334e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e0e7      	b.n	800351e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	4a78      	ldr	r2, [pc, #480]	; (8003534 <HAL_I2C_Init+0x280>)
 8003352:	fba2 2303 	umull	r2, r3, r2, r3
 8003356:	0c9b      	lsrs	r3, r3, #18
 8003358:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	68ba      	ldr	r2, [r7, #8]
 800336a:	430a      	orrs	r2, r1
 800336c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	6a1b      	ldr	r3, [r3, #32]
 8003374:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	4a6a      	ldr	r2, [pc, #424]	; (8003528 <HAL_I2C_Init+0x274>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d802      	bhi.n	8003388 <HAL_I2C_Init+0xd4>
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	3301      	adds	r3, #1
 8003386:	e009      	b.n	800339c <HAL_I2C_Init+0xe8>
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800338e:	fb02 f303 	mul.w	r3, r2, r3
 8003392:	4a69      	ldr	r2, [pc, #420]	; (8003538 <HAL_I2C_Init+0x284>)
 8003394:	fba2 2303 	umull	r2, r3, r2, r3
 8003398:	099b      	lsrs	r3, r3, #6
 800339a:	3301      	adds	r3, #1
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	6812      	ldr	r2, [r2, #0]
 80033a0:	430b      	orrs	r3, r1
 80033a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	69db      	ldr	r3, [r3, #28]
 80033aa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80033ae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	495c      	ldr	r1, [pc, #368]	; (8003528 <HAL_I2C_Init+0x274>)
 80033b8:	428b      	cmp	r3, r1
 80033ba:	d819      	bhi.n	80033f0 <HAL_I2C_Init+0x13c>
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	1e59      	subs	r1, r3, #1
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	005b      	lsls	r3, r3, #1
 80033c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80033ca:	1c59      	adds	r1, r3, #1
 80033cc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80033d0:	400b      	ands	r3, r1
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d00a      	beq.n	80033ec <HAL_I2C_Init+0x138>
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	1e59      	subs	r1, r3, #1
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	005b      	lsls	r3, r3, #1
 80033e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80033e4:	3301      	adds	r3, #1
 80033e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033ea:	e051      	b.n	8003490 <HAL_I2C_Init+0x1dc>
 80033ec:	2304      	movs	r3, #4
 80033ee:	e04f      	b.n	8003490 <HAL_I2C_Init+0x1dc>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d111      	bne.n	800341c <HAL_I2C_Init+0x168>
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	1e58      	subs	r0, r3, #1
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6859      	ldr	r1, [r3, #4]
 8003400:	460b      	mov	r3, r1
 8003402:	005b      	lsls	r3, r3, #1
 8003404:	440b      	add	r3, r1
 8003406:	fbb0 f3f3 	udiv	r3, r0, r3
 800340a:	3301      	adds	r3, #1
 800340c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003410:	2b00      	cmp	r3, #0
 8003412:	bf0c      	ite	eq
 8003414:	2301      	moveq	r3, #1
 8003416:	2300      	movne	r3, #0
 8003418:	b2db      	uxtb	r3, r3
 800341a:	e012      	b.n	8003442 <HAL_I2C_Init+0x18e>
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	1e58      	subs	r0, r3, #1
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6859      	ldr	r1, [r3, #4]
 8003424:	460b      	mov	r3, r1
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	440b      	add	r3, r1
 800342a:	0099      	lsls	r1, r3, #2
 800342c:	440b      	add	r3, r1
 800342e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003432:	3301      	adds	r3, #1
 8003434:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003438:	2b00      	cmp	r3, #0
 800343a:	bf0c      	ite	eq
 800343c:	2301      	moveq	r3, #1
 800343e:	2300      	movne	r3, #0
 8003440:	b2db      	uxtb	r3, r3
 8003442:	2b00      	cmp	r3, #0
 8003444:	d001      	beq.n	800344a <HAL_I2C_Init+0x196>
 8003446:	2301      	movs	r3, #1
 8003448:	e022      	b.n	8003490 <HAL_I2C_Init+0x1dc>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d10e      	bne.n	8003470 <HAL_I2C_Init+0x1bc>
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	1e58      	subs	r0, r3, #1
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6859      	ldr	r1, [r3, #4]
 800345a:	460b      	mov	r3, r1
 800345c:	005b      	lsls	r3, r3, #1
 800345e:	440b      	add	r3, r1
 8003460:	fbb0 f3f3 	udiv	r3, r0, r3
 8003464:	3301      	adds	r3, #1
 8003466:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800346a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800346e:	e00f      	b.n	8003490 <HAL_I2C_Init+0x1dc>
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	1e58      	subs	r0, r3, #1
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6859      	ldr	r1, [r3, #4]
 8003478:	460b      	mov	r3, r1
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	440b      	add	r3, r1
 800347e:	0099      	lsls	r1, r3, #2
 8003480:	440b      	add	r3, r1
 8003482:	fbb0 f3f3 	udiv	r3, r0, r3
 8003486:	3301      	adds	r3, #1
 8003488:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800348c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003490:	6879      	ldr	r1, [r7, #4]
 8003492:	6809      	ldr	r1, [r1, #0]
 8003494:	4313      	orrs	r3, r2
 8003496:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	69da      	ldr	r2, [r3, #28]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a1b      	ldr	r3, [r3, #32]
 80034aa:	431a      	orrs	r2, r3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	430a      	orrs	r2, r1
 80034b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80034be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	6911      	ldr	r1, [r2, #16]
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	68d2      	ldr	r2, [r2, #12]
 80034ca:	4311      	orrs	r1, r2
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	6812      	ldr	r2, [r2, #0]
 80034d0:	430b      	orrs	r3, r1
 80034d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	695a      	ldr	r2, [r3, #20]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	699b      	ldr	r3, [r3, #24]
 80034e6:	431a      	orrs	r2, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	430a      	orrs	r2, r1
 80034ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f042 0201 	orr.w	r2, r2, #1
 80034fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2220      	movs	r2, #32
 800350a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	3710      	adds	r7, #16
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	000186a0 	.word	0x000186a0
 800352c:	001e847f 	.word	0x001e847f
 8003530:	003d08ff 	.word	0x003d08ff
 8003534:	431bde83 	.word	0x431bde83
 8003538:	10624dd3 	.word	0x10624dd3

0800353c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800353c:	b480      	push	{r7}
 800353e:	b083      	sub	sp, #12
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800354c:	b2db      	uxtb	r3, r3
 800354e:	2b20      	cmp	r3, #32
 8003550:	d129      	bne.n	80035a6 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2224      	movs	r2, #36	; 0x24
 8003556:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f022 0201 	bic.w	r2, r2, #1
 8003568:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f022 0210 	bic.w	r2, r2, #16
 8003578:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	683a      	ldr	r2, [r7, #0]
 8003586:	430a      	orrs	r2, r1
 8003588:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f042 0201 	orr.w	r2, r2, #1
 8003598:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2220      	movs	r2, #32
 800359e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80035a2:	2300      	movs	r3, #0
 80035a4:	e000      	b.n	80035a8 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80035a6:	2302      	movs	r3, #2
  }
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	370c      	adds	r7, #12
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr

080035b4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b085      	sub	sp, #20
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80035be:	2300      	movs	r3, #0
 80035c0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	2b20      	cmp	r3, #32
 80035cc:	d12a      	bne.n	8003624 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2224      	movs	r2, #36	; 0x24
 80035d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f022 0201 	bic.w	r2, r2, #1
 80035e4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ec:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80035ee:	89fb      	ldrh	r3, [r7, #14]
 80035f0:	f023 030f 	bic.w	r3, r3, #15
 80035f4:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	b29a      	uxth	r2, r3
 80035fa:	89fb      	ldrh	r3, [r7, #14]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	89fa      	ldrh	r2, [r7, #14]
 8003606:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f042 0201 	orr.w	r2, r2, #1
 8003616:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2220      	movs	r2, #32
 800361c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003620:	2300      	movs	r3, #0
 8003622:	e000      	b.n	8003626 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003624:	2302      	movs	r3, #2
  }
}
 8003626:	4618      	mov	r0, r3
 8003628:	3714      	adds	r7, #20
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr
	...

08003634 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b082      	sub	sp, #8
 8003638:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800363a:	2300      	movs	r3, #0
 800363c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800363e:	2300      	movs	r3, #0
 8003640:	603b      	str	r3, [r7, #0]
 8003642:	4b20      	ldr	r3, [pc, #128]	; (80036c4 <HAL_PWREx_EnableOverDrive+0x90>)
 8003644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003646:	4a1f      	ldr	r2, [pc, #124]	; (80036c4 <HAL_PWREx_EnableOverDrive+0x90>)
 8003648:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800364c:	6413      	str	r3, [r2, #64]	; 0x40
 800364e:	4b1d      	ldr	r3, [pc, #116]	; (80036c4 <HAL_PWREx_EnableOverDrive+0x90>)
 8003650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003652:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003656:	603b      	str	r3, [r7, #0]
 8003658:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800365a:	4b1b      	ldr	r3, [pc, #108]	; (80036c8 <HAL_PWREx_EnableOverDrive+0x94>)
 800365c:	2201      	movs	r2, #1
 800365e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003660:	f7fe ffb2 	bl	80025c8 <HAL_GetTick>
 8003664:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003666:	e009      	b.n	800367c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003668:	f7fe ffae 	bl	80025c8 <HAL_GetTick>
 800366c:	4602      	mov	r2, r0
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003676:	d901      	bls.n	800367c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003678:	2303      	movs	r3, #3
 800367a:	e01f      	b.n	80036bc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800367c:	4b13      	ldr	r3, [pc, #76]	; (80036cc <HAL_PWREx_EnableOverDrive+0x98>)
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003684:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003688:	d1ee      	bne.n	8003668 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800368a:	4b11      	ldr	r3, [pc, #68]	; (80036d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800368c:	2201      	movs	r2, #1
 800368e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003690:	f7fe ff9a 	bl	80025c8 <HAL_GetTick>
 8003694:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003696:	e009      	b.n	80036ac <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003698:	f7fe ff96 	bl	80025c8 <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80036a6:	d901      	bls.n	80036ac <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80036a8:	2303      	movs	r3, #3
 80036aa:	e007      	b.n	80036bc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80036ac:	4b07      	ldr	r3, [pc, #28]	; (80036cc <HAL_PWREx_EnableOverDrive+0x98>)
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80036b8:	d1ee      	bne.n	8003698 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80036ba:	2300      	movs	r3, #0
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3708      	adds	r7, #8
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	40023800 	.word	0x40023800
 80036c8:	420e0040 	.word	0x420e0040
 80036cc:	40007000 	.word	0x40007000
 80036d0:	420e0044 	.word	0x420e0044

080036d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b086      	sub	sp, #24
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d101      	bne.n	80036e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e264      	b.n	8003bb0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0301 	and.w	r3, r3, #1
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d075      	beq.n	80037de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80036f2:	4ba3      	ldr	r3, [pc, #652]	; (8003980 <HAL_RCC_OscConfig+0x2ac>)
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	f003 030c 	and.w	r3, r3, #12
 80036fa:	2b04      	cmp	r3, #4
 80036fc:	d00c      	beq.n	8003718 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036fe:	4ba0      	ldr	r3, [pc, #640]	; (8003980 <HAL_RCC_OscConfig+0x2ac>)
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003706:	2b08      	cmp	r3, #8
 8003708:	d112      	bne.n	8003730 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800370a:	4b9d      	ldr	r3, [pc, #628]	; (8003980 <HAL_RCC_OscConfig+0x2ac>)
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003712:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003716:	d10b      	bne.n	8003730 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003718:	4b99      	ldr	r3, [pc, #612]	; (8003980 <HAL_RCC_OscConfig+0x2ac>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003720:	2b00      	cmp	r3, #0
 8003722:	d05b      	beq.n	80037dc <HAL_RCC_OscConfig+0x108>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d157      	bne.n	80037dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e23f      	b.n	8003bb0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003738:	d106      	bne.n	8003748 <HAL_RCC_OscConfig+0x74>
 800373a:	4b91      	ldr	r3, [pc, #580]	; (8003980 <HAL_RCC_OscConfig+0x2ac>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a90      	ldr	r2, [pc, #576]	; (8003980 <HAL_RCC_OscConfig+0x2ac>)
 8003740:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003744:	6013      	str	r3, [r2, #0]
 8003746:	e01d      	b.n	8003784 <HAL_RCC_OscConfig+0xb0>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003750:	d10c      	bne.n	800376c <HAL_RCC_OscConfig+0x98>
 8003752:	4b8b      	ldr	r3, [pc, #556]	; (8003980 <HAL_RCC_OscConfig+0x2ac>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a8a      	ldr	r2, [pc, #552]	; (8003980 <HAL_RCC_OscConfig+0x2ac>)
 8003758:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800375c:	6013      	str	r3, [r2, #0]
 800375e:	4b88      	ldr	r3, [pc, #544]	; (8003980 <HAL_RCC_OscConfig+0x2ac>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a87      	ldr	r2, [pc, #540]	; (8003980 <HAL_RCC_OscConfig+0x2ac>)
 8003764:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003768:	6013      	str	r3, [r2, #0]
 800376a:	e00b      	b.n	8003784 <HAL_RCC_OscConfig+0xb0>
 800376c:	4b84      	ldr	r3, [pc, #528]	; (8003980 <HAL_RCC_OscConfig+0x2ac>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a83      	ldr	r2, [pc, #524]	; (8003980 <HAL_RCC_OscConfig+0x2ac>)
 8003772:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003776:	6013      	str	r3, [r2, #0]
 8003778:	4b81      	ldr	r3, [pc, #516]	; (8003980 <HAL_RCC_OscConfig+0x2ac>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a80      	ldr	r2, [pc, #512]	; (8003980 <HAL_RCC_OscConfig+0x2ac>)
 800377e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003782:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d013      	beq.n	80037b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800378c:	f7fe ff1c 	bl	80025c8 <HAL_GetTick>
 8003790:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003792:	e008      	b.n	80037a6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003794:	f7fe ff18 	bl	80025c8 <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	2b64      	cmp	r3, #100	; 0x64
 80037a0:	d901      	bls.n	80037a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e204      	b.n	8003bb0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037a6:	4b76      	ldr	r3, [pc, #472]	; (8003980 <HAL_RCC_OscConfig+0x2ac>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d0f0      	beq.n	8003794 <HAL_RCC_OscConfig+0xc0>
 80037b2:	e014      	b.n	80037de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037b4:	f7fe ff08 	bl	80025c8 <HAL_GetTick>
 80037b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037ba:	e008      	b.n	80037ce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037bc:	f7fe ff04 	bl	80025c8 <HAL_GetTick>
 80037c0:	4602      	mov	r2, r0
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	2b64      	cmp	r3, #100	; 0x64
 80037c8:	d901      	bls.n	80037ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80037ca:	2303      	movs	r3, #3
 80037cc:	e1f0      	b.n	8003bb0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037ce:	4b6c      	ldr	r3, [pc, #432]	; (8003980 <HAL_RCC_OscConfig+0x2ac>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d1f0      	bne.n	80037bc <HAL_RCC_OscConfig+0xe8>
 80037da:	e000      	b.n	80037de <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 0302 	and.w	r3, r3, #2
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d063      	beq.n	80038b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80037ea:	4b65      	ldr	r3, [pc, #404]	; (8003980 <HAL_RCC_OscConfig+0x2ac>)
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	f003 030c 	and.w	r3, r3, #12
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d00b      	beq.n	800380e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037f6:	4b62      	ldr	r3, [pc, #392]	; (8003980 <HAL_RCC_OscConfig+0x2ac>)
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80037fe:	2b08      	cmp	r3, #8
 8003800:	d11c      	bne.n	800383c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003802:	4b5f      	ldr	r3, [pc, #380]	; (8003980 <HAL_RCC_OscConfig+0x2ac>)
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800380a:	2b00      	cmp	r3, #0
 800380c:	d116      	bne.n	800383c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800380e:	4b5c      	ldr	r3, [pc, #368]	; (8003980 <HAL_RCC_OscConfig+0x2ac>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 0302 	and.w	r3, r3, #2
 8003816:	2b00      	cmp	r3, #0
 8003818:	d005      	beq.n	8003826 <HAL_RCC_OscConfig+0x152>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	68db      	ldr	r3, [r3, #12]
 800381e:	2b01      	cmp	r3, #1
 8003820:	d001      	beq.n	8003826 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e1c4      	b.n	8003bb0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003826:	4b56      	ldr	r3, [pc, #344]	; (8003980 <HAL_RCC_OscConfig+0x2ac>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	691b      	ldr	r3, [r3, #16]
 8003832:	00db      	lsls	r3, r3, #3
 8003834:	4952      	ldr	r1, [pc, #328]	; (8003980 <HAL_RCC_OscConfig+0x2ac>)
 8003836:	4313      	orrs	r3, r2
 8003838:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800383a:	e03a      	b.n	80038b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d020      	beq.n	8003886 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003844:	4b4f      	ldr	r3, [pc, #316]	; (8003984 <HAL_RCC_OscConfig+0x2b0>)
 8003846:	2201      	movs	r2, #1
 8003848:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800384a:	f7fe febd 	bl	80025c8 <HAL_GetTick>
 800384e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003850:	e008      	b.n	8003864 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003852:	f7fe feb9 	bl	80025c8 <HAL_GetTick>
 8003856:	4602      	mov	r2, r0
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	1ad3      	subs	r3, r2, r3
 800385c:	2b02      	cmp	r3, #2
 800385e:	d901      	bls.n	8003864 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003860:	2303      	movs	r3, #3
 8003862:	e1a5      	b.n	8003bb0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003864:	4b46      	ldr	r3, [pc, #280]	; (8003980 <HAL_RCC_OscConfig+0x2ac>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 0302 	and.w	r3, r3, #2
 800386c:	2b00      	cmp	r3, #0
 800386e:	d0f0      	beq.n	8003852 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003870:	4b43      	ldr	r3, [pc, #268]	; (8003980 <HAL_RCC_OscConfig+0x2ac>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	691b      	ldr	r3, [r3, #16]
 800387c:	00db      	lsls	r3, r3, #3
 800387e:	4940      	ldr	r1, [pc, #256]	; (8003980 <HAL_RCC_OscConfig+0x2ac>)
 8003880:	4313      	orrs	r3, r2
 8003882:	600b      	str	r3, [r1, #0]
 8003884:	e015      	b.n	80038b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003886:	4b3f      	ldr	r3, [pc, #252]	; (8003984 <HAL_RCC_OscConfig+0x2b0>)
 8003888:	2200      	movs	r2, #0
 800388a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800388c:	f7fe fe9c 	bl	80025c8 <HAL_GetTick>
 8003890:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003892:	e008      	b.n	80038a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003894:	f7fe fe98 	bl	80025c8 <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d901      	bls.n	80038a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e184      	b.n	8003bb0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038a6:	4b36      	ldr	r3, [pc, #216]	; (8003980 <HAL_RCC_OscConfig+0x2ac>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0302 	and.w	r3, r3, #2
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d1f0      	bne.n	8003894 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0308 	and.w	r3, r3, #8
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d030      	beq.n	8003920 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	695b      	ldr	r3, [r3, #20]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d016      	beq.n	80038f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038c6:	4b30      	ldr	r3, [pc, #192]	; (8003988 <HAL_RCC_OscConfig+0x2b4>)
 80038c8:	2201      	movs	r2, #1
 80038ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038cc:	f7fe fe7c 	bl	80025c8 <HAL_GetTick>
 80038d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038d2:	e008      	b.n	80038e6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038d4:	f7fe fe78 	bl	80025c8 <HAL_GetTick>
 80038d8:	4602      	mov	r2, r0
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	2b02      	cmp	r3, #2
 80038e0:	d901      	bls.n	80038e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80038e2:	2303      	movs	r3, #3
 80038e4:	e164      	b.n	8003bb0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038e6:	4b26      	ldr	r3, [pc, #152]	; (8003980 <HAL_RCC_OscConfig+0x2ac>)
 80038e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038ea:	f003 0302 	and.w	r3, r3, #2
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d0f0      	beq.n	80038d4 <HAL_RCC_OscConfig+0x200>
 80038f2:	e015      	b.n	8003920 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038f4:	4b24      	ldr	r3, [pc, #144]	; (8003988 <HAL_RCC_OscConfig+0x2b4>)
 80038f6:	2200      	movs	r2, #0
 80038f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038fa:	f7fe fe65 	bl	80025c8 <HAL_GetTick>
 80038fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003900:	e008      	b.n	8003914 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003902:	f7fe fe61 	bl	80025c8 <HAL_GetTick>
 8003906:	4602      	mov	r2, r0
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	1ad3      	subs	r3, r2, r3
 800390c:	2b02      	cmp	r3, #2
 800390e:	d901      	bls.n	8003914 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003910:	2303      	movs	r3, #3
 8003912:	e14d      	b.n	8003bb0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003914:	4b1a      	ldr	r3, [pc, #104]	; (8003980 <HAL_RCC_OscConfig+0x2ac>)
 8003916:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003918:	f003 0302 	and.w	r3, r3, #2
 800391c:	2b00      	cmp	r3, #0
 800391e:	d1f0      	bne.n	8003902 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 0304 	and.w	r3, r3, #4
 8003928:	2b00      	cmp	r3, #0
 800392a:	f000 80a0 	beq.w	8003a6e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800392e:	2300      	movs	r3, #0
 8003930:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003932:	4b13      	ldr	r3, [pc, #76]	; (8003980 <HAL_RCC_OscConfig+0x2ac>)
 8003934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d10f      	bne.n	800395e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800393e:	2300      	movs	r3, #0
 8003940:	60bb      	str	r3, [r7, #8]
 8003942:	4b0f      	ldr	r3, [pc, #60]	; (8003980 <HAL_RCC_OscConfig+0x2ac>)
 8003944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003946:	4a0e      	ldr	r2, [pc, #56]	; (8003980 <HAL_RCC_OscConfig+0x2ac>)
 8003948:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800394c:	6413      	str	r3, [r2, #64]	; 0x40
 800394e:	4b0c      	ldr	r3, [pc, #48]	; (8003980 <HAL_RCC_OscConfig+0x2ac>)
 8003950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003956:	60bb      	str	r3, [r7, #8]
 8003958:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800395a:	2301      	movs	r3, #1
 800395c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800395e:	4b0b      	ldr	r3, [pc, #44]	; (800398c <HAL_RCC_OscConfig+0x2b8>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003966:	2b00      	cmp	r3, #0
 8003968:	d121      	bne.n	80039ae <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800396a:	4b08      	ldr	r3, [pc, #32]	; (800398c <HAL_RCC_OscConfig+0x2b8>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a07      	ldr	r2, [pc, #28]	; (800398c <HAL_RCC_OscConfig+0x2b8>)
 8003970:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003974:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003976:	f7fe fe27 	bl	80025c8 <HAL_GetTick>
 800397a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800397c:	e011      	b.n	80039a2 <HAL_RCC_OscConfig+0x2ce>
 800397e:	bf00      	nop
 8003980:	40023800 	.word	0x40023800
 8003984:	42470000 	.word	0x42470000
 8003988:	42470e80 	.word	0x42470e80
 800398c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003990:	f7fe fe1a 	bl	80025c8 <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	2b02      	cmp	r3, #2
 800399c:	d901      	bls.n	80039a2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	e106      	b.n	8003bb0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039a2:	4b85      	ldr	r3, [pc, #532]	; (8003bb8 <HAL_RCC_OscConfig+0x4e4>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d0f0      	beq.n	8003990 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d106      	bne.n	80039c4 <HAL_RCC_OscConfig+0x2f0>
 80039b6:	4b81      	ldr	r3, [pc, #516]	; (8003bbc <HAL_RCC_OscConfig+0x4e8>)
 80039b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ba:	4a80      	ldr	r2, [pc, #512]	; (8003bbc <HAL_RCC_OscConfig+0x4e8>)
 80039bc:	f043 0301 	orr.w	r3, r3, #1
 80039c0:	6713      	str	r3, [r2, #112]	; 0x70
 80039c2:	e01c      	b.n	80039fe <HAL_RCC_OscConfig+0x32a>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	2b05      	cmp	r3, #5
 80039ca:	d10c      	bne.n	80039e6 <HAL_RCC_OscConfig+0x312>
 80039cc:	4b7b      	ldr	r3, [pc, #492]	; (8003bbc <HAL_RCC_OscConfig+0x4e8>)
 80039ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039d0:	4a7a      	ldr	r2, [pc, #488]	; (8003bbc <HAL_RCC_OscConfig+0x4e8>)
 80039d2:	f043 0304 	orr.w	r3, r3, #4
 80039d6:	6713      	str	r3, [r2, #112]	; 0x70
 80039d8:	4b78      	ldr	r3, [pc, #480]	; (8003bbc <HAL_RCC_OscConfig+0x4e8>)
 80039da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039dc:	4a77      	ldr	r2, [pc, #476]	; (8003bbc <HAL_RCC_OscConfig+0x4e8>)
 80039de:	f043 0301 	orr.w	r3, r3, #1
 80039e2:	6713      	str	r3, [r2, #112]	; 0x70
 80039e4:	e00b      	b.n	80039fe <HAL_RCC_OscConfig+0x32a>
 80039e6:	4b75      	ldr	r3, [pc, #468]	; (8003bbc <HAL_RCC_OscConfig+0x4e8>)
 80039e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ea:	4a74      	ldr	r2, [pc, #464]	; (8003bbc <HAL_RCC_OscConfig+0x4e8>)
 80039ec:	f023 0301 	bic.w	r3, r3, #1
 80039f0:	6713      	str	r3, [r2, #112]	; 0x70
 80039f2:	4b72      	ldr	r3, [pc, #456]	; (8003bbc <HAL_RCC_OscConfig+0x4e8>)
 80039f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039f6:	4a71      	ldr	r2, [pc, #452]	; (8003bbc <HAL_RCC_OscConfig+0x4e8>)
 80039f8:	f023 0304 	bic.w	r3, r3, #4
 80039fc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d015      	beq.n	8003a32 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a06:	f7fe fddf 	bl	80025c8 <HAL_GetTick>
 8003a0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a0c:	e00a      	b.n	8003a24 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a0e:	f7fe fddb 	bl	80025c8 <HAL_GetTick>
 8003a12:	4602      	mov	r2, r0
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d901      	bls.n	8003a24 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003a20:	2303      	movs	r3, #3
 8003a22:	e0c5      	b.n	8003bb0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a24:	4b65      	ldr	r3, [pc, #404]	; (8003bbc <HAL_RCC_OscConfig+0x4e8>)
 8003a26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a28:	f003 0302 	and.w	r3, r3, #2
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d0ee      	beq.n	8003a0e <HAL_RCC_OscConfig+0x33a>
 8003a30:	e014      	b.n	8003a5c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a32:	f7fe fdc9 	bl	80025c8 <HAL_GetTick>
 8003a36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a38:	e00a      	b.n	8003a50 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a3a:	f7fe fdc5 	bl	80025c8 <HAL_GetTick>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	1ad3      	subs	r3, r2, r3
 8003a44:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d901      	bls.n	8003a50 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003a4c:	2303      	movs	r3, #3
 8003a4e:	e0af      	b.n	8003bb0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a50:	4b5a      	ldr	r3, [pc, #360]	; (8003bbc <HAL_RCC_OscConfig+0x4e8>)
 8003a52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a54:	f003 0302 	and.w	r3, r3, #2
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d1ee      	bne.n	8003a3a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a5c:	7dfb      	ldrb	r3, [r7, #23]
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d105      	bne.n	8003a6e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a62:	4b56      	ldr	r3, [pc, #344]	; (8003bbc <HAL_RCC_OscConfig+0x4e8>)
 8003a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a66:	4a55      	ldr	r2, [pc, #340]	; (8003bbc <HAL_RCC_OscConfig+0x4e8>)
 8003a68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a6c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	699b      	ldr	r3, [r3, #24]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	f000 809b 	beq.w	8003bae <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a78:	4b50      	ldr	r3, [pc, #320]	; (8003bbc <HAL_RCC_OscConfig+0x4e8>)
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	f003 030c 	and.w	r3, r3, #12
 8003a80:	2b08      	cmp	r3, #8
 8003a82:	d05c      	beq.n	8003b3e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	699b      	ldr	r3, [r3, #24]
 8003a88:	2b02      	cmp	r3, #2
 8003a8a:	d141      	bne.n	8003b10 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a8c:	4b4c      	ldr	r3, [pc, #304]	; (8003bc0 <HAL_RCC_OscConfig+0x4ec>)
 8003a8e:	2200      	movs	r2, #0
 8003a90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a92:	f7fe fd99 	bl	80025c8 <HAL_GetTick>
 8003a96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a98:	e008      	b.n	8003aac <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a9a:	f7fe fd95 	bl	80025c8 <HAL_GetTick>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	1ad3      	subs	r3, r2, r3
 8003aa4:	2b02      	cmp	r3, #2
 8003aa6:	d901      	bls.n	8003aac <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003aa8:	2303      	movs	r3, #3
 8003aaa:	e081      	b.n	8003bb0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aac:	4b43      	ldr	r3, [pc, #268]	; (8003bbc <HAL_RCC_OscConfig+0x4e8>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d1f0      	bne.n	8003a9a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	69da      	ldr	r2, [r3, #28]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6a1b      	ldr	r3, [r3, #32]
 8003ac0:	431a      	orrs	r2, r3
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac6:	019b      	lsls	r3, r3, #6
 8003ac8:	431a      	orrs	r2, r3
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ace:	085b      	lsrs	r3, r3, #1
 8003ad0:	3b01      	subs	r3, #1
 8003ad2:	041b      	lsls	r3, r3, #16
 8003ad4:	431a      	orrs	r2, r3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ada:	061b      	lsls	r3, r3, #24
 8003adc:	4937      	ldr	r1, [pc, #220]	; (8003bbc <HAL_RCC_OscConfig+0x4e8>)
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ae2:	4b37      	ldr	r3, [pc, #220]	; (8003bc0 <HAL_RCC_OscConfig+0x4ec>)
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ae8:	f7fe fd6e 	bl	80025c8 <HAL_GetTick>
 8003aec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003aee:	e008      	b.n	8003b02 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003af0:	f7fe fd6a 	bl	80025c8 <HAL_GetTick>
 8003af4:	4602      	mov	r2, r0
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	1ad3      	subs	r3, r2, r3
 8003afa:	2b02      	cmp	r3, #2
 8003afc:	d901      	bls.n	8003b02 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003afe:	2303      	movs	r3, #3
 8003b00:	e056      	b.n	8003bb0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b02:	4b2e      	ldr	r3, [pc, #184]	; (8003bbc <HAL_RCC_OscConfig+0x4e8>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d0f0      	beq.n	8003af0 <HAL_RCC_OscConfig+0x41c>
 8003b0e:	e04e      	b.n	8003bae <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b10:	4b2b      	ldr	r3, [pc, #172]	; (8003bc0 <HAL_RCC_OscConfig+0x4ec>)
 8003b12:	2200      	movs	r2, #0
 8003b14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b16:	f7fe fd57 	bl	80025c8 <HAL_GetTick>
 8003b1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b1c:	e008      	b.n	8003b30 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b1e:	f7fe fd53 	bl	80025c8 <HAL_GetTick>
 8003b22:	4602      	mov	r2, r0
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d901      	bls.n	8003b30 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	e03f      	b.n	8003bb0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b30:	4b22      	ldr	r3, [pc, #136]	; (8003bbc <HAL_RCC_OscConfig+0x4e8>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d1f0      	bne.n	8003b1e <HAL_RCC_OscConfig+0x44a>
 8003b3c:	e037      	b.n	8003bae <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	699b      	ldr	r3, [r3, #24]
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d101      	bne.n	8003b4a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e032      	b.n	8003bb0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b4a:	4b1c      	ldr	r3, [pc, #112]	; (8003bbc <HAL_RCC_OscConfig+0x4e8>)
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	699b      	ldr	r3, [r3, #24]
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d028      	beq.n	8003baa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d121      	bne.n	8003baa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d11a      	bne.n	8003baa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b74:	68fa      	ldr	r2, [r7, #12]
 8003b76:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	687a      	ldr	r2, [r7, #4]
 8003b7e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b80:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d111      	bne.n	8003baa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b90:	085b      	lsrs	r3, r3, #1
 8003b92:	3b01      	subs	r3, #1
 8003b94:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d107      	bne.n	8003baa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d001      	beq.n	8003bae <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e000      	b.n	8003bb0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003bae:	2300      	movs	r3, #0
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3718      	adds	r7, #24
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	40007000 	.word	0x40007000
 8003bbc:	40023800 	.word	0x40023800
 8003bc0:	42470060 	.word	0x42470060

08003bc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b084      	sub	sp, #16
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d101      	bne.n	8003bd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e0cc      	b.n	8003d72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003bd8:	4b68      	ldr	r3, [pc, #416]	; (8003d7c <HAL_RCC_ClockConfig+0x1b8>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 030f 	and.w	r3, r3, #15
 8003be0:	683a      	ldr	r2, [r7, #0]
 8003be2:	429a      	cmp	r2, r3
 8003be4:	d90c      	bls.n	8003c00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003be6:	4b65      	ldr	r3, [pc, #404]	; (8003d7c <HAL_RCC_ClockConfig+0x1b8>)
 8003be8:	683a      	ldr	r2, [r7, #0]
 8003bea:	b2d2      	uxtb	r2, r2
 8003bec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bee:	4b63      	ldr	r3, [pc, #396]	; (8003d7c <HAL_RCC_ClockConfig+0x1b8>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 030f 	and.w	r3, r3, #15
 8003bf6:	683a      	ldr	r2, [r7, #0]
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d001      	beq.n	8003c00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e0b8      	b.n	8003d72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 0302 	and.w	r3, r3, #2
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d020      	beq.n	8003c4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 0304 	and.w	r3, r3, #4
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d005      	beq.n	8003c24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c18:	4b59      	ldr	r3, [pc, #356]	; (8003d80 <HAL_RCC_ClockConfig+0x1bc>)
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	4a58      	ldr	r2, [pc, #352]	; (8003d80 <HAL_RCC_ClockConfig+0x1bc>)
 8003c1e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003c22:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 0308 	and.w	r3, r3, #8
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d005      	beq.n	8003c3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c30:	4b53      	ldr	r3, [pc, #332]	; (8003d80 <HAL_RCC_ClockConfig+0x1bc>)
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	4a52      	ldr	r2, [pc, #328]	; (8003d80 <HAL_RCC_ClockConfig+0x1bc>)
 8003c36:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003c3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c3c:	4b50      	ldr	r3, [pc, #320]	; (8003d80 <HAL_RCC_ClockConfig+0x1bc>)
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	494d      	ldr	r1, [pc, #308]	; (8003d80 <HAL_RCC_ClockConfig+0x1bc>)
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0301 	and.w	r3, r3, #1
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d044      	beq.n	8003ce4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d107      	bne.n	8003c72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c62:	4b47      	ldr	r3, [pc, #284]	; (8003d80 <HAL_RCC_ClockConfig+0x1bc>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d119      	bne.n	8003ca2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e07f      	b.n	8003d72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	2b02      	cmp	r3, #2
 8003c78:	d003      	beq.n	8003c82 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c7e:	2b03      	cmp	r3, #3
 8003c80:	d107      	bne.n	8003c92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c82:	4b3f      	ldr	r3, [pc, #252]	; (8003d80 <HAL_RCC_ClockConfig+0x1bc>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d109      	bne.n	8003ca2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e06f      	b.n	8003d72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c92:	4b3b      	ldr	r3, [pc, #236]	; (8003d80 <HAL_RCC_ClockConfig+0x1bc>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 0302 	and.w	r3, r3, #2
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d101      	bne.n	8003ca2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e067      	b.n	8003d72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ca2:	4b37      	ldr	r3, [pc, #220]	; (8003d80 <HAL_RCC_ClockConfig+0x1bc>)
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	f023 0203 	bic.w	r2, r3, #3
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	4934      	ldr	r1, [pc, #208]	; (8003d80 <HAL_RCC_ClockConfig+0x1bc>)
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003cb4:	f7fe fc88 	bl	80025c8 <HAL_GetTick>
 8003cb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cba:	e00a      	b.n	8003cd2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cbc:	f7fe fc84 	bl	80025c8 <HAL_GetTick>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d901      	bls.n	8003cd2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003cce:	2303      	movs	r3, #3
 8003cd0:	e04f      	b.n	8003d72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cd2:	4b2b      	ldr	r3, [pc, #172]	; (8003d80 <HAL_RCC_ClockConfig+0x1bc>)
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	f003 020c 	and.w	r2, r3, #12
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d1eb      	bne.n	8003cbc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ce4:	4b25      	ldr	r3, [pc, #148]	; (8003d7c <HAL_RCC_ClockConfig+0x1b8>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 030f 	and.w	r3, r3, #15
 8003cec:	683a      	ldr	r2, [r7, #0]
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	d20c      	bcs.n	8003d0c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cf2:	4b22      	ldr	r3, [pc, #136]	; (8003d7c <HAL_RCC_ClockConfig+0x1b8>)
 8003cf4:	683a      	ldr	r2, [r7, #0]
 8003cf6:	b2d2      	uxtb	r2, r2
 8003cf8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cfa:	4b20      	ldr	r3, [pc, #128]	; (8003d7c <HAL_RCC_ClockConfig+0x1b8>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 030f 	and.w	r3, r3, #15
 8003d02:	683a      	ldr	r2, [r7, #0]
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d001      	beq.n	8003d0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e032      	b.n	8003d72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0304 	and.w	r3, r3, #4
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d008      	beq.n	8003d2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d18:	4b19      	ldr	r3, [pc, #100]	; (8003d80 <HAL_RCC_ClockConfig+0x1bc>)
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	4916      	ldr	r1, [pc, #88]	; (8003d80 <HAL_RCC_ClockConfig+0x1bc>)
 8003d26:	4313      	orrs	r3, r2
 8003d28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0308 	and.w	r3, r3, #8
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d009      	beq.n	8003d4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d36:	4b12      	ldr	r3, [pc, #72]	; (8003d80 <HAL_RCC_ClockConfig+0x1bc>)
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	691b      	ldr	r3, [r3, #16]
 8003d42:	00db      	lsls	r3, r3, #3
 8003d44:	490e      	ldr	r1, [pc, #56]	; (8003d80 <HAL_RCC_ClockConfig+0x1bc>)
 8003d46:	4313      	orrs	r3, r2
 8003d48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d4a:	f000 f821 	bl	8003d90 <HAL_RCC_GetSysClockFreq>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	4b0b      	ldr	r3, [pc, #44]	; (8003d80 <HAL_RCC_ClockConfig+0x1bc>)
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	091b      	lsrs	r3, r3, #4
 8003d56:	f003 030f 	and.w	r3, r3, #15
 8003d5a:	490a      	ldr	r1, [pc, #40]	; (8003d84 <HAL_RCC_ClockConfig+0x1c0>)
 8003d5c:	5ccb      	ldrb	r3, [r1, r3]
 8003d5e:	fa22 f303 	lsr.w	r3, r2, r3
 8003d62:	4a09      	ldr	r2, [pc, #36]	; (8003d88 <HAL_RCC_ClockConfig+0x1c4>)
 8003d64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003d66:	4b09      	ldr	r3, [pc, #36]	; (8003d8c <HAL_RCC_ClockConfig+0x1c8>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f7fe fbe8 	bl	8002540 <HAL_InitTick>

  return HAL_OK;
 8003d70:	2300      	movs	r3, #0
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3710      	adds	r7, #16
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	40023c00 	.word	0x40023c00
 8003d80:	40023800 	.word	0x40023800
 8003d84:	08006558 	.word	0x08006558
 8003d88:	200006f0 	.word	0x200006f0
 8003d8c:	200006f4 	.word	0x200006f4

08003d90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d90:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003d94:	b084      	sub	sp, #16
 8003d96:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	607b      	str	r3, [r7, #4]
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	60fb      	str	r3, [r7, #12]
 8003da0:	2300      	movs	r3, #0
 8003da2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003da4:	2300      	movs	r3, #0
 8003da6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003da8:	4b67      	ldr	r3, [pc, #412]	; (8003f48 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	f003 030c 	and.w	r3, r3, #12
 8003db0:	2b08      	cmp	r3, #8
 8003db2:	d00d      	beq.n	8003dd0 <HAL_RCC_GetSysClockFreq+0x40>
 8003db4:	2b08      	cmp	r3, #8
 8003db6:	f200 80bd 	bhi.w	8003f34 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d002      	beq.n	8003dc4 <HAL_RCC_GetSysClockFreq+0x34>
 8003dbe:	2b04      	cmp	r3, #4
 8003dc0:	d003      	beq.n	8003dca <HAL_RCC_GetSysClockFreq+0x3a>
 8003dc2:	e0b7      	b.n	8003f34 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003dc4:	4b61      	ldr	r3, [pc, #388]	; (8003f4c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003dc6:	60bb      	str	r3, [r7, #8]
       break;
 8003dc8:	e0b7      	b.n	8003f3a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003dca:	4b61      	ldr	r3, [pc, #388]	; (8003f50 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003dcc:	60bb      	str	r3, [r7, #8]
      break;
 8003dce:	e0b4      	b.n	8003f3a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003dd0:	4b5d      	ldr	r3, [pc, #372]	; (8003f48 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003dd8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003dda:	4b5b      	ldr	r3, [pc, #364]	; (8003f48 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d04d      	beq.n	8003e82 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003de6:	4b58      	ldr	r3, [pc, #352]	; (8003f48 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	099b      	lsrs	r3, r3, #6
 8003dec:	461a      	mov	r2, r3
 8003dee:	f04f 0300 	mov.w	r3, #0
 8003df2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003df6:	f04f 0100 	mov.w	r1, #0
 8003dfa:	ea02 0800 	and.w	r8, r2, r0
 8003dfe:	ea03 0901 	and.w	r9, r3, r1
 8003e02:	4640      	mov	r0, r8
 8003e04:	4649      	mov	r1, r9
 8003e06:	f04f 0200 	mov.w	r2, #0
 8003e0a:	f04f 0300 	mov.w	r3, #0
 8003e0e:	014b      	lsls	r3, r1, #5
 8003e10:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003e14:	0142      	lsls	r2, r0, #5
 8003e16:	4610      	mov	r0, r2
 8003e18:	4619      	mov	r1, r3
 8003e1a:	ebb0 0008 	subs.w	r0, r0, r8
 8003e1e:	eb61 0109 	sbc.w	r1, r1, r9
 8003e22:	f04f 0200 	mov.w	r2, #0
 8003e26:	f04f 0300 	mov.w	r3, #0
 8003e2a:	018b      	lsls	r3, r1, #6
 8003e2c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003e30:	0182      	lsls	r2, r0, #6
 8003e32:	1a12      	subs	r2, r2, r0
 8003e34:	eb63 0301 	sbc.w	r3, r3, r1
 8003e38:	f04f 0000 	mov.w	r0, #0
 8003e3c:	f04f 0100 	mov.w	r1, #0
 8003e40:	00d9      	lsls	r1, r3, #3
 8003e42:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003e46:	00d0      	lsls	r0, r2, #3
 8003e48:	4602      	mov	r2, r0
 8003e4a:	460b      	mov	r3, r1
 8003e4c:	eb12 0208 	adds.w	r2, r2, r8
 8003e50:	eb43 0309 	adc.w	r3, r3, r9
 8003e54:	f04f 0000 	mov.w	r0, #0
 8003e58:	f04f 0100 	mov.w	r1, #0
 8003e5c:	0259      	lsls	r1, r3, #9
 8003e5e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003e62:	0250      	lsls	r0, r2, #9
 8003e64:	4602      	mov	r2, r0
 8003e66:	460b      	mov	r3, r1
 8003e68:	4610      	mov	r0, r2
 8003e6a:	4619      	mov	r1, r3
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	461a      	mov	r2, r3
 8003e70:	f04f 0300 	mov.w	r3, #0
 8003e74:	f7fc fa0c 	bl	8000290 <__aeabi_uldivmod>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	460b      	mov	r3, r1
 8003e7c:	4613      	mov	r3, r2
 8003e7e:	60fb      	str	r3, [r7, #12]
 8003e80:	e04a      	b.n	8003f18 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e82:	4b31      	ldr	r3, [pc, #196]	; (8003f48 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	099b      	lsrs	r3, r3, #6
 8003e88:	461a      	mov	r2, r3
 8003e8a:	f04f 0300 	mov.w	r3, #0
 8003e8e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003e92:	f04f 0100 	mov.w	r1, #0
 8003e96:	ea02 0400 	and.w	r4, r2, r0
 8003e9a:	ea03 0501 	and.w	r5, r3, r1
 8003e9e:	4620      	mov	r0, r4
 8003ea0:	4629      	mov	r1, r5
 8003ea2:	f04f 0200 	mov.w	r2, #0
 8003ea6:	f04f 0300 	mov.w	r3, #0
 8003eaa:	014b      	lsls	r3, r1, #5
 8003eac:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003eb0:	0142      	lsls	r2, r0, #5
 8003eb2:	4610      	mov	r0, r2
 8003eb4:	4619      	mov	r1, r3
 8003eb6:	1b00      	subs	r0, r0, r4
 8003eb8:	eb61 0105 	sbc.w	r1, r1, r5
 8003ebc:	f04f 0200 	mov.w	r2, #0
 8003ec0:	f04f 0300 	mov.w	r3, #0
 8003ec4:	018b      	lsls	r3, r1, #6
 8003ec6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003eca:	0182      	lsls	r2, r0, #6
 8003ecc:	1a12      	subs	r2, r2, r0
 8003ece:	eb63 0301 	sbc.w	r3, r3, r1
 8003ed2:	f04f 0000 	mov.w	r0, #0
 8003ed6:	f04f 0100 	mov.w	r1, #0
 8003eda:	00d9      	lsls	r1, r3, #3
 8003edc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003ee0:	00d0      	lsls	r0, r2, #3
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	460b      	mov	r3, r1
 8003ee6:	1912      	adds	r2, r2, r4
 8003ee8:	eb45 0303 	adc.w	r3, r5, r3
 8003eec:	f04f 0000 	mov.w	r0, #0
 8003ef0:	f04f 0100 	mov.w	r1, #0
 8003ef4:	0299      	lsls	r1, r3, #10
 8003ef6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003efa:	0290      	lsls	r0, r2, #10
 8003efc:	4602      	mov	r2, r0
 8003efe:	460b      	mov	r3, r1
 8003f00:	4610      	mov	r0, r2
 8003f02:	4619      	mov	r1, r3
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	461a      	mov	r2, r3
 8003f08:	f04f 0300 	mov.w	r3, #0
 8003f0c:	f7fc f9c0 	bl	8000290 <__aeabi_uldivmod>
 8003f10:	4602      	mov	r2, r0
 8003f12:	460b      	mov	r3, r1
 8003f14:	4613      	mov	r3, r2
 8003f16:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f18:	4b0b      	ldr	r3, [pc, #44]	; (8003f48 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	0c1b      	lsrs	r3, r3, #16
 8003f1e:	f003 0303 	and.w	r3, r3, #3
 8003f22:	3301      	adds	r3, #1
 8003f24:	005b      	lsls	r3, r3, #1
 8003f26:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003f28:	68fa      	ldr	r2, [r7, #12]
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f30:	60bb      	str	r3, [r7, #8]
      break;
 8003f32:	e002      	b.n	8003f3a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f34:	4b05      	ldr	r3, [pc, #20]	; (8003f4c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003f36:	60bb      	str	r3, [r7, #8]
      break;
 8003f38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f3a:	68bb      	ldr	r3, [r7, #8]
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3710      	adds	r7, #16
 8003f40:	46bd      	mov	sp, r7
 8003f42:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003f46:	bf00      	nop
 8003f48:	40023800 	.word	0x40023800
 8003f4c:	00f42400 	.word	0x00f42400
 8003f50:	007a1200 	.word	0x007a1200

08003f54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f54:	b480      	push	{r7}
 8003f56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f58:	4b03      	ldr	r3, [pc, #12]	; (8003f68 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr
 8003f66:	bf00      	nop
 8003f68:	200006f0 	.word	0x200006f0

08003f6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003f70:	f7ff fff0 	bl	8003f54 <HAL_RCC_GetHCLKFreq>
 8003f74:	4602      	mov	r2, r0
 8003f76:	4b05      	ldr	r3, [pc, #20]	; (8003f8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	0a9b      	lsrs	r3, r3, #10
 8003f7c:	f003 0307 	and.w	r3, r3, #7
 8003f80:	4903      	ldr	r1, [pc, #12]	; (8003f90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f82:	5ccb      	ldrb	r3, [r1, r3]
 8003f84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	bd80      	pop	{r7, pc}
 8003f8c:	40023800 	.word	0x40023800
 8003f90:	08006568 	.word	0x08006568

08003f94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003f98:	f7ff ffdc 	bl	8003f54 <HAL_RCC_GetHCLKFreq>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	4b05      	ldr	r3, [pc, #20]	; (8003fb4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	0b5b      	lsrs	r3, r3, #13
 8003fa4:	f003 0307 	and.w	r3, r3, #7
 8003fa8:	4903      	ldr	r1, [pc, #12]	; (8003fb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003faa:	5ccb      	ldrb	r3, [r1, r3]
 8003fac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	bd80      	pop	{r7, pc}
 8003fb4:	40023800 	.word	0x40023800
 8003fb8:	08006568 	.word	0x08006568

08003fbc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b082      	sub	sp, #8
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d101      	bne.n	8003fce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e07b      	b.n	80040c6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d108      	bne.n	8003fe8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003fde:	d009      	beq.n	8003ff4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	61da      	str	r2, [r3, #28]
 8003fe6:	e005      	b.n	8003ff4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2200      	movs	r2, #0
 8003fec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004000:	b2db      	uxtb	r3, r3
 8004002:	2b00      	cmp	r3, #0
 8004004:	d106      	bne.n	8004014 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2200      	movs	r2, #0
 800400a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f7fd ff64 	bl	8001edc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2202      	movs	r2, #2
 8004018:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800402a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800403c:	431a      	orrs	r2, r3
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004046:	431a      	orrs	r2, r3
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	691b      	ldr	r3, [r3, #16]
 800404c:	f003 0302 	and.w	r3, r3, #2
 8004050:	431a      	orrs	r2, r3
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	695b      	ldr	r3, [r3, #20]
 8004056:	f003 0301 	and.w	r3, r3, #1
 800405a:	431a      	orrs	r2, r3
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	699b      	ldr	r3, [r3, #24]
 8004060:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004064:	431a      	orrs	r2, r3
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	69db      	ldr	r3, [r3, #28]
 800406a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800406e:	431a      	orrs	r2, r3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6a1b      	ldr	r3, [r3, #32]
 8004074:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004078:	ea42 0103 	orr.w	r1, r2, r3
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004080:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	430a      	orrs	r2, r1
 800408a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	699b      	ldr	r3, [r3, #24]
 8004090:	0c1b      	lsrs	r3, r3, #16
 8004092:	f003 0104 	and.w	r1, r3, #4
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409a:	f003 0210 	and.w	r2, r3, #16
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	430a      	orrs	r2, r1
 80040a4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	69da      	ldr	r2, [r3, #28]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040b4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2200      	movs	r2, #0
 80040ba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80040c4:	2300      	movs	r3, #0
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3708      	adds	r7, #8
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
	...

080040d0 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b087      	sub	sp, #28
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	60f8      	str	r0, [r7, #12]
 80040d8:	60b9      	str	r1, [r7, #8]
 80040da:	4613      	mov	r3, r2
 80040dc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80040de:	2300      	movs	r3, #0
 80040e0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d101      	bne.n	80040f0 <HAL_SPI_Transmit_IT+0x20>
 80040ec:	2302      	movs	r3, #2
 80040ee:	e06f      	b.n	80041d0 <HAL_SPI_Transmit_IT+0x100>
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2201      	movs	r2, #1
 80040f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d002      	beq.n	8004104 <HAL_SPI_Transmit_IT+0x34>
 80040fe:	88fb      	ldrh	r3, [r7, #6]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d102      	bne.n	800410a <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004108:	e05d      	b.n	80041c6 <HAL_SPI_Transmit_IT+0xf6>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004110:	b2db      	uxtb	r3, r3
 8004112:	2b01      	cmp	r3, #1
 8004114:	d002      	beq.n	800411c <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 8004116:	2302      	movs	r3, #2
 8004118:	75fb      	strb	r3, [r7, #23]
    goto error;
 800411a:	e054      	b.n	80041c6 <HAL_SPI_Transmit_IT+0xf6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2203      	movs	r2, #3
 8004120:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2200      	movs	r2, #0
 8004128:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	68ba      	ldr	r2, [r7, #8]
 800412e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	88fa      	ldrh	r2, [r7, #6]
 8004134:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	88fa      	ldrh	r2, [r7, #6]
 800413a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2200      	movs	r2, #0
 8004140:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2200      	movs	r2, #0
 8004146:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2200      	movs	r2, #0
 800414c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2200      	movs	r2, #0
 8004152:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d003      	beq.n	8004164 <HAL_SPI_Transmit_IT+0x94>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	4a1f      	ldr	r2, [pc, #124]	; (80041dc <HAL_SPI_Transmit_IT+0x10c>)
 8004160:	645a      	str	r2, [r3, #68]	; 0x44
 8004162:	e002      	b.n	800416a <HAL_SPI_Transmit_IT+0x9a>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	4a1e      	ldr	r2, [pc, #120]	; (80041e0 <HAL_SPI_Transmit_IT+0x110>)
 8004168:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004172:	d10f      	bne.n	8004194 <HAL_SPI_Transmit_IT+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004182:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004192:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	685a      	ldr	r2, [r3, #4]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 80041a2:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ae:	2b40      	cmp	r3, #64	; 0x40
 80041b0:	d008      	beq.n	80041c4 <HAL_SPI_Transmit_IT+0xf4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041c0:	601a      	str	r2, [r3, #0]
 80041c2:	e000      	b.n	80041c6 <HAL_SPI_Transmit_IT+0xf6>
  }

error :
 80041c4:	bf00      	nop
  __HAL_UNLOCK(hspi);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2200      	movs	r2, #0
 80041ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80041ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	371c      	adds	r7, #28
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr
 80041dc:	08004e5d 	.word	0x08004e5d
 80041e0:	08004e17 	.word	0x08004e17

080041e4 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b086      	sub	sp, #24
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	60f8      	str	r0, [r7, #12]
 80041ec:	60b9      	str	r1, [r7, #8]
 80041ee:	4613      	mov	r3, r2
 80041f0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80041f2:	2300      	movs	r3, #0
 80041f4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d110      	bne.n	8004220 <HAL_SPI_Receive_IT+0x3c>
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004206:	d10b      	bne.n	8004220 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2204      	movs	r2, #4
 800420c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8004210:	88fb      	ldrh	r3, [r7, #6]
 8004212:	68ba      	ldr	r2, [r7, #8]
 8004214:	68b9      	ldr	r1, [r7, #8]
 8004216:	68f8      	ldr	r0, [r7, #12]
 8004218:	f000 f882 	bl	8004320 <HAL_SPI_TransmitReceive_IT>
 800421c:	4603      	mov	r3, r0
 800421e:	e076      	b.n	800430e <HAL_SPI_Receive_IT+0x12a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004226:	2b01      	cmp	r3, #1
 8004228:	d101      	bne.n	800422e <HAL_SPI_Receive_IT+0x4a>
 800422a:	2302      	movs	r3, #2
 800422c:	e06f      	b.n	800430e <HAL_SPI_Receive_IT+0x12a>
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2201      	movs	r2, #1
 8004232:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800423c:	b2db      	uxtb	r3, r3
 800423e:	2b01      	cmp	r3, #1
 8004240:	d002      	beq.n	8004248 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 8004242:	2302      	movs	r3, #2
 8004244:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004246:	e05d      	b.n	8004304 <HAL_SPI_Receive_IT+0x120>
  }

  if ((pData == NULL) || (Size == 0U))
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d002      	beq.n	8004254 <HAL_SPI_Receive_IT+0x70>
 800424e:	88fb      	ldrh	r3, [r7, #6]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d102      	bne.n	800425a <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004258:	e054      	b.n	8004304 <HAL_SPI_Receive_IT+0x120>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2204      	movs	r2, #4
 800425e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2200      	movs	r2, #0
 8004266:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	68ba      	ldr	r2, [r7, #8]
 800426c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	88fa      	ldrh	r2, [r7, #6]
 8004272:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	88fa      	ldrh	r2, [r7, #6]
 8004278:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2200      	movs	r2, #0
 800427e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2200      	movs	r2, #0
 8004284:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2200      	movs	r2, #0
 800428a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxISR       = NULL;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2200      	movs	r2, #0
 8004290:	645a      	str	r2, [r3, #68]	; 0x44

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	68db      	ldr	r3, [r3, #12]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d003      	beq.n	80042a2 <HAL_SPI_Receive_IT+0xbe>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	4a1e      	ldr	r2, [pc, #120]	; (8004318 <HAL_SPI_Receive_IT+0x134>)
 800429e:	641a      	str	r2, [r3, #64]	; 0x40
 80042a0:	e002      	b.n	80042a8 <HAL_SPI_Receive_IT+0xc4>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	4a1d      	ldr	r2, [pc, #116]	; (800431c <HAL_SPI_Receive_IT+0x138>)
 80042a6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042b0:	d10f      	bne.n	80042d2 <HAL_SPI_Receive_IT+0xee>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042c0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80042d0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	685a      	ldr	r2, [r3, #4]
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80042e0:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042ec:	2b40      	cmp	r3, #64	; 0x40
 80042ee:	d008      	beq.n	8004302 <HAL_SPI_Receive_IT+0x11e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042fe:	601a      	str	r2, [r3, #0]
 8004300:	e000      	b.n	8004304 <HAL_SPI_Receive_IT+0x120>
  }

error :
 8004302:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2200      	movs	r2, #0
 8004308:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800430c:	7dfb      	ldrb	r3, [r7, #23]
}
 800430e:	4618      	mov	r0, r3
 8004310:	3718      	adds	r7, #24
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
 8004316:	bf00      	nop
 8004318:	08004dd1 	.word	0x08004dd1
 800431c:	08004d87 	.word	0x08004d87

08004320 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8004320:	b480      	push	{r7}
 8004322:	b087      	sub	sp, #28
 8004324:	af00      	add	r7, sp, #0
 8004326:	60f8      	str	r0, [r7, #12]
 8004328:	60b9      	str	r1, [r7, #8]
 800432a:	607a      	str	r2, [r7, #4]
 800432c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800432e:	2300      	movs	r3, #0
 8004330:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004338:	2b01      	cmp	r3, #1
 800433a:	d101      	bne.n	8004340 <HAL_SPI_TransmitReceive_IT+0x20>
 800433c:	2302      	movs	r3, #2
 800433e:	e075      	b.n	800442c <HAL_SPI_TransmitReceive_IT+0x10c>
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800434e:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004356:	7dbb      	ldrb	r3, [r7, #22]
 8004358:	2b01      	cmp	r3, #1
 800435a:	d00d      	beq.n	8004378 <HAL_SPI_TransmitReceive_IT+0x58>
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004362:	d106      	bne.n	8004372 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d102      	bne.n	8004372 <HAL_SPI_TransmitReceive_IT+0x52>
 800436c:	7dbb      	ldrb	r3, [r7, #22]
 800436e:	2b04      	cmp	r3, #4
 8004370:	d002      	beq.n	8004378 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8004372:	2302      	movs	r3, #2
 8004374:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004376:	e054      	b.n	8004422 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d005      	beq.n	800438a <HAL_SPI_TransmitReceive_IT+0x6a>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d002      	beq.n	800438a <HAL_SPI_TransmitReceive_IT+0x6a>
 8004384:	887b      	ldrh	r3, [r7, #2]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d102      	bne.n	8004390 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800438e:	e048      	b.n	8004422 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004396:	b2db      	uxtb	r3, r3
 8004398:	2b04      	cmp	r3, #4
 800439a:	d003      	beq.n	80043a4 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2205      	movs	r2, #5
 80043a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2200      	movs	r2, #0
 80043a8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	68ba      	ldr	r2, [r7, #8]
 80043ae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	887a      	ldrh	r2, [r7, #2]
 80043b4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	887a      	ldrh	r2, [r7, #2]
 80043ba:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	687a      	ldr	r2, [r7, #4]
 80043c0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	887a      	ldrh	r2, [r7, #2]
 80043c6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	887a      	ldrh	r2, [r7, #2]
 80043cc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d006      	beq.n	80043e4 <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	4a17      	ldr	r2, [pc, #92]	; (8004438 <HAL_SPI_TransmitReceive_IT+0x118>)
 80043da:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	4a17      	ldr	r2, [pc, #92]	; (800443c <HAL_SPI_TransmitReceive_IT+0x11c>)
 80043e0:	645a      	str	r2, [r3, #68]	; 0x44
 80043e2:	e005      	b.n	80043f0 <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	4a16      	ldr	r2, [pc, #88]	; (8004440 <HAL_SPI_TransmitReceive_IT+0x120>)
 80043e8:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	4a15      	ldr	r2, [pc, #84]	; (8004444 <HAL_SPI_TransmitReceive_IT+0x124>)
 80043ee:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	685a      	ldr	r2, [r3, #4]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 80043fe:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800440a:	2b40      	cmp	r3, #64	; 0x40
 800440c:	d008      	beq.n	8004420 <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800441c:	601a      	str	r2, [r3, #0]
 800441e:	e000      	b.n	8004422 <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 8004420:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2200      	movs	r2, #0
 8004426:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800442a:	7dfb      	ldrb	r3, [r7, #23]
}
 800442c:	4618      	mov	r0, r3
 800442e:	371c      	adds	r7, #28
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr
 8004438:	08004cc9 	.word	0x08004cc9
 800443c:	08004d29 	.word	0x08004d29
 8004440:	08004c05 	.word	0x08004c05
 8004444:	08004c69 	.word	0x08004c69

08004448 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b086      	sub	sp, #24
 800444c:	af00      	add	r7, sp, #0
 800444e:	60f8      	str	r0, [r7, #12]
 8004450:	60b9      	str	r1, [r7, #8]
 8004452:	4613      	mov	r3, r2
 8004454:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004456:	2300      	movs	r3, #0
 8004458:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d110      	bne.n	8004484 <HAL_SPI_Receive_DMA+0x3c>
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800446a:	d10b      	bne.n	8004484 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2204      	movs	r2, #4
 8004470:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8004474:	88fb      	ldrh	r3, [r7, #6]
 8004476:	68ba      	ldr	r2, [r7, #8]
 8004478:	68b9      	ldr	r1, [r7, #8]
 800447a:	68f8      	ldr	r0, [r7, #12]
 800447c:	f000 f8ac 	bl	80045d8 <HAL_SPI_TransmitReceive_DMA>
 8004480:	4603      	mov	r3, r0
 8004482:	e09f      	b.n	80045c4 <HAL_SPI_Receive_DMA+0x17c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800448a:	2b01      	cmp	r3, #1
 800448c:	d101      	bne.n	8004492 <HAL_SPI_Receive_DMA+0x4a>
 800448e:	2302      	movs	r3, #2
 8004490:	e098      	b.n	80045c4 <HAL_SPI_Receive_DMA+0x17c>
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2201      	movs	r2, #1
 8004496:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d002      	beq.n	80044ac <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 80044a6:	2302      	movs	r3, #2
 80044a8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80044aa:	e086      	b.n	80045ba <HAL_SPI_Receive_DMA+0x172>
  }

  if ((pData == NULL) || (Size == 0U))
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d002      	beq.n	80044b8 <HAL_SPI_Receive_DMA+0x70>
 80044b2:	88fb      	ldrh	r3, [r7, #6]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d102      	bne.n	80044be <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	75fb      	strb	r3, [r7, #23]
    goto error;
 80044bc:	e07d      	b.n	80045ba <HAL_SPI_Receive_DMA+0x172>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2204      	movs	r2, #4
 80044c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2200      	movs	r2, #0
 80044ca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	68ba      	ldr	r2, [r7, #8]
 80044d0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	88fa      	ldrh	r2, [r7, #6]
 80044d6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	88fa      	ldrh	r2, [r7, #6]
 80044dc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2200      	movs	r2, #0
 80044e2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2200      	movs	r2, #0
 80044e8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2200      	movs	r2, #0
 80044ee:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2200      	movs	r2, #0
 80044f4:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044fe:	d10f      	bne.n	8004520 <HAL_SPI_Receive_DMA+0xd8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800450e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800451e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004524:	4a29      	ldr	r2, [pc, #164]	; (80045cc <HAL_SPI_Receive_DMA+0x184>)
 8004526:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800452c:	4a28      	ldr	r2, [pc, #160]	; (80045d0 <HAL_SPI_Receive_DMA+0x188>)
 800452e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004534:	4a27      	ldr	r2, [pc, #156]	; (80045d4 <HAL_SPI_Receive_DMA+0x18c>)
 8004536:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800453c:	2200      	movs	r2, #0
 800453e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	330c      	adds	r3, #12
 800454a:	4619      	mov	r1, r3
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004550:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004556:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8004558:	f7fe fa02 	bl	8002960 <HAL_DMA_Start_IT>
 800455c:	4603      	mov	r3, r0
 800455e:	2b00      	cmp	r3, #0
 8004560:	d00c      	beq.n	800457c <HAL_SPI_Receive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004566:	f043 0210 	orr.w	r2, r3, #16
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2201      	movs	r2, #1
 8004576:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800457a:	e01e      	b.n	80045ba <HAL_SPI_Receive_DMA+0x172>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004586:	2b40      	cmp	r3, #64	; 0x40
 8004588:	d007      	beq.n	800459a <HAL_SPI_Receive_DMA+0x152>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004598:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	685a      	ldr	r2, [r3, #4]
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f042 0220 	orr.w	r2, r2, #32
 80045a8:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	685a      	ldr	r2, [r3, #4]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f042 0201 	orr.w	r2, r2, #1
 80045b8:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2200      	movs	r2, #0
 80045be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80045c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3718      	adds	r7, #24
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}
 80045cc:	08004b65 	.word	0x08004b65
 80045d0:	08004a2d 	.word	0x08004a2d
 80045d4:	08004b9d 	.word	0x08004b9d

080045d8 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b086      	sub	sp, #24
 80045dc:	af00      	add	r7, sp, #0
 80045de:	60f8      	str	r0, [r7, #12]
 80045e0:	60b9      	str	r1, [r7, #8]
 80045e2:	607a      	str	r2, [r7, #4]
 80045e4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80045e6:	2300      	movs	r3, #0
 80045e8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d101      	bne.n	80045f8 <HAL_SPI_TransmitReceive_DMA+0x20>
 80045f4:	2302      	movs	r3, #2
 80045f6:	e0e3      	b.n	80047c0 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004606:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800460e:	7dbb      	ldrb	r3, [r7, #22]
 8004610:	2b01      	cmp	r3, #1
 8004612:	d00d      	beq.n	8004630 <HAL_SPI_TransmitReceive_DMA+0x58>
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800461a:	d106      	bne.n	800462a <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d102      	bne.n	800462a <HAL_SPI_TransmitReceive_DMA+0x52>
 8004624:	7dbb      	ldrb	r3, [r7, #22]
 8004626:	2b04      	cmp	r3, #4
 8004628:	d002      	beq.n	8004630 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800462a:	2302      	movs	r3, #2
 800462c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800462e:	e0c2      	b.n	80047b6 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d005      	beq.n	8004642 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d002      	beq.n	8004642 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800463c:	887b      	ldrh	r3, [r7, #2]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d102      	bne.n	8004648 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004646:	e0b6      	b.n	80047b6 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800464e:	b2db      	uxtb	r3, r3
 8004650:	2b04      	cmp	r3, #4
 8004652:	d003      	beq.n	800465c <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2205      	movs	r2, #5
 8004658:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2200      	movs	r2, #0
 8004660:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	68ba      	ldr	r2, [r7, #8]
 8004666:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	887a      	ldrh	r2, [r7, #2]
 800466c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	887a      	ldrh	r2, [r7, #2]
 8004672:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	887a      	ldrh	r2, [r7, #2]
 800467e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	887a      	ldrh	r2, [r7, #2]
 8004684:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2200      	movs	r2, #0
 800468a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2200      	movs	r2, #0
 8004690:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004698:	b2db      	uxtb	r3, r3
 800469a:	2b04      	cmp	r3, #4
 800469c:	d108      	bne.n	80046b0 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046a2:	4a49      	ldr	r2, [pc, #292]	; (80047c8 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 80046a4:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046aa:	4a48      	ldr	r2, [pc, #288]	; (80047cc <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 80046ac:	63da      	str	r2, [r3, #60]	; 0x3c
 80046ae:	e007      	b.n	80046c0 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046b4:	4a46      	ldr	r2, [pc, #280]	; (80047d0 <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 80046b6:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046bc:	4a45      	ldr	r2, [pc, #276]	; (80047d4 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 80046be:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046c4:	4a44      	ldr	r2, [pc, #272]	; (80047d8 <HAL_SPI_TransmitReceive_DMA+0x200>)
 80046c6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046cc:	2200      	movs	r2, #0
 80046ce:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	330c      	adds	r3, #12
 80046da:	4619      	mov	r1, r3
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046e0:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046e6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80046e8:	f7fe f93a 	bl	8002960 <HAL_DMA_Start_IT>
 80046ec:	4603      	mov	r3, r0
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d00c      	beq.n	800470c <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046f6:	f043 0210 	orr.w	r2, r3, #16
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2201      	movs	r2, #1
 8004706:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800470a:	e054      	b.n	80047b6 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	685a      	ldr	r2, [r3, #4]
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f042 0201 	orr.w	r2, r2, #1
 800471a:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004720:	2200      	movs	r2, #0
 8004722:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004728:	2200      	movs	r2, #0
 800472a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004730:	2200      	movs	r2, #0
 8004732:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004738:	2200      	movs	r2, #0
 800473a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004744:	4619      	mov	r1, r3
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	330c      	adds	r3, #12
 800474c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004752:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004754:	f7fe f904 	bl	8002960 <HAL_DMA_Start_IT>
 8004758:	4603      	mov	r3, r0
 800475a:	2b00      	cmp	r3, #0
 800475c:	d00c      	beq.n	8004778 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004762:	f043 0210 	orr.w	r2, r3, #16
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2201      	movs	r2, #1
 8004772:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8004776:	e01e      	b.n	80047b6 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004782:	2b40      	cmp	r3, #64	; 0x40
 8004784:	d007      	beq.n	8004796 <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004794:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	685a      	ldr	r2, [r3, #4]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f042 0220 	orr.w	r2, r2, #32
 80047a4:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	685a      	ldr	r2, [r3, #4]
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f042 0202 	orr.w	r2, r2, #2
 80047b4:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2200      	movs	r2, #0
 80047ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80047be:	7dfb      	ldrb	r3, [r7, #23]
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3718      	adds	r7, #24
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	08004b65 	.word	0x08004b65
 80047cc:	08004a2d 	.word	0x08004a2d
 80047d0:	08004b81 	.word	0x08004b81
 80047d4:	08004ad5 	.word	0x08004ad5
 80047d8:	08004b9d 	.word	0x08004b9d

080047dc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b088      	sub	sp, #32
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80047f4:	69bb      	ldr	r3, [r7, #24]
 80047f6:	099b      	lsrs	r3, r3, #6
 80047f8:	f003 0301 	and.w	r3, r3, #1
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d10f      	bne.n	8004820 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004800:	69bb      	ldr	r3, [r7, #24]
 8004802:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004806:	2b00      	cmp	r3, #0
 8004808:	d00a      	beq.n	8004820 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800480a:	69fb      	ldr	r3, [r7, #28]
 800480c:	099b      	lsrs	r3, r3, #6
 800480e:	f003 0301 	and.w	r3, r3, #1
 8004812:	2b00      	cmp	r3, #0
 8004814:	d004      	beq.n	8004820 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	4798      	blx	r3
    return;
 800481e:	e0d7      	b.n	80049d0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004820:	69bb      	ldr	r3, [r7, #24]
 8004822:	085b      	lsrs	r3, r3, #1
 8004824:	f003 0301 	and.w	r3, r3, #1
 8004828:	2b00      	cmp	r3, #0
 800482a:	d00a      	beq.n	8004842 <HAL_SPI_IRQHandler+0x66>
 800482c:	69fb      	ldr	r3, [r7, #28]
 800482e:	09db      	lsrs	r3, r3, #7
 8004830:	f003 0301 	and.w	r3, r3, #1
 8004834:	2b00      	cmp	r3, #0
 8004836:	d004      	beq.n	8004842 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	4798      	blx	r3
    return;
 8004840:	e0c6      	b.n	80049d0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004842:	69bb      	ldr	r3, [r7, #24]
 8004844:	095b      	lsrs	r3, r3, #5
 8004846:	f003 0301 	and.w	r3, r3, #1
 800484a:	2b00      	cmp	r3, #0
 800484c:	d10c      	bne.n	8004868 <HAL_SPI_IRQHandler+0x8c>
 800484e:	69bb      	ldr	r3, [r7, #24]
 8004850:	099b      	lsrs	r3, r3, #6
 8004852:	f003 0301 	and.w	r3, r3, #1
 8004856:	2b00      	cmp	r3, #0
 8004858:	d106      	bne.n	8004868 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800485a:	69bb      	ldr	r3, [r7, #24]
 800485c:	0a1b      	lsrs	r3, r3, #8
 800485e:	f003 0301 	and.w	r3, r3, #1
 8004862:	2b00      	cmp	r3, #0
 8004864:	f000 80b4 	beq.w	80049d0 <HAL_SPI_IRQHandler+0x1f4>
 8004868:	69fb      	ldr	r3, [r7, #28]
 800486a:	095b      	lsrs	r3, r3, #5
 800486c:	f003 0301 	and.w	r3, r3, #1
 8004870:	2b00      	cmp	r3, #0
 8004872:	f000 80ad 	beq.w	80049d0 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004876:	69bb      	ldr	r3, [r7, #24]
 8004878:	099b      	lsrs	r3, r3, #6
 800487a:	f003 0301 	and.w	r3, r3, #1
 800487e:	2b00      	cmp	r3, #0
 8004880:	d023      	beq.n	80048ca <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004888:	b2db      	uxtb	r3, r3
 800488a:	2b03      	cmp	r3, #3
 800488c:	d011      	beq.n	80048b2 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004892:	f043 0204 	orr.w	r2, r3, #4
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800489a:	2300      	movs	r3, #0
 800489c:	617b      	str	r3, [r7, #20]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	68db      	ldr	r3, [r3, #12]
 80048a4:	617b      	str	r3, [r7, #20]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	617b      	str	r3, [r7, #20]
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	e00b      	b.n	80048ca <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80048b2:	2300      	movs	r3, #0
 80048b4:	613b      	str	r3, [r7, #16]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	68db      	ldr	r3, [r3, #12]
 80048bc:	613b      	str	r3, [r7, #16]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	613b      	str	r3, [r7, #16]
 80048c6:	693b      	ldr	r3, [r7, #16]
        return;
 80048c8:	e082      	b.n	80049d0 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80048ca:	69bb      	ldr	r3, [r7, #24]
 80048cc:	095b      	lsrs	r3, r3, #5
 80048ce:	f003 0301 	and.w	r3, r3, #1
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d014      	beq.n	8004900 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048da:	f043 0201 	orr.w	r2, r3, #1
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80048e2:	2300      	movs	r3, #0
 80048e4:	60fb      	str	r3, [r7, #12]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	60fb      	str	r3, [r7, #12]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048fc:	601a      	str	r2, [r3, #0]
 80048fe:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004900:	69bb      	ldr	r3, [r7, #24]
 8004902:	0a1b      	lsrs	r3, r3, #8
 8004904:	f003 0301 	and.w	r3, r3, #1
 8004908:	2b00      	cmp	r3, #0
 800490a:	d00c      	beq.n	8004926 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004910:	f043 0208 	orr.w	r2, r3, #8
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004918:	2300      	movs	r3, #0
 800491a:	60bb      	str	r3, [r7, #8]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	60bb      	str	r3, [r7, #8]
 8004924:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800492a:	2b00      	cmp	r3, #0
 800492c:	d04f      	beq.n	80049ce <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	685a      	ldr	r2, [r3, #4]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800493c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2201      	movs	r2, #1
 8004942:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004946:	69fb      	ldr	r3, [r7, #28]
 8004948:	f003 0302 	and.w	r3, r3, #2
 800494c:	2b00      	cmp	r3, #0
 800494e:	d104      	bne.n	800495a <HAL_SPI_IRQHandler+0x17e>
 8004950:	69fb      	ldr	r3, [r7, #28]
 8004952:	f003 0301 	and.w	r3, r3, #1
 8004956:	2b00      	cmp	r3, #0
 8004958:	d034      	beq.n	80049c4 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	685a      	ldr	r2, [r3, #4]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f022 0203 	bic.w	r2, r2, #3
 8004968:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800496e:	2b00      	cmp	r3, #0
 8004970:	d011      	beq.n	8004996 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004976:	4a18      	ldr	r2, [pc, #96]	; (80049d8 <HAL_SPI_IRQHandler+0x1fc>)
 8004978:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800497e:	4618      	mov	r0, r3
 8004980:	f7fe f846 	bl	8002a10 <HAL_DMA_Abort_IT>
 8004984:	4603      	mov	r3, r0
 8004986:	2b00      	cmp	r3, #0
 8004988:	d005      	beq.n	8004996 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800498e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800499a:	2b00      	cmp	r3, #0
 800499c:	d016      	beq.n	80049cc <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049a2:	4a0d      	ldr	r2, [pc, #52]	; (80049d8 <HAL_SPI_IRQHandler+0x1fc>)
 80049a4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049aa:	4618      	mov	r0, r3
 80049ac:	f7fe f830 	bl	8002a10 <HAL_DMA_Abort_IT>
 80049b0:	4603      	mov	r3, r0
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d00a      	beq.n	80049cc <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049ba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80049c2:	e003      	b.n	80049cc <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	f000 f827 	bl	8004a18 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80049ca:	e000      	b.n	80049ce <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80049cc:	bf00      	nop
    return;
 80049ce:	bf00      	nop
  }
}
 80049d0:	3720      	adds	r7, #32
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop
 80049d8:	08004bdd 	.word	0x08004bdd

080049dc <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80049dc:	b480      	push	{r7}
 80049de:	b083      	sub	sp, #12
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80049e4:	bf00      	nop
 80049e6:	370c      	adds	r7, #12
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr

080049f0 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b083      	sub	sp, #12
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80049f8:	bf00      	nop
 80049fa:	370c      	adds	r7, #12
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr

08004a04 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8004a0c:	bf00      	nop
 8004a0e:	370c      	adds	r7, #12
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr

08004a18 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b083      	sub	sp, #12
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004a20:	bf00      	nop
 8004a22:	370c      	adds	r7, #12
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr

08004a2c <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b084      	sub	sp, #16
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a38:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a3a:	f7fd fdc5 	bl	80025c8 <HAL_GetTick>
 8004a3e:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a4e:	d03b      	beq.n	8004ac8 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	685a      	ldr	r2, [r3, #4]
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f022 0220 	bic.w	r2, r2, #32
 8004a5e:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d10d      	bne.n	8004a84 <SPI_DMAReceiveCplt+0x58>
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a70:	d108      	bne.n	8004a84 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	685a      	ldr	r2, [r3, #4]
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f022 0203 	bic.w	r2, r2, #3
 8004a80:	605a      	str	r2, [r3, #4]
 8004a82:	e007      	b.n	8004a94 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	685a      	ldr	r2, [r3, #4]
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f022 0201 	bic.w	r2, r2, #1
 8004a92:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004a94:	68ba      	ldr	r2, [r7, #8]
 8004a96:	2164      	movs	r1, #100	; 0x64
 8004a98:	68f8      	ldr	r0, [r7, #12]
 8004a9a:	f000 fa89 	bl	8004fb0 <SPI_EndRxTransaction>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d002      	beq.n	8004aaa <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2220      	movs	r2, #32
 8004aa8:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2200      	movs	r2, #0
 8004aae:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d003      	beq.n	8004ac8 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004ac0:	68f8      	ldr	r0, [r7, #12]
 8004ac2:	f7ff ffa9 	bl	8004a18 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004ac6:	e002      	b.n	8004ace <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8004ac8:	68f8      	ldr	r0, [r7, #12]
 8004aca:	f7fd f8bf 	bl	8001c4c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004ace:	3710      	adds	r7, #16
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}

08004ad4 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b084      	sub	sp, #16
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ae0:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ae2:	f7fd fd71 	bl	80025c8 <HAL_GetTick>
 8004ae6:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004af2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004af6:	d02f      	beq.n	8004b58 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	685a      	ldr	r2, [r3, #4]
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f022 0220 	bic.w	r2, r2, #32
 8004b06:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004b08:	68ba      	ldr	r2, [r7, #8]
 8004b0a:	2164      	movs	r1, #100	; 0x64
 8004b0c:	68f8      	ldr	r0, [r7, #12]
 8004b0e:	f000 fab5 	bl	800507c <SPI_EndRxTxTransaction>
 8004b12:	4603      	mov	r3, r0
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d005      	beq.n	8004b24 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b1c:	f043 0220 	orr.w	r2, r3, #32
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	685a      	ldr	r2, [r3, #4]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f022 0203 	bic.w	r2, r2, #3
 8004b32:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2200      	movs	r2, #0
 8004b38:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2201      	movs	r2, #1
 8004b44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d003      	beq.n	8004b58 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004b50:	68f8      	ldr	r0, [r7, #12]
 8004b52:	f7ff ff61 	bl	8004a18 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004b56:	e002      	b.n	8004b5e <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8004b58:	68f8      	ldr	r0, [r7, #12]
 8004b5a:	f7ff ff3f 	bl	80049dc <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004b5e:	3710      	adds	r7, #16
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}

08004b64 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b084      	sub	sp, #16
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b70:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8004b72:	68f8      	ldr	r0, [r7, #12]
 8004b74:	f7ff ff3c 	bl	80049f0 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004b78:	bf00      	nop
 8004b7a:	3710      	adds	r7, #16
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}

08004b80 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b084      	sub	sp, #16
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b8c:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8004b8e:	68f8      	ldr	r0, [r7, #12]
 8004b90:	f7ff ff38 	bl	8004a04 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004b94:	bf00      	nop
 8004b96:	3710      	adds	r7, #16
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}

08004b9c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b084      	sub	sp, #16
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ba8:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	685a      	ldr	r2, [r3, #4]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f022 0203 	bic.w	r2, r2, #3
 8004bb8:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bbe:	f043 0210 	orr.w	r2, r3, #16
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2201      	movs	r2, #1
 8004bca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004bce:	68f8      	ldr	r0, [r7, #12]
 8004bd0:	f7ff ff22 	bl	8004a18 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004bd4:	bf00      	nop
 8004bd6:	3710      	adds	r7, #16
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}

08004bdc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b084      	sub	sp, #16
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2200      	movs	r2, #0
 8004bee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004bf6:	68f8      	ldr	r0, [r7, #12]
 8004bf8:	f7ff ff0e 	bl	8004a18 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004bfc:	bf00      	nop
 8004bfe:	3710      	adds	r7, #16
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}

08004c04 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b082      	sub	sp, #8
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f103 020c 	add.w	r2, r3, #12
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c18:	7812      	ldrb	r2, [r2, #0]
 8004c1a:	b2d2      	uxtb	r2, r2
 8004c1c:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c22:	1c5a      	adds	r2, r3, #1
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	3b01      	subs	r3, #1
 8004c30:	b29a      	uxth	r2, r3
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d10f      	bne.n	8004c60 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	685a      	ldr	r2, [r3, #4]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004c4e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c54:	b29b      	uxth	r3, r3
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d102      	bne.n	8004c60 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f000 fa50 	bl	8005100 <SPI_CloseRxTx_ISR>
    }
  }
}
 8004c60:	bf00      	nop
 8004c62:	3708      	adds	r7, #8
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}

08004c68 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b082      	sub	sp, #8
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	330c      	adds	r3, #12
 8004c7a:	7812      	ldrb	r2, [r2, #0]
 8004c7c:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c82:	1c5a      	adds	r2, r3, #1
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	3b01      	subs	r3, #1
 8004c90:	b29a      	uxth	r2, r3
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d10f      	bne.n	8004cc0 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	685a      	ldr	r2, [r3, #4]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004cae:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d102      	bne.n	8004cc0 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f000 fa20 	bl	8005100 <SPI_CloseRxTx_ISR>
    }
  }
}
 8004cc0:	bf00      	nop
 8004cc2:	3708      	adds	r7, #8
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}

08004cc8 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b082      	sub	sp, #8
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	68da      	ldr	r2, [r3, #12]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cda:	b292      	uxth	r2, r2
 8004cdc:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce2:	1c9a      	adds	r2, r3, #2
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cec:	b29b      	uxth	r3, r3
 8004cee:	3b01      	subs	r3, #1
 8004cf0:	b29a      	uxth	r2, r3
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cfa:	b29b      	uxth	r3, r3
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d10f      	bne.n	8004d20 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	685a      	ldr	r2, [r3, #4]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d0e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d102      	bne.n	8004d20 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f000 f9f0 	bl	8005100 <SPI_CloseRxTx_ISR>
    }
  }
}
 8004d20:	bf00      	nop
 8004d22:	3708      	adds	r7, #8
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}

08004d28 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b082      	sub	sp, #8
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d34:	881a      	ldrh	r2, [r3, #0]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d40:	1c9a      	adds	r2, r3, #2
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d4a:	b29b      	uxth	r3, r3
 8004d4c:	3b01      	subs	r3, #1
 8004d4e:	b29a      	uxth	r2, r3
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d10f      	bne.n	8004d7e <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	685a      	ldr	r2, [r3, #4]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d6c:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d102      	bne.n	8004d7e <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	f000 f9c1 	bl	8005100 <SPI_CloseRxTx_ISR>
    }
  }
}
 8004d7e:	bf00      	nop
 8004d80:	3708      	adds	r7, #8
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}

08004d86 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004d86:	b580      	push	{r7, lr}
 8004d88:	b082      	sub	sp, #8
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f103 020c 	add.w	r2, r3, #12
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d9a:	7812      	ldrb	r2, [r2, #0]
 8004d9c:	b2d2      	uxtb	r2, r2
 8004d9e:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004da4:	1c5a      	adds	r2, r3, #1
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	3b01      	subs	r3, #1
 8004db2:	b29a      	uxth	r2, r3
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	87da      	strh	r2, [r3, #62]	; 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d102      	bne.n	8004dc8 <SPI_RxISR_8BIT+0x42>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f000 fa10 	bl	80051e8 <SPI_CloseRx_ISR>
  }
}
 8004dc8:	bf00      	nop
 8004dca:	3708      	adds	r7, #8
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}

08004dd0 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b082      	sub	sp, #8
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	68da      	ldr	r2, [r3, #12]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004de2:	b292      	uxth	r2, r2
 8004de4:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dea:	1c9a      	adds	r2, r3, #2
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004df4:	b29b      	uxth	r3, r3
 8004df6:	3b01      	subs	r3, #1
 8004df8:	b29a      	uxth	r2, r3
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	87da      	strh	r2, [r3, #62]	; 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d102      	bne.n	8004e0e <SPI_RxISR_16BIT+0x3e>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f000 f9ed 	bl	80051e8 <SPI_CloseRx_ISR>
  }
}
 8004e0e:	bf00      	nop
 8004e10:	3708      	adds	r7, #8
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}

08004e16 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004e16:	b580      	push	{r7, lr}
 8004e18:	b082      	sub	sp, #8
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	330c      	adds	r3, #12
 8004e28:	7812      	ldrb	r2, [r2, #0]
 8004e2a:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e30:	1c5a      	adds	r2, r3, #1
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e3a:	b29b      	uxth	r3, r3
 8004e3c:	3b01      	subs	r3, #1
 8004e3e:	b29a      	uxth	r2, r3
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d102      	bne.n	8004e54 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f000 fa0a 	bl	8005268 <SPI_CloseTx_ISR>
  }
}
 8004e54:	bf00      	nop
 8004e56:	3708      	adds	r7, #8
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}

08004e5c <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b082      	sub	sp, #8
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e68:	881a      	ldrh	r2, [r3, #0]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e74:	1c9a      	adds	r2, r3, #2
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	3b01      	subs	r3, #1
 8004e82:	b29a      	uxth	r2, r3
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d102      	bne.n	8004e98 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f000 f9e8 	bl	8005268 <SPI_CloseTx_ISR>
  }
}
 8004e98:	bf00      	nop
 8004e9a:	3708      	adds	r7, #8
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}

08004ea0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b088      	sub	sp, #32
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	60f8      	str	r0, [r7, #12]
 8004ea8:	60b9      	str	r1, [r7, #8]
 8004eaa:	603b      	str	r3, [r7, #0]
 8004eac:	4613      	mov	r3, r2
 8004eae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004eb0:	f7fd fb8a 	bl	80025c8 <HAL_GetTick>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eb8:	1a9b      	subs	r3, r3, r2
 8004eba:	683a      	ldr	r2, [r7, #0]
 8004ebc:	4413      	add	r3, r2
 8004ebe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004ec0:	f7fd fb82 	bl	80025c8 <HAL_GetTick>
 8004ec4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004ec6:	4b39      	ldr	r3, [pc, #228]	; (8004fac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	015b      	lsls	r3, r3, #5
 8004ecc:	0d1b      	lsrs	r3, r3, #20
 8004ece:	69fa      	ldr	r2, [r7, #28]
 8004ed0:	fb02 f303 	mul.w	r3, r2, r3
 8004ed4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ed6:	e054      	b.n	8004f82 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ede:	d050      	beq.n	8004f82 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004ee0:	f7fd fb72 	bl	80025c8 <HAL_GetTick>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	69bb      	ldr	r3, [r7, #24]
 8004ee8:	1ad3      	subs	r3, r2, r3
 8004eea:	69fa      	ldr	r2, [r7, #28]
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d902      	bls.n	8004ef6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004ef0:	69fb      	ldr	r3, [r7, #28]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d13d      	bne.n	8004f72 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	685a      	ldr	r2, [r3, #4]
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004f04:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f0e:	d111      	bne.n	8004f34 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f18:	d004      	beq.n	8004f24 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f22:	d107      	bne.n	8004f34 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f32:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f3c:	d10f      	bne.n	8004f5e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f4c:	601a      	str	r2, [r3, #0]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f5c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2201      	movs	r2, #1
 8004f62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004f6e:	2303      	movs	r3, #3
 8004f70:	e017      	b.n	8004fa2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d101      	bne.n	8004f7c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	3b01      	subs	r3, #1
 8004f80:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	689a      	ldr	r2, [r3, #8]
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	4013      	ands	r3, r2
 8004f8c:	68ba      	ldr	r2, [r7, #8]
 8004f8e:	429a      	cmp	r2, r3
 8004f90:	bf0c      	ite	eq
 8004f92:	2301      	moveq	r3, #1
 8004f94:	2300      	movne	r3, #0
 8004f96:	b2db      	uxtb	r3, r3
 8004f98:	461a      	mov	r2, r3
 8004f9a:	79fb      	ldrb	r3, [r7, #7]
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d19b      	bne.n	8004ed8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004fa0:	2300      	movs	r3, #0
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3720      	adds	r7, #32
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}
 8004faa:	bf00      	nop
 8004fac:	200006f0 	.word	0x200006f0

08004fb0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b086      	sub	sp, #24
 8004fb4:	af02      	add	r7, sp, #8
 8004fb6:	60f8      	str	r0, [r7, #12]
 8004fb8:	60b9      	str	r1, [r7, #8]
 8004fba:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fc4:	d111      	bne.n	8004fea <SPI_EndRxTransaction+0x3a>
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	689b      	ldr	r3, [r3, #8]
 8004fca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fce:	d004      	beq.n	8004fda <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	689b      	ldr	r3, [r3, #8]
 8004fd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fd8:	d107      	bne.n	8004fea <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fe8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ff2:	d12a      	bne.n	800504a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ffc:	d012      	beq.n	8005024 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	9300      	str	r3, [sp, #0]
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	2200      	movs	r2, #0
 8005006:	2180      	movs	r1, #128	; 0x80
 8005008:	68f8      	ldr	r0, [r7, #12]
 800500a:	f7ff ff49 	bl	8004ea0 <SPI_WaitFlagStateUntilTimeout>
 800500e:	4603      	mov	r3, r0
 8005010:	2b00      	cmp	r3, #0
 8005012:	d02d      	beq.n	8005070 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005018:	f043 0220 	orr.w	r2, r3, #32
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005020:	2303      	movs	r3, #3
 8005022:	e026      	b.n	8005072 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	9300      	str	r3, [sp, #0]
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	2200      	movs	r2, #0
 800502c:	2101      	movs	r1, #1
 800502e:	68f8      	ldr	r0, [r7, #12]
 8005030:	f7ff ff36 	bl	8004ea0 <SPI_WaitFlagStateUntilTimeout>
 8005034:	4603      	mov	r3, r0
 8005036:	2b00      	cmp	r3, #0
 8005038:	d01a      	beq.n	8005070 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800503e:	f043 0220 	orr.w	r2, r3, #32
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005046:	2303      	movs	r3, #3
 8005048:	e013      	b.n	8005072 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	9300      	str	r3, [sp, #0]
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	2200      	movs	r2, #0
 8005052:	2101      	movs	r1, #1
 8005054:	68f8      	ldr	r0, [r7, #12]
 8005056:	f7ff ff23 	bl	8004ea0 <SPI_WaitFlagStateUntilTimeout>
 800505a:	4603      	mov	r3, r0
 800505c:	2b00      	cmp	r3, #0
 800505e:	d007      	beq.n	8005070 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005064:	f043 0220 	orr.w	r2, r3, #32
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800506c:	2303      	movs	r3, #3
 800506e:	e000      	b.n	8005072 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005070:	2300      	movs	r3, #0
}
 8005072:	4618      	mov	r0, r3
 8005074:	3710      	adds	r7, #16
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}
	...

0800507c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b088      	sub	sp, #32
 8005080:	af02      	add	r7, sp, #8
 8005082:	60f8      	str	r0, [r7, #12]
 8005084:	60b9      	str	r1, [r7, #8]
 8005086:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005088:	4b1b      	ldr	r3, [pc, #108]	; (80050f8 <SPI_EndRxTxTransaction+0x7c>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a1b      	ldr	r2, [pc, #108]	; (80050fc <SPI_EndRxTxTransaction+0x80>)
 800508e:	fba2 2303 	umull	r2, r3, r2, r3
 8005092:	0d5b      	lsrs	r3, r3, #21
 8005094:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005098:	fb02 f303 	mul.w	r3, r2, r3
 800509c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050a6:	d112      	bne.n	80050ce <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	9300      	str	r3, [sp, #0]
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	2200      	movs	r2, #0
 80050b0:	2180      	movs	r1, #128	; 0x80
 80050b2:	68f8      	ldr	r0, [r7, #12]
 80050b4:	f7ff fef4 	bl	8004ea0 <SPI_WaitFlagStateUntilTimeout>
 80050b8:	4603      	mov	r3, r0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d016      	beq.n	80050ec <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050c2:	f043 0220 	orr.w	r2, r3, #32
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80050ca:	2303      	movs	r3, #3
 80050cc:	e00f      	b.n	80050ee <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d00a      	beq.n	80050ea <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	3b01      	subs	r3, #1
 80050d8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050e4:	2b80      	cmp	r3, #128	; 0x80
 80050e6:	d0f2      	beq.n	80050ce <SPI_EndRxTxTransaction+0x52>
 80050e8:	e000      	b.n	80050ec <SPI_EndRxTxTransaction+0x70>
        break;
 80050ea:	bf00      	nop
  }

  return HAL_OK;
 80050ec:	2300      	movs	r3, #0
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3718      	adds	r7, #24
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	bf00      	nop
 80050f8:	200006f0 	.word	0x200006f0
 80050fc:	165e9f81 	.word	0x165e9f81

08005100 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b086      	sub	sp, #24
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8005108:	4b35      	ldr	r3, [pc, #212]	; (80051e0 <SPI_CloseRxTx_ISR+0xe0>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a35      	ldr	r2, [pc, #212]	; (80051e4 <SPI_CloseRxTx_ISR+0xe4>)
 800510e:	fba2 2303 	umull	r2, r3, r2, r3
 8005112:	0a5b      	lsrs	r3, r3, #9
 8005114:	2264      	movs	r2, #100	; 0x64
 8005116:	fb02 f303 	mul.w	r3, r2, r3
 800511a:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800511c:	f7fd fa54 	bl	80025c8 <HAL_GetTick>
 8005120:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	685a      	ldr	r2, [r3, #4]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f022 0220 	bic.w	r2, r2, #32
 8005130:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d106      	bne.n	8005146 <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800513c:	f043 0220 	orr.w	r2, r3, #32
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005144:	e009      	b.n	800515a <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	3b01      	subs	r3, #1
 800514a:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	f003 0302 	and.w	r3, r3, #2
 8005156:	2b00      	cmp	r3, #0
 8005158:	d0eb      	beq.n	8005132 <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800515a:	697a      	ldr	r2, [r7, #20]
 800515c:	2164      	movs	r1, #100	; 0x64
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f7ff ff8c 	bl	800507c <SPI_EndRxTxTransaction>
 8005164:	4603      	mov	r3, r0
 8005166:	2b00      	cmp	r3, #0
 8005168:	d005      	beq.n	8005176 <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800516e:	f043 0220 	orr.w	r2, r3, #32
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d10a      	bne.n	8005194 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800517e:	2300      	movs	r3, #0
 8005180:	60fb      	str	r3, [r7, #12]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	68db      	ldr	r3, [r3, #12]
 8005188:	60fb      	str	r3, [r7, #12]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	60fb      	str	r3, [r7, #12]
 8005192:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005198:	2b00      	cmp	r3, #0
 800519a:	d115      	bne.n	80051c8 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80051a2:	b2db      	uxtb	r3, r3
 80051a4:	2b04      	cmp	r3, #4
 80051a6:	d107      	bne.n	80051b8 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f7fc fd4b 	bl	8001c4c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80051b6:	e00e      	b.n	80051d6 <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	f7ff fc0b 	bl	80049dc <HAL_SPI_TxRxCpltCallback>
}
 80051c6:	e006      	b.n	80051d6 <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 80051d0:	6878      	ldr	r0, [r7, #4]
 80051d2:	f7ff fc21 	bl	8004a18 <HAL_SPI_ErrorCallback>
}
 80051d6:	bf00      	nop
 80051d8:	3718      	adds	r7, #24
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}
 80051de:	bf00      	nop
 80051e0:	200006f0 	.word	0x200006f0
 80051e4:	057619f1 	.word	0x057619f1

080051e8 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b084      	sub	sp, #16
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	685a      	ldr	r2, [r3, #4]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80051fe:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8005200:	f7fd f9e2 	bl	80025c8 <HAL_GetTick>
 8005204:	4603      	mov	r3, r0
 8005206:	461a      	mov	r2, r3
 8005208:	2164      	movs	r1, #100	; 0x64
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f7ff fed0 	bl	8004fb0 <SPI_EndRxTransaction>
 8005210:	4603      	mov	r3, r0
 8005212:	2b00      	cmp	r3, #0
 8005214:	d005      	beq.n	8005222 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800521a:	f043 0220 	orr.w	r2, r3, #32
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d10a      	bne.n	8005240 <SPI_CloseRx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800522a:	2300      	movs	r3, #0
 800522c:	60fb      	str	r3, [r7, #12]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	60fb      	str	r3, [r7, #12]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	60fb      	str	r3, [r7, #12]
 800523e:	68fb      	ldr	r3, [r7, #12]
  }
  hspi->State = HAL_SPI_STATE_READY;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2201      	movs	r2, #1
 8005244:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800524c:	2b00      	cmp	r3, #0
 800524e:	d103      	bne.n	8005258 <SPI_CloseRx_ISR+0x70>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	f7fc fcfb 	bl	8001c4c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8005256:	e002      	b.n	800525e <SPI_CloseRx_ISR+0x76>
      HAL_SPI_ErrorCallback(hspi);
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	f7ff fbdd 	bl	8004a18 <HAL_SPI_ErrorCallback>
}
 800525e:	bf00      	nop
 8005260:	3710      	adds	r7, #16
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}
	...

08005268 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b086      	sub	sp, #24
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8005270:	4b2c      	ldr	r3, [pc, #176]	; (8005324 <SPI_CloseTx_ISR+0xbc>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a2c      	ldr	r2, [pc, #176]	; (8005328 <SPI_CloseTx_ISR+0xc0>)
 8005276:	fba2 2303 	umull	r2, r3, r2, r3
 800527a:	0a5b      	lsrs	r3, r3, #9
 800527c:	2264      	movs	r2, #100	; 0x64
 800527e:	fb02 f303 	mul.w	r3, r2, r3
 8005282:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005284:	f7fd f9a0 	bl	80025c8 <HAL_GetTick>
 8005288:	6178      	str	r0, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d106      	bne.n	800529e <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005294:	f043 0220 	orr.w	r2, r3, #32
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800529c:	e009      	b.n	80052b2 <SPI_CloseTx_ISR+0x4a>
    }
    count--;
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	3b01      	subs	r3, #1
 80052a2:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	f003 0302 	and.w	r3, r3, #2
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d0eb      	beq.n	800528a <SPI_CloseTx_ISR+0x22>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	685a      	ldr	r2, [r3, #4]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80052c0:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80052c2:	697a      	ldr	r2, [r7, #20]
 80052c4:	2164      	movs	r1, #100	; 0x64
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f7ff fed8 	bl	800507c <SPI_EndRxTxTransaction>
 80052cc:	4603      	mov	r3, r0
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d005      	beq.n	80052de <SPI_CloseTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052d6:	f043 0220 	orr.w	r2, r3, #32
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d10a      	bne.n	80052fc <SPI_CloseTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80052e6:	2300      	movs	r3, #0
 80052e8:	60fb      	str	r3, [r7, #12]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	68db      	ldr	r3, [r3, #12]
 80052f0:	60fb      	str	r3, [r7, #12]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	60fb      	str	r3, [r7, #12]
 80052fa:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2201      	movs	r2, #1
 8005300:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005308:	2b00      	cmp	r3, #0
 800530a:	d003      	beq.n	8005314 <SPI_CloseTx_ISR+0xac>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f7ff fb83 	bl	8004a18 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8005312:	e002      	b.n	800531a <SPI_CloseTx_ISR+0xb2>
    HAL_SPI_TxCpltCallback(hspi);
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f7fc fc83 	bl	8001c20 <HAL_SPI_TxCpltCallback>
}
 800531a:	bf00      	nop
 800531c:	3718      	adds	r7, #24
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}
 8005322:	bf00      	nop
 8005324:	200006f0 	.word	0x200006f0
 8005328:	057619f1 	.word	0x057619f1

0800532c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b082      	sub	sp, #8
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d101      	bne.n	800533e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	e03f      	b.n	80053be <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005344:	b2db      	uxtb	r3, r3
 8005346:	2b00      	cmp	r3, #0
 8005348:	d106      	bne.n	8005358 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2200      	movs	r2, #0
 800534e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f7fc ff52 	bl	80021fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2224      	movs	r2, #36	; 0x24
 800535c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	68da      	ldr	r2, [r3, #12]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800536e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	f000 fa97 	bl	80058a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	691a      	ldr	r2, [r3, #16]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005384:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	695a      	ldr	r2, [r3, #20]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005394:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	68da      	ldr	r2, [r3, #12]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80053a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2200      	movs	r2, #0
 80053aa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2220      	movs	r2, #32
 80053b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2220      	movs	r2, #32
 80053b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80053bc:	2300      	movs	r3, #0
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3708      	adds	r7, #8
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}

080053c6 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80053c6:	b580      	push	{r7, lr}
 80053c8:	b084      	sub	sp, #16
 80053ca:	af00      	add	r7, sp, #0
 80053cc:	60f8      	str	r0, [r7, #12]
 80053ce:	60b9      	str	r1, [r7, #8]
 80053d0:	4613      	mov	r3, r2
 80053d2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80053da:	b2db      	uxtb	r3, r3
 80053dc:	2b20      	cmp	r3, #32
 80053de:	d11d      	bne.n	800541c <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d002      	beq.n	80053ec <HAL_UART_Receive_DMA+0x26>
 80053e6:	88fb      	ldrh	r3, [r7, #6]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d101      	bne.n	80053f0 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80053ec:	2301      	movs	r3, #1
 80053ee:	e016      	b.n	800541e <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053f6:	2b01      	cmp	r3, #1
 80053f8:	d101      	bne.n	80053fe <HAL_UART_Receive_DMA+0x38>
 80053fa:	2302      	movs	r3, #2
 80053fc:	e00f      	b.n	800541e <HAL_UART_Receive_DMA+0x58>
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2201      	movs	r2, #1
 8005402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2200      	movs	r2, #0
 800540a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800540c:	88fb      	ldrh	r3, [r7, #6]
 800540e:	461a      	mov	r2, r3
 8005410:	68b9      	ldr	r1, [r7, #8]
 8005412:	68f8      	ldr	r0, [r7, #12]
 8005414:	f000 f920 	bl	8005658 <UART_Start_Receive_DMA>
 8005418:	4603      	mov	r3, r0
 800541a:	e000      	b.n	800541e <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800541c:	2302      	movs	r3, #2
  }
}
 800541e:	4618      	mov	r0, r3
 8005420:	3710      	adds	r7, #16
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}

08005426 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005426:	b480      	push	{r7}
 8005428:	b083      	sub	sp, #12
 800542a:	af00      	add	r7, sp, #0
 800542c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800542e:	bf00      	nop
 8005430:	370c      	adds	r7, #12
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr

0800543a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800543a:	b480      	push	{r7}
 800543c:	b083      	sub	sp, #12
 800543e:	af00      	add	r7, sp, #0
 8005440:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005442:	bf00      	nop
 8005444:	370c      	adds	r7, #12
 8005446:	46bd      	mov	sp, r7
 8005448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544c:	4770      	bx	lr

0800544e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800544e:	b480      	push	{r7}
 8005450:	b083      	sub	sp, #12
 8005452:	af00      	add	r7, sp, #0
 8005454:	6078      	str	r0, [r7, #4]
 8005456:	460b      	mov	r3, r1
 8005458:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800545a:	bf00      	nop
 800545c:	370c      	adds	r7, #12
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr

08005466 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005466:	b580      	push	{r7, lr}
 8005468:	b09c      	sub	sp, #112	; 0x70
 800546a:	af00      	add	r7, sp, #0
 800546c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005472:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800547e:	2b00      	cmp	r3, #0
 8005480:	d172      	bne.n	8005568 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005482:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005484:	2200      	movs	r2, #0
 8005486:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005488:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	330c      	adds	r3, #12
 800548e:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005490:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005492:	e853 3f00 	ldrex	r3, [r3]
 8005496:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005498:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800549a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800549e:	66bb      	str	r3, [r7, #104]	; 0x68
 80054a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	330c      	adds	r3, #12
 80054a6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80054a8:	65ba      	str	r2, [r7, #88]	; 0x58
 80054aa:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80054ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80054b0:	e841 2300 	strex	r3, r2, [r1]
 80054b4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80054b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d1e5      	bne.n	8005488 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	3314      	adds	r3, #20
 80054c2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054c6:	e853 3f00 	ldrex	r3, [r3]
 80054ca:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80054cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054ce:	f023 0301 	bic.w	r3, r3, #1
 80054d2:	667b      	str	r3, [r7, #100]	; 0x64
 80054d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	3314      	adds	r3, #20
 80054da:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80054dc:	647a      	str	r2, [r7, #68]	; 0x44
 80054de:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054e0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80054e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80054e4:	e841 2300 	strex	r3, r2, [r1]
 80054e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80054ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d1e5      	bne.n	80054bc <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	3314      	adds	r3, #20
 80054f6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054fa:	e853 3f00 	ldrex	r3, [r3]
 80054fe:	623b      	str	r3, [r7, #32]
   return(result);
 8005500:	6a3b      	ldr	r3, [r7, #32]
 8005502:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005506:	663b      	str	r3, [r7, #96]	; 0x60
 8005508:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	3314      	adds	r3, #20
 800550e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005510:	633a      	str	r2, [r7, #48]	; 0x30
 8005512:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005514:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005516:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005518:	e841 2300 	strex	r3, r2, [r1]
 800551c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800551e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005520:	2b00      	cmp	r3, #0
 8005522:	d1e5      	bne.n	80054f0 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005524:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005526:	2220      	movs	r2, #32
 8005528:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800552c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800552e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005530:	2b01      	cmp	r3, #1
 8005532:	d119      	bne.n	8005568 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005534:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	330c      	adds	r3, #12
 800553a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	e853 3f00 	ldrex	r3, [r3]
 8005542:	60fb      	str	r3, [r7, #12]
   return(result);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f023 0310 	bic.w	r3, r3, #16
 800554a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800554c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	330c      	adds	r3, #12
 8005552:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005554:	61fa      	str	r2, [r7, #28]
 8005556:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005558:	69b9      	ldr	r1, [r7, #24]
 800555a:	69fa      	ldr	r2, [r7, #28]
 800555c:	e841 2300 	strex	r3, r2, [r1]
 8005560:	617b      	str	r3, [r7, #20]
   return(result);
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d1e5      	bne.n	8005534 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005568:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800556a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800556c:	2b01      	cmp	r3, #1
 800556e:	d106      	bne.n	800557e <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005570:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005572:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005574:	4619      	mov	r1, r3
 8005576:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005578:	f7ff ff69 	bl	800544e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800557c:	e002      	b.n	8005584 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800557e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005580:	f7fc faf0 	bl	8001b64 <HAL_UART_RxCpltCallback>
}
 8005584:	bf00      	nop
 8005586:	3770      	adds	r7, #112	; 0x70
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}

0800558c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b084      	sub	sp, #16
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005598:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800559e:	2b01      	cmp	r3, #1
 80055a0:	d108      	bne.n	80055b4 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80055a6:	085b      	lsrs	r3, r3, #1
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	4619      	mov	r1, r3
 80055ac:	68f8      	ldr	r0, [r7, #12]
 80055ae:	f7ff ff4e 	bl	800544e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80055b2:	e002      	b.n	80055ba <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80055b4:	68f8      	ldr	r0, [r7, #12]
 80055b6:	f7ff ff36 	bl	8005426 <HAL_UART_RxHalfCpltCallback>
}
 80055ba:	bf00      	nop
 80055bc:	3710      	adds	r7, #16
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}

080055c2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80055c2:	b580      	push	{r7, lr}
 80055c4:	b084      	sub	sp, #16
 80055c6:	af00      	add	r7, sp, #0
 80055c8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80055ca:	2300      	movs	r3, #0
 80055cc:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055d2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	695b      	ldr	r3, [r3, #20]
 80055da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055de:	2b80      	cmp	r3, #128	; 0x80
 80055e0:	bf0c      	ite	eq
 80055e2:	2301      	moveq	r3, #1
 80055e4:	2300      	movne	r3, #0
 80055e6:	b2db      	uxtb	r3, r3
 80055e8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055f0:	b2db      	uxtb	r3, r3
 80055f2:	2b21      	cmp	r3, #33	; 0x21
 80055f4:	d108      	bne.n	8005608 <UART_DMAError+0x46>
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d005      	beq.n	8005608 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	2200      	movs	r2, #0
 8005600:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005602:	68b8      	ldr	r0, [r7, #8]
 8005604:	f000 f8c2 	bl	800578c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	695b      	ldr	r3, [r3, #20]
 800560e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005612:	2b40      	cmp	r3, #64	; 0x40
 8005614:	bf0c      	ite	eq
 8005616:	2301      	moveq	r3, #1
 8005618:	2300      	movne	r3, #0
 800561a:	b2db      	uxtb	r3, r3
 800561c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005624:	b2db      	uxtb	r3, r3
 8005626:	2b22      	cmp	r3, #34	; 0x22
 8005628:	d108      	bne.n	800563c <UART_DMAError+0x7a>
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d005      	beq.n	800563c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	2200      	movs	r2, #0
 8005634:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005636:	68b8      	ldr	r0, [r7, #8]
 8005638:	f000 f8d0 	bl	80057dc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005640:	f043 0210 	orr.w	r2, r3, #16
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005648:	68b8      	ldr	r0, [r7, #8]
 800564a:	f7ff fef6 	bl	800543a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800564e:	bf00      	nop
 8005650:	3710      	adds	r7, #16
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}
	...

08005658 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b098      	sub	sp, #96	; 0x60
 800565c:	af00      	add	r7, sp, #0
 800565e:	60f8      	str	r0, [r7, #12]
 8005660:	60b9      	str	r1, [r7, #8]
 8005662:	4613      	mov	r3, r2
 8005664:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005666:	68ba      	ldr	r2, [r7, #8]
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	88fa      	ldrh	r2, [r7, #6]
 8005670:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2200      	movs	r2, #0
 8005676:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2222      	movs	r2, #34	; 0x22
 800567c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005684:	4a3e      	ldr	r2, [pc, #248]	; (8005780 <UART_Start_Receive_DMA+0x128>)
 8005686:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800568c:	4a3d      	ldr	r2, [pc, #244]	; (8005784 <UART_Start_Receive_DMA+0x12c>)
 800568e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005694:	4a3c      	ldr	r2, [pc, #240]	; (8005788 <UART_Start_Receive_DMA+0x130>)
 8005696:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800569c:	2200      	movs	r2, #0
 800569e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80056a0:	f107 0308 	add.w	r3, r7, #8
 80056a4:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	3304      	adds	r3, #4
 80056b0:	4619      	mov	r1, r3
 80056b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	88fb      	ldrh	r3, [r7, #6]
 80056b8:	f7fd f952 	bl	8002960 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80056bc:	2300      	movs	r3, #0
 80056be:	613b      	str	r3, [r7, #16]
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	613b      	str	r3, [r7, #16]
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	613b      	str	r3, [r7, #16]
 80056d0:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2200      	movs	r2, #0
 80056d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	330c      	adds	r3, #12
 80056e0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056e4:	e853 3f00 	ldrex	r3, [r3]
 80056e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80056ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056f0:	65bb      	str	r3, [r7, #88]	; 0x58
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	330c      	adds	r3, #12
 80056f8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80056fa:	64fa      	str	r2, [r7, #76]	; 0x4c
 80056fc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056fe:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005700:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005702:	e841 2300 	strex	r3, r2, [r1]
 8005706:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005708:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800570a:	2b00      	cmp	r3, #0
 800570c:	d1e5      	bne.n	80056da <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	3314      	adds	r3, #20
 8005714:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005718:	e853 3f00 	ldrex	r3, [r3]
 800571c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800571e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005720:	f043 0301 	orr.w	r3, r3, #1
 8005724:	657b      	str	r3, [r7, #84]	; 0x54
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	3314      	adds	r3, #20
 800572c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800572e:	63ba      	str	r2, [r7, #56]	; 0x38
 8005730:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005732:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005734:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005736:	e841 2300 	strex	r3, r2, [r1]
 800573a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800573c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800573e:	2b00      	cmp	r3, #0
 8005740:	d1e5      	bne.n	800570e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	3314      	adds	r3, #20
 8005748:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800574a:	69bb      	ldr	r3, [r7, #24]
 800574c:	e853 3f00 	ldrex	r3, [r3]
 8005750:	617b      	str	r3, [r7, #20]
   return(result);
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005758:	653b      	str	r3, [r7, #80]	; 0x50
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	3314      	adds	r3, #20
 8005760:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005762:	627a      	str	r2, [r7, #36]	; 0x24
 8005764:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005766:	6a39      	ldr	r1, [r7, #32]
 8005768:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800576a:	e841 2300 	strex	r3, r2, [r1]
 800576e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005770:	69fb      	ldr	r3, [r7, #28]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d1e5      	bne.n	8005742 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8005776:	2300      	movs	r3, #0
}
 8005778:	4618      	mov	r0, r3
 800577a:	3760      	adds	r7, #96	; 0x60
 800577c:	46bd      	mov	sp, r7
 800577e:	bd80      	pop	{r7, pc}
 8005780:	08005467 	.word	0x08005467
 8005784:	0800558d 	.word	0x0800558d
 8005788:	080055c3 	.word	0x080055c3

0800578c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800578c:	b480      	push	{r7}
 800578e:	b089      	sub	sp, #36	; 0x24
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	330c      	adds	r3, #12
 800579a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	e853 3f00 	ldrex	r3, [r3]
 80057a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80057aa:	61fb      	str	r3, [r7, #28]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	330c      	adds	r3, #12
 80057b2:	69fa      	ldr	r2, [r7, #28]
 80057b4:	61ba      	str	r2, [r7, #24]
 80057b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057b8:	6979      	ldr	r1, [r7, #20]
 80057ba:	69ba      	ldr	r2, [r7, #24]
 80057bc:	e841 2300 	strex	r3, r2, [r1]
 80057c0:	613b      	str	r3, [r7, #16]
   return(result);
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d1e5      	bne.n	8005794 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2220      	movs	r2, #32
 80057cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80057d0:	bf00      	nop
 80057d2:	3724      	adds	r7, #36	; 0x24
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr

080057dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80057dc:	b480      	push	{r7}
 80057de:	b095      	sub	sp, #84	; 0x54
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	330c      	adds	r3, #12
 80057ea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057ee:	e853 3f00 	ldrex	r3, [r3]
 80057f2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80057f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057f6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80057fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	330c      	adds	r3, #12
 8005802:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005804:	643a      	str	r2, [r7, #64]	; 0x40
 8005806:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005808:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800580a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800580c:	e841 2300 	strex	r3, r2, [r1]
 8005810:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005814:	2b00      	cmp	r3, #0
 8005816:	d1e5      	bne.n	80057e4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	3314      	adds	r3, #20
 800581e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005820:	6a3b      	ldr	r3, [r7, #32]
 8005822:	e853 3f00 	ldrex	r3, [r3]
 8005826:	61fb      	str	r3, [r7, #28]
   return(result);
 8005828:	69fb      	ldr	r3, [r7, #28]
 800582a:	f023 0301 	bic.w	r3, r3, #1
 800582e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	3314      	adds	r3, #20
 8005836:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005838:	62fa      	str	r2, [r7, #44]	; 0x2c
 800583a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800583c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800583e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005840:	e841 2300 	strex	r3, r2, [r1]
 8005844:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005848:	2b00      	cmp	r3, #0
 800584a:	d1e5      	bne.n	8005818 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005850:	2b01      	cmp	r3, #1
 8005852:	d119      	bne.n	8005888 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	330c      	adds	r3, #12
 800585a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	e853 3f00 	ldrex	r3, [r3]
 8005862:	60bb      	str	r3, [r7, #8]
   return(result);
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	f023 0310 	bic.w	r3, r3, #16
 800586a:	647b      	str	r3, [r7, #68]	; 0x44
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	330c      	adds	r3, #12
 8005872:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005874:	61ba      	str	r2, [r7, #24]
 8005876:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005878:	6979      	ldr	r1, [r7, #20]
 800587a:	69ba      	ldr	r2, [r7, #24]
 800587c:	e841 2300 	strex	r3, r2, [r1]
 8005880:	613b      	str	r3, [r7, #16]
   return(result);
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d1e5      	bne.n	8005854 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2220      	movs	r2, #32
 800588c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2200      	movs	r2, #0
 8005894:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005896:	bf00      	nop
 8005898:	3754      	adds	r7, #84	; 0x54
 800589a:	46bd      	mov	sp, r7
 800589c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a0:	4770      	bx	lr
	...

080058a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058a8:	b09f      	sub	sp, #124	; 0x7c
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	691b      	ldr	r3, [r3, #16]
 80058b4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80058b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058ba:	68d9      	ldr	r1, [r3, #12]
 80058bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	ea40 0301 	orr.w	r3, r0, r1
 80058c4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80058c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058c8:	689a      	ldr	r2, [r3, #8]
 80058ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058cc:	691b      	ldr	r3, [r3, #16]
 80058ce:	431a      	orrs	r2, r3
 80058d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058d2:	695b      	ldr	r3, [r3, #20]
 80058d4:	431a      	orrs	r2, r3
 80058d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058d8:	69db      	ldr	r3, [r3, #28]
 80058da:	4313      	orrs	r3, r2
 80058dc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80058de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	68db      	ldr	r3, [r3, #12]
 80058e4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80058e8:	f021 010c 	bic.w	r1, r1, #12
 80058ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80058f2:	430b      	orrs	r3, r1
 80058f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80058f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	695b      	ldr	r3, [r3, #20]
 80058fc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005900:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005902:	6999      	ldr	r1, [r3, #24]
 8005904:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005906:	681a      	ldr	r2, [r3, #0]
 8005908:	ea40 0301 	orr.w	r3, r0, r1
 800590c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800590e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005910:	681a      	ldr	r2, [r3, #0]
 8005912:	4bc5      	ldr	r3, [pc, #788]	; (8005c28 <UART_SetConfig+0x384>)
 8005914:	429a      	cmp	r2, r3
 8005916:	d004      	beq.n	8005922 <UART_SetConfig+0x7e>
 8005918:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	4bc3      	ldr	r3, [pc, #780]	; (8005c2c <UART_SetConfig+0x388>)
 800591e:	429a      	cmp	r2, r3
 8005920:	d103      	bne.n	800592a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005922:	f7fe fb37 	bl	8003f94 <HAL_RCC_GetPCLK2Freq>
 8005926:	6778      	str	r0, [r7, #116]	; 0x74
 8005928:	e002      	b.n	8005930 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800592a:	f7fe fb1f 	bl	8003f6c <HAL_RCC_GetPCLK1Freq>
 800592e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005930:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005932:	69db      	ldr	r3, [r3, #28]
 8005934:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005938:	f040 80b6 	bne.w	8005aa8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800593c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800593e:	461c      	mov	r4, r3
 8005940:	f04f 0500 	mov.w	r5, #0
 8005944:	4622      	mov	r2, r4
 8005946:	462b      	mov	r3, r5
 8005948:	1891      	adds	r1, r2, r2
 800594a:	6439      	str	r1, [r7, #64]	; 0x40
 800594c:	415b      	adcs	r3, r3
 800594e:	647b      	str	r3, [r7, #68]	; 0x44
 8005950:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005954:	1912      	adds	r2, r2, r4
 8005956:	eb45 0303 	adc.w	r3, r5, r3
 800595a:	f04f 0000 	mov.w	r0, #0
 800595e:	f04f 0100 	mov.w	r1, #0
 8005962:	00d9      	lsls	r1, r3, #3
 8005964:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005968:	00d0      	lsls	r0, r2, #3
 800596a:	4602      	mov	r2, r0
 800596c:	460b      	mov	r3, r1
 800596e:	1911      	adds	r1, r2, r4
 8005970:	6639      	str	r1, [r7, #96]	; 0x60
 8005972:	416b      	adcs	r3, r5
 8005974:	667b      	str	r3, [r7, #100]	; 0x64
 8005976:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	461a      	mov	r2, r3
 800597c:	f04f 0300 	mov.w	r3, #0
 8005980:	1891      	adds	r1, r2, r2
 8005982:	63b9      	str	r1, [r7, #56]	; 0x38
 8005984:	415b      	adcs	r3, r3
 8005986:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005988:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800598c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005990:	f7fa fc7e 	bl	8000290 <__aeabi_uldivmod>
 8005994:	4602      	mov	r2, r0
 8005996:	460b      	mov	r3, r1
 8005998:	4ba5      	ldr	r3, [pc, #660]	; (8005c30 <UART_SetConfig+0x38c>)
 800599a:	fba3 2302 	umull	r2, r3, r3, r2
 800599e:	095b      	lsrs	r3, r3, #5
 80059a0:	011e      	lsls	r6, r3, #4
 80059a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059a4:	461c      	mov	r4, r3
 80059a6:	f04f 0500 	mov.w	r5, #0
 80059aa:	4622      	mov	r2, r4
 80059ac:	462b      	mov	r3, r5
 80059ae:	1891      	adds	r1, r2, r2
 80059b0:	6339      	str	r1, [r7, #48]	; 0x30
 80059b2:	415b      	adcs	r3, r3
 80059b4:	637b      	str	r3, [r7, #52]	; 0x34
 80059b6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80059ba:	1912      	adds	r2, r2, r4
 80059bc:	eb45 0303 	adc.w	r3, r5, r3
 80059c0:	f04f 0000 	mov.w	r0, #0
 80059c4:	f04f 0100 	mov.w	r1, #0
 80059c8:	00d9      	lsls	r1, r3, #3
 80059ca:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80059ce:	00d0      	lsls	r0, r2, #3
 80059d0:	4602      	mov	r2, r0
 80059d2:	460b      	mov	r3, r1
 80059d4:	1911      	adds	r1, r2, r4
 80059d6:	65b9      	str	r1, [r7, #88]	; 0x58
 80059d8:	416b      	adcs	r3, r5
 80059da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80059dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	461a      	mov	r2, r3
 80059e2:	f04f 0300 	mov.w	r3, #0
 80059e6:	1891      	adds	r1, r2, r2
 80059e8:	62b9      	str	r1, [r7, #40]	; 0x28
 80059ea:	415b      	adcs	r3, r3
 80059ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80059f2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80059f6:	f7fa fc4b 	bl	8000290 <__aeabi_uldivmod>
 80059fa:	4602      	mov	r2, r0
 80059fc:	460b      	mov	r3, r1
 80059fe:	4b8c      	ldr	r3, [pc, #560]	; (8005c30 <UART_SetConfig+0x38c>)
 8005a00:	fba3 1302 	umull	r1, r3, r3, r2
 8005a04:	095b      	lsrs	r3, r3, #5
 8005a06:	2164      	movs	r1, #100	; 0x64
 8005a08:	fb01 f303 	mul.w	r3, r1, r3
 8005a0c:	1ad3      	subs	r3, r2, r3
 8005a0e:	00db      	lsls	r3, r3, #3
 8005a10:	3332      	adds	r3, #50	; 0x32
 8005a12:	4a87      	ldr	r2, [pc, #540]	; (8005c30 <UART_SetConfig+0x38c>)
 8005a14:	fba2 2303 	umull	r2, r3, r2, r3
 8005a18:	095b      	lsrs	r3, r3, #5
 8005a1a:	005b      	lsls	r3, r3, #1
 8005a1c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005a20:	441e      	add	r6, r3
 8005a22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a24:	4618      	mov	r0, r3
 8005a26:	f04f 0100 	mov.w	r1, #0
 8005a2a:	4602      	mov	r2, r0
 8005a2c:	460b      	mov	r3, r1
 8005a2e:	1894      	adds	r4, r2, r2
 8005a30:	623c      	str	r4, [r7, #32]
 8005a32:	415b      	adcs	r3, r3
 8005a34:	627b      	str	r3, [r7, #36]	; 0x24
 8005a36:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005a3a:	1812      	adds	r2, r2, r0
 8005a3c:	eb41 0303 	adc.w	r3, r1, r3
 8005a40:	f04f 0400 	mov.w	r4, #0
 8005a44:	f04f 0500 	mov.w	r5, #0
 8005a48:	00dd      	lsls	r5, r3, #3
 8005a4a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005a4e:	00d4      	lsls	r4, r2, #3
 8005a50:	4622      	mov	r2, r4
 8005a52:	462b      	mov	r3, r5
 8005a54:	1814      	adds	r4, r2, r0
 8005a56:	653c      	str	r4, [r7, #80]	; 0x50
 8005a58:	414b      	adcs	r3, r1
 8005a5a:	657b      	str	r3, [r7, #84]	; 0x54
 8005a5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	461a      	mov	r2, r3
 8005a62:	f04f 0300 	mov.w	r3, #0
 8005a66:	1891      	adds	r1, r2, r2
 8005a68:	61b9      	str	r1, [r7, #24]
 8005a6a:	415b      	adcs	r3, r3
 8005a6c:	61fb      	str	r3, [r7, #28]
 8005a6e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a72:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005a76:	f7fa fc0b 	bl	8000290 <__aeabi_uldivmod>
 8005a7a:	4602      	mov	r2, r0
 8005a7c:	460b      	mov	r3, r1
 8005a7e:	4b6c      	ldr	r3, [pc, #432]	; (8005c30 <UART_SetConfig+0x38c>)
 8005a80:	fba3 1302 	umull	r1, r3, r3, r2
 8005a84:	095b      	lsrs	r3, r3, #5
 8005a86:	2164      	movs	r1, #100	; 0x64
 8005a88:	fb01 f303 	mul.w	r3, r1, r3
 8005a8c:	1ad3      	subs	r3, r2, r3
 8005a8e:	00db      	lsls	r3, r3, #3
 8005a90:	3332      	adds	r3, #50	; 0x32
 8005a92:	4a67      	ldr	r2, [pc, #412]	; (8005c30 <UART_SetConfig+0x38c>)
 8005a94:	fba2 2303 	umull	r2, r3, r2, r3
 8005a98:	095b      	lsrs	r3, r3, #5
 8005a9a:	f003 0207 	and.w	r2, r3, #7
 8005a9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4432      	add	r2, r6
 8005aa4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005aa6:	e0b9      	b.n	8005c1c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005aa8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005aaa:	461c      	mov	r4, r3
 8005aac:	f04f 0500 	mov.w	r5, #0
 8005ab0:	4622      	mov	r2, r4
 8005ab2:	462b      	mov	r3, r5
 8005ab4:	1891      	adds	r1, r2, r2
 8005ab6:	6139      	str	r1, [r7, #16]
 8005ab8:	415b      	adcs	r3, r3
 8005aba:	617b      	str	r3, [r7, #20]
 8005abc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005ac0:	1912      	adds	r2, r2, r4
 8005ac2:	eb45 0303 	adc.w	r3, r5, r3
 8005ac6:	f04f 0000 	mov.w	r0, #0
 8005aca:	f04f 0100 	mov.w	r1, #0
 8005ace:	00d9      	lsls	r1, r3, #3
 8005ad0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005ad4:	00d0      	lsls	r0, r2, #3
 8005ad6:	4602      	mov	r2, r0
 8005ad8:	460b      	mov	r3, r1
 8005ada:	eb12 0804 	adds.w	r8, r2, r4
 8005ade:	eb43 0905 	adc.w	r9, r3, r5
 8005ae2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f04f 0100 	mov.w	r1, #0
 8005aec:	f04f 0200 	mov.w	r2, #0
 8005af0:	f04f 0300 	mov.w	r3, #0
 8005af4:	008b      	lsls	r3, r1, #2
 8005af6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005afa:	0082      	lsls	r2, r0, #2
 8005afc:	4640      	mov	r0, r8
 8005afe:	4649      	mov	r1, r9
 8005b00:	f7fa fbc6 	bl	8000290 <__aeabi_uldivmod>
 8005b04:	4602      	mov	r2, r0
 8005b06:	460b      	mov	r3, r1
 8005b08:	4b49      	ldr	r3, [pc, #292]	; (8005c30 <UART_SetConfig+0x38c>)
 8005b0a:	fba3 2302 	umull	r2, r3, r3, r2
 8005b0e:	095b      	lsrs	r3, r3, #5
 8005b10:	011e      	lsls	r6, r3, #4
 8005b12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b14:	4618      	mov	r0, r3
 8005b16:	f04f 0100 	mov.w	r1, #0
 8005b1a:	4602      	mov	r2, r0
 8005b1c:	460b      	mov	r3, r1
 8005b1e:	1894      	adds	r4, r2, r2
 8005b20:	60bc      	str	r4, [r7, #8]
 8005b22:	415b      	adcs	r3, r3
 8005b24:	60fb      	str	r3, [r7, #12]
 8005b26:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005b2a:	1812      	adds	r2, r2, r0
 8005b2c:	eb41 0303 	adc.w	r3, r1, r3
 8005b30:	f04f 0400 	mov.w	r4, #0
 8005b34:	f04f 0500 	mov.w	r5, #0
 8005b38:	00dd      	lsls	r5, r3, #3
 8005b3a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005b3e:	00d4      	lsls	r4, r2, #3
 8005b40:	4622      	mov	r2, r4
 8005b42:	462b      	mov	r3, r5
 8005b44:	1814      	adds	r4, r2, r0
 8005b46:	64bc      	str	r4, [r7, #72]	; 0x48
 8005b48:	414b      	adcs	r3, r1
 8005b4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	4618      	mov	r0, r3
 8005b52:	f04f 0100 	mov.w	r1, #0
 8005b56:	f04f 0200 	mov.w	r2, #0
 8005b5a:	f04f 0300 	mov.w	r3, #0
 8005b5e:	008b      	lsls	r3, r1, #2
 8005b60:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005b64:	0082      	lsls	r2, r0, #2
 8005b66:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005b6a:	f7fa fb91 	bl	8000290 <__aeabi_uldivmod>
 8005b6e:	4602      	mov	r2, r0
 8005b70:	460b      	mov	r3, r1
 8005b72:	4b2f      	ldr	r3, [pc, #188]	; (8005c30 <UART_SetConfig+0x38c>)
 8005b74:	fba3 1302 	umull	r1, r3, r3, r2
 8005b78:	095b      	lsrs	r3, r3, #5
 8005b7a:	2164      	movs	r1, #100	; 0x64
 8005b7c:	fb01 f303 	mul.w	r3, r1, r3
 8005b80:	1ad3      	subs	r3, r2, r3
 8005b82:	011b      	lsls	r3, r3, #4
 8005b84:	3332      	adds	r3, #50	; 0x32
 8005b86:	4a2a      	ldr	r2, [pc, #168]	; (8005c30 <UART_SetConfig+0x38c>)
 8005b88:	fba2 2303 	umull	r2, r3, r2, r3
 8005b8c:	095b      	lsrs	r3, r3, #5
 8005b8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b92:	441e      	add	r6, r3
 8005b94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b96:	4618      	mov	r0, r3
 8005b98:	f04f 0100 	mov.w	r1, #0
 8005b9c:	4602      	mov	r2, r0
 8005b9e:	460b      	mov	r3, r1
 8005ba0:	1894      	adds	r4, r2, r2
 8005ba2:	603c      	str	r4, [r7, #0]
 8005ba4:	415b      	adcs	r3, r3
 8005ba6:	607b      	str	r3, [r7, #4]
 8005ba8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005bac:	1812      	adds	r2, r2, r0
 8005bae:	eb41 0303 	adc.w	r3, r1, r3
 8005bb2:	f04f 0400 	mov.w	r4, #0
 8005bb6:	f04f 0500 	mov.w	r5, #0
 8005bba:	00dd      	lsls	r5, r3, #3
 8005bbc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005bc0:	00d4      	lsls	r4, r2, #3
 8005bc2:	4622      	mov	r2, r4
 8005bc4:	462b      	mov	r3, r5
 8005bc6:	eb12 0a00 	adds.w	sl, r2, r0
 8005bca:	eb43 0b01 	adc.w	fp, r3, r1
 8005bce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f04f 0100 	mov.w	r1, #0
 8005bd8:	f04f 0200 	mov.w	r2, #0
 8005bdc:	f04f 0300 	mov.w	r3, #0
 8005be0:	008b      	lsls	r3, r1, #2
 8005be2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005be6:	0082      	lsls	r2, r0, #2
 8005be8:	4650      	mov	r0, sl
 8005bea:	4659      	mov	r1, fp
 8005bec:	f7fa fb50 	bl	8000290 <__aeabi_uldivmod>
 8005bf0:	4602      	mov	r2, r0
 8005bf2:	460b      	mov	r3, r1
 8005bf4:	4b0e      	ldr	r3, [pc, #56]	; (8005c30 <UART_SetConfig+0x38c>)
 8005bf6:	fba3 1302 	umull	r1, r3, r3, r2
 8005bfa:	095b      	lsrs	r3, r3, #5
 8005bfc:	2164      	movs	r1, #100	; 0x64
 8005bfe:	fb01 f303 	mul.w	r3, r1, r3
 8005c02:	1ad3      	subs	r3, r2, r3
 8005c04:	011b      	lsls	r3, r3, #4
 8005c06:	3332      	adds	r3, #50	; 0x32
 8005c08:	4a09      	ldr	r2, [pc, #36]	; (8005c30 <UART_SetConfig+0x38c>)
 8005c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c0e:	095b      	lsrs	r3, r3, #5
 8005c10:	f003 020f 	and.w	r2, r3, #15
 8005c14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4432      	add	r2, r6
 8005c1a:	609a      	str	r2, [r3, #8]
}
 8005c1c:	bf00      	nop
 8005c1e:	377c      	adds	r7, #124	; 0x7c
 8005c20:	46bd      	mov	sp, r7
 8005c22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c26:	bf00      	nop
 8005c28:	40011000 	.word	0x40011000
 8005c2c:	40011400 	.word	0x40011400
 8005c30:	51eb851f 	.word	0x51eb851f

08005c34 <__errno>:
 8005c34:	4b01      	ldr	r3, [pc, #4]	; (8005c3c <__errno+0x8>)
 8005c36:	6818      	ldr	r0, [r3, #0]
 8005c38:	4770      	bx	lr
 8005c3a:	bf00      	nop
 8005c3c:	200006fc 	.word	0x200006fc

08005c40 <__libc_init_array>:
 8005c40:	b570      	push	{r4, r5, r6, lr}
 8005c42:	4d0d      	ldr	r5, [pc, #52]	; (8005c78 <__libc_init_array+0x38>)
 8005c44:	4c0d      	ldr	r4, [pc, #52]	; (8005c7c <__libc_init_array+0x3c>)
 8005c46:	1b64      	subs	r4, r4, r5
 8005c48:	10a4      	asrs	r4, r4, #2
 8005c4a:	2600      	movs	r6, #0
 8005c4c:	42a6      	cmp	r6, r4
 8005c4e:	d109      	bne.n	8005c64 <__libc_init_array+0x24>
 8005c50:	4d0b      	ldr	r5, [pc, #44]	; (8005c80 <__libc_init_array+0x40>)
 8005c52:	4c0c      	ldr	r4, [pc, #48]	; (8005c84 <__libc_init_array+0x44>)
 8005c54:	f000 fc4e 	bl	80064f4 <_init>
 8005c58:	1b64      	subs	r4, r4, r5
 8005c5a:	10a4      	asrs	r4, r4, #2
 8005c5c:	2600      	movs	r6, #0
 8005c5e:	42a6      	cmp	r6, r4
 8005c60:	d105      	bne.n	8005c6e <__libc_init_array+0x2e>
 8005c62:	bd70      	pop	{r4, r5, r6, pc}
 8005c64:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c68:	4798      	blx	r3
 8005c6a:	3601      	adds	r6, #1
 8005c6c:	e7ee      	b.n	8005c4c <__libc_init_array+0xc>
 8005c6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c72:	4798      	blx	r3
 8005c74:	3601      	adds	r6, #1
 8005c76:	e7f2      	b.n	8005c5e <__libc_init_array+0x1e>
 8005c78:	080065b4 	.word	0x080065b4
 8005c7c:	080065b4 	.word	0x080065b4
 8005c80:	080065b4 	.word	0x080065b4
 8005c84:	080065b8 	.word	0x080065b8

08005c88 <memset>:
 8005c88:	4402      	add	r2, r0
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d100      	bne.n	8005c92 <memset+0xa>
 8005c90:	4770      	bx	lr
 8005c92:	f803 1b01 	strb.w	r1, [r3], #1
 8005c96:	e7f9      	b.n	8005c8c <memset+0x4>

08005c98 <siprintf>:
 8005c98:	b40e      	push	{r1, r2, r3}
 8005c9a:	b500      	push	{lr}
 8005c9c:	b09c      	sub	sp, #112	; 0x70
 8005c9e:	ab1d      	add	r3, sp, #116	; 0x74
 8005ca0:	9002      	str	r0, [sp, #8]
 8005ca2:	9006      	str	r0, [sp, #24]
 8005ca4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005ca8:	4809      	ldr	r0, [pc, #36]	; (8005cd0 <siprintf+0x38>)
 8005caa:	9107      	str	r1, [sp, #28]
 8005cac:	9104      	str	r1, [sp, #16]
 8005cae:	4909      	ldr	r1, [pc, #36]	; (8005cd4 <siprintf+0x3c>)
 8005cb0:	f853 2b04 	ldr.w	r2, [r3], #4
 8005cb4:	9105      	str	r1, [sp, #20]
 8005cb6:	6800      	ldr	r0, [r0, #0]
 8005cb8:	9301      	str	r3, [sp, #4]
 8005cba:	a902      	add	r1, sp, #8
 8005cbc:	f000 f868 	bl	8005d90 <_svfiprintf_r>
 8005cc0:	9b02      	ldr	r3, [sp, #8]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	701a      	strb	r2, [r3, #0]
 8005cc6:	b01c      	add	sp, #112	; 0x70
 8005cc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ccc:	b003      	add	sp, #12
 8005cce:	4770      	bx	lr
 8005cd0:	200006fc 	.word	0x200006fc
 8005cd4:	ffff0208 	.word	0xffff0208

08005cd8 <__ssputs_r>:
 8005cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005cdc:	688e      	ldr	r6, [r1, #8]
 8005cde:	429e      	cmp	r6, r3
 8005ce0:	4682      	mov	sl, r0
 8005ce2:	460c      	mov	r4, r1
 8005ce4:	4690      	mov	r8, r2
 8005ce6:	461f      	mov	r7, r3
 8005ce8:	d838      	bhi.n	8005d5c <__ssputs_r+0x84>
 8005cea:	898a      	ldrh	r2, [r1, #12]
 8005cec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005cf0:	d032      	beq.n	8005d58 <__ssputs_r+0x80>
 8005cf2:	6825      	ldr	r5, [r4, #0]
 8005cf4:	6909      	ldr	r1, [r1, #16]
 8005cf6:	eba5 0901 	sub.w	r9, r5, r1
 8005cfa:	6965      	ldr	r5, [r4, #20]
 8005cfc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005d00:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005d04:	3301      	adds	r3, #1
 8005d06:	444b      	add	r3, r9
 8005d08:	106d      	asrs	r5, r5, #1
 8005d0a:	429d      	cmp	r5, r3
 8005d0c:	bf38      	it	cc
 8005d0e:	461d      	movcc	r5, r3
 8005d10:	0553      	lsls	r3, r2, #21
 8005d12:	d531      	bpl.n	8005d78 <__ssputs_r+0xa0>
 8005d14:	4629      	mov	r1, r5
 8005d16:	f000 fb47 	bl	80063a8 <_malloc_r>
 8005d1a:	4606      	mov	r6, r0
 8005d1c:	b950      	cbnz	r0, 8005d34 <__ssputs_r+0x5c>
 8005d1e:	230c      	movs	r3, #12
 8005d20:	f8ca 3000 	str.w	r3, [sl]
 8005d24:	89a3      	ldrh	r3, [r4, #12]
 8005d26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d2a:	81a3      	strh	r3, [r4, #12]
 8005d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8005d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d34:	6921      	ldr	r1, [r4, #16]
 8005d36:	464a      	mov	r2, r9
 8005d38:	f000 fabe 	bl	80062b8 <memcpy>
 8005d3c:	89a3      	ldrh	r3, [r4, #12]
 8005d3e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005d42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d46:	81a3      	strh	r3, [r4, #12]
 8005d48:	6126      	str	r6, [r4, #16]
 8005d4a:	6165      	str	r5, [r4, #20]
 8005d4c:	444e      	add	r6, r9
 8005d4e:	eba5 0509 	sub.w	r5, r5, r9
 8005d52:	6026      	str	r6, [r4, #0]
 8005d54:	60a5      	str	r5, [r4, #8]
 8005d56:	463e      	mov	r6, r7
 8005d58:	42be      	cmp	r6, r7
 8005d5a:	d900      	bls.n	8005d5e <__ssputs_r+0x86>
 8005d5c:	463e      	mov	r6, r7
 8005d5e:	4632      	mov	r2, r6
 8005d60:	6820      	ldr	r0, [r4, #0]
 8005d62:	4641      	mov	r1, r8
 8005d64:	f000 fab6 	bl	80062d4 <memmove>
 8005d68:	68a3      	ldr	r3, [r4, #8]
 8005d6a:	6822      	ldr	r2, [r4, #0]
 8005d6c:	1b9b      	subs	r3, r3, r6
 8005d6e:	4432      	add	r2, r6
 8005d70:	60a3      	str	r3, [r4, #8]
 8005d72:	6022      	str	r2, [r4, #0]
 8005d74:	2000      	movs	r0, #0
 8005d76:	e7db      	b.n	8005d30 <__ssputs_r+0x58>
 8005d78:	462a      	mov	r2, r5
 8005d7a:	f000 fb6f 	bl	800645c <_realloc_r>
 8005d7e:	4606      	mov	r6, r0
 8005d80:	2800      	cmp	r0, #0
 8005d82:	d1e1      	bne.n	8005d48 <__ssputs_r+0x70>
 8005d84:	6921      	ldr	r1, [r4, #16]
 8005d86:	4650      	mov	r0, sl
 8005d88:	f000 fabe 	bl	8006308 <_free_r>
 8005d8c:	e7c7      	b.n	8005d1e <__ssputs_r+0x46>
	...

08005d90 <_svfiprintf_r>:
 8005d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d94:	4698      	mov	r8, r3
 8005d96:	898b      	ldrh	r3, [r1, #12]
 8005d98:	061b      	lsls	r3, r3, #24
 8005d9a:	b09d      	sub	sp, #116	; 0x74
 8005d9c:	4607      	mov	r7, r0
 8005d9e:	460d      	mov	r5, r1
 8005da0:	4614      	mov	r4, r2
 8005da2:	d50e      	bpl.n	8005dc2 <_svfiprintf_r+0x32>
 8005da4:	690b      	ldr	r3, [r1, #16]
 8005da6:	b963      	cbnz	r3, 8005dc2 <_svfiprintf_r+0x32>
 8005da8:	2140      	movs	r1, #64	; 0x40
 8005daa:	f000 fafd 	bl	80063a8 <_malloc_r>
 8005dae:	6028      	str	r0, [r5, #0]
 8005db0:	6128      	str	r0, [r5, #16]
 8005db2:	b920      	cbnz	r0, 8005dbe <_svfiprintf_r+0x2e>
 8005db4:	230c      	movs	r3, #12
 8005db6:	603b      	str	r3, [r7, #0]
 8005db8:	f04f 30ff 	mov.w	r0, #4294967295
 8005dbc:	e0d1      	b.n	8005f62 <_svfiprintf_r+0x1d2>
 8005dbe:	2340      	movs	r3, #64	; 0x40
 8005dc0:	616b      	str	r3, [r5, #20]
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	9309      	str	r3, [sp, #36]	; 0x24
 8005dc6:	2320      	movs	r3, #32
 8005dc8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005dcc:	f8cd 800c 	str.w	r8, [sp, #12]
 8005dd0:	2330      	movs	r3, #48	; 0x30
 8005dd2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005f7c <_svfiprintf_r+0x1ec>
 8005dd6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005dda:	f04f 0901 	mov.w	r9, #1
 8005dde:	4623      	mov	r3, r4
 8005de0:	469a      	mov	sl, r3
 8005de2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005de6:	b10a      	cbz	r2, 8005dec <_svfiprintf_r+0x5c>
 8005de8:	2a25      	cmp	r2, #37	; 0x25
 8005dea:	d1f9      	bne.n	8005de0 <_svfiprintf_r+0x50>
 8005dec:	ebba 0b04 	subs.w	fp, sl, r4
 8005df0:	d00b      	beq.n	8005e0a <_svfiprintf_r+0x7a>
 8005df2:	465b      	mov	r3, fp
 8005df4:	4622      	mov	r2, r4
 8005df6:	4629      	mov	r1, r5
 8005df8:	4638      	mov	r0, r7
 8005dfa:	f7ff ff6d 	bl	8005cd8 <__ssputs_r>
 8005dfe:	3001      	adds	r0, #1
 8005e00:	f000 80aa 	beq.w	8005f58 <_svfiprintf_r+0x1c8>
 8005e04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005e06:	445a      	add	r2, fp
 8005e08:	9209      	str	r2, [sp, #36]	; 0x24
 8005e0a:	f89a 3000 	ldrb.w	r3, [sl]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	f000 80a2 	beq.w	8005f58 <_svfiprintf_r+0x1c8>
 8005e14:	2300      	movs	r3, #0
 8005e16:	f04f 32ff 	mov.w	r2, #4294967295
 8005e1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e1e:	f10a 0a01 	add.w	sl, sl, #1
 8005e22:	9304      	str	r3, [sp, #16]
 8005e24:	9307      	str	r3, [sp, #28]
 8005e26:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005e2a:	931a      	str	r3, [sp, #104]	; 0x68
 8005e2c:	4654      	mov	r4, sl
 8005e2e:	2205      	movs	r2, #5
 8005e30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e34:	4851      	ldr	r0, [pc, #324]	; (8005f7c <_svfiprintf_r+0x1ec>)
 8005e36:	f7fa f9db 	bl	80001f0 <memchr>
 8005e3a:	9a04      	ldr	r2, [sp, #16]
 8005e3c:	b9d8      	cbnz	r0, 8005e76 <_svfiprintf_r+0xe6>
 8005e3e:	06d0      	lsls	r0, r2, #27
 8005e40:	bf44      	itt	mi
 8005e42:	2320      	movmi	r3, #32
 8005e44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005e48:	0711      	lsls	r1, r2, #28
 8005e4a:	bf44      	itt	mi
 8005e4c:	232b      	movmi	r3, #43	; 0x2b
 8005e4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005e52:	f89a 3000 	ldrb.w	r3, [sl]
 8005e56:	2b2a      	cmp	r3, #42	; 0x2a
 8005e58:	d015      	beq.n	8005e86 <_svfiprintf_r+0xf6>
 8005e5a:	9a07      	ldr	r2, [sp, #28]
 8005e5c:	4654      	mov	r4, sl
 8005e5e:	2000      	movs	r0, #0
 8005e60:	f04f 0c0a 	mov.w	ip, #10
 8005e64:	4621      	mov	r1, r4
 8005e66:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e6a:	3b30      	subs	r3, #48	; 0x30
 8005e6c:	2b09      	cmp	r3, #9
 8005e6e:	d94e      	bls.n	8005f0e <_svfiprintf_r+0x17e>
 8005e70:	b1b0      	cbz	r0, 8005ea0 <_svfiprintf_r+0x110>
 8005e72:	9207      	str	r2, [sp, #28]
 8005e74:	e014      	b.n	8005ea0 <_svfiprintf_r+0x110>
 8005e76:	eba0 0308 	sub.w	r3, r0, r8
 8005e7a:	fa09 f303 	lsl.w	r3, r9, r3
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	9304      	str	r3, [sp, #16]
 8005e82:	46a2      	mov	sl, r4
 8005e84:	e7d2      	b.n	8005e2c <_svfiprintf_r+0x9c>
 8005e86:	9b03      	ldr	r3, [sp, #12]
 8005e88:	1d19      	adds	r1, r3, #4
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	9103      	str	r1, [sp, #12]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	bfbb      	ittet	lt
 8005e92:	425b      	neglt	r3, r3
 8005e94:	f042 0202 	orrlt.w	r2, r2, #2
 8005e98:	9307      	strge	r3, [sp, #28]
 8005e9a:	9307      	strlt	r3, [sp, #28]
 8005e9c:	bfb8      	it	lt
 8005e9e:	9204      	strlt	r2, [sp, #16]
 8005ea0:	7823      	ldrb	r3, [r4, #0]
 8005ea2:	2b2e      	cmp	r3, #46	; 0x2e
 8005ea4:	d10c      	bne.n	8005ec0 <_svfiprintf_r+0x130>
 8005ea6:	7863      	ldrb	r3, [r4, #1]
 8005ea8:	2b2a      	cmp	r3, #42	; 0x2a
 8005eaa:	d135      	bne.n	8005f18 <_svfiprintf_r+0x188>
 8005eac:	9b03      	ldr	r3, [sp, #12]
 8005eae:	1d1a      	adds	r2, r3, #4
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	9203      	str	r2, [sp, #12]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	bfb8      	it	lt
 8005eb8:	f04f 33ff 	movlt.w	r3, #4294967295
 8005ebc:	3402      	adds	r4, #2
 8005ebe:	9305      	str	r3, [sp, #20]
 8005ec0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005f8c <_svfiprintf_r+0x1fc>
 8005ec4:	7821      	ldrb	r1, [r4, #0]
 8005ec6:	2203      	movs	r2, #3
 8005ec8:	4650      	mov	r0, sl
 8005eca:	f7fa f991 	bl	80001f0 <memchr>
 8005ece:	b140      	cbz	r0, 8005ee2 <_svfiprintf_r+0x152>
 8005ed0:	2340      	movs	r3, #64	; 0x40
 8005ed2:	eba0 000a 	sub.w	r0, r0, sl
 8005ed6:	fa03 f000 	lsl.w	r0, r3, r0
 8005eda:	9b04      	ldr	r3, [sp, #16]
 8005edc:	4303      	orrs	r3, r0
 8005ede:	3401      	adds	r4, #1
 8005ee0:	9304      	str	r3, [sp, #16]
 8005ee2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ee6:	4826      	ldr	r0, [pc, #152]	; (8005f80 <_svfiprintf_r+0x1f0>)
 8005ee8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005eec:	2206      	movs	r2, #6
 8005eee:	f7fa f97f 	bl	80001f0 <memchr>
 8005ef2:	2800      	cmp	r0, #0
 8005ef4:	d038      	beq.n	8005f68 <_svfiprintf_r+0x1d8>
 8005ef6:	4b23      	ldr	r3, [pc, #140]	; (8005f84 <_svfiprintf_r+0x1f4>)
 8005ef8:	bb1b      	cbnz	r3, 8005f42 <_svfiprintf_r+0x1b2>
 8005efa:	9b03      	ldr	r3, [sp, #12]
 8005efc:	3307      	adds	r3, #7
 8005efe:	f023 0307 	bic.w	r3, r3, #7
 8005f02:	3308      	adds	r3, #8
 8005f04:	9303      	str	r3, [sp, #12]
 8005f06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f08:	4433      	add	r3, r6
 8005f0a:	9309      	str	r3, [sp, #36]	; 0x24
 8005f0c:	e767      	b.n	8005dde <_svfiprintf_r+0x4e>
 8005f0e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005f12:	460c      	mov	r4, r1
 8005f14:	2001      	movs	r0, #1
 8005f16:	e7a5      	b.n	8005e64 <_svfiprintf_r+0xd4>
 8005f18:	2300      	movs	r3, #0
 8005f1a:	3401      	adds	r4, #1
 8005f1c:	9305      	str	r3, [sp, #20]
 8005f1e:	4619      	mov	r1, r3
 8005f20:	f04f 0c0a 	mov.w	ip, #10
 8005f24:	4620      	mov	r0, r4
 8005f26:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f2a:	3a30      	subs	r2, #48	; 0x30
 8005f2c:	2a09      	cmp	r2, #9
 8005f2e:	d903      	bls.n	8005f38 <_svfiprintf_r+0x1a8>
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d0c5      	beq.n	8005ec0 <_svfiprintf_r+0x130>
 8005f34:	9105      	str	r1, [sp, #20]
 8005f36:	e7c3      	b.n	8005ec0 <_svfiprintf_r+0x130>
 8005f38:	fb0c 2101 	mla	r1, ip, r1, r2
 8005f3c:	4604      	mov	r4, r0
 8005f3e:	2301      	movs	r3, #1
 8005f40:	e7f0      	b.n	8005f24 <_svfiprintf_r+0x194>
 8005f42:	ab03      	add	r3, sp, #12
 8005f44:	9300      	str	r3, [sp, #0]
 8005f46:	462a      	mov	r2, r5
 8005f48:	4b0f      	ldr	r3, [pc, #60]	; (8005f88 <_svfiprintf_r+0x1f8>)
 8005f4a:	a904      	add	r1, sp, #16
 8005f4c:	4638      	mov	r0, r7
 8005f4e:	f3af 8000 	nop.w
 8005f52:	1c42      	adds	r2, r0, #1
 8005f54:	4606      	mov	r6, r0
 8005f56:	d1d6      	bne.n	8005f06 <_svfiprintf_r+0x176>
 8005f58:	89ab      	ldrh	r3, [r5, #12]
 8005f5a:	065b      	lsls	r3, r3, #25
 8005f5c:	f53f af2c 	bmi.w	8005db8 <_svfiprintf_r+0x28>
 8005f60:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005f62:	b01d      	add	sp, #116	; 0x74
 8005f64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f68:	ab03      	add	r3, sp, #12
 8005f6a:	9300      	str	r3, [sp, #0]
 8005f6c:	462a      	mov	r2, r5
 8005f6e:	4b06      	ldr	r3, [pc, #24]	; (8005f88 <_svfiprintf_r+0x1f8>)
 8005f70:	a904      	add	r1, sp, #16
 8005f72:	4638      	mov	r0, r7
 8005f74:	f000 f87a 	bl	800606c <_printf_i>
 8005f78:	e7eb      	b.n	8005f52 <_svfiprintf_r+0x1c2>
 8005f7a:	bf00      	nop
 8005f7c:	08006578 	.word	0x08006578
 8005f80:	08006582 	.word	0x08006582
 8005f84:	00000000 	.word	0x00000000
 8005f88:	08005cd9 	.word	0x08005cd9
 8005f8c:	0800657e 	.word	0x0800657e

08005f90 <_printf_common>:
 8005f90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f94:	4616      	mov	r6, r2
 8005f96:	4699      	mov	r9, r3
 8005f98:	688a      	ldr	r2, [r1, #8]
 8005f9a:	690b      	ldr	r3, [r1, #16]
 8005f9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	bfb8      	it	lt
 8005fa4:	4613      	movlt	r3, r2
 8005fa6:	6033      	str	r3, [r6, #0]
 8005fa8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005fac:	4607      	mov	r7, r0
 8005fae:	460c      	mov	r4, r1
 8005fb0:	b10a      	cbz	r2, 8005fb6 <_printf_common+0x26>
 8005fb2:	3301      	adds	r3, #1
 8005fb4:	6033      	str	r3, [r6, #0]
 8005fb6:	6823      	ldr	r3, [r4, #0]
 8005fb8:	0699      	lsls	r1, r3, #26
 8005fba:	bf42      	ittt	mi
 8005fbc:	6833      	ldrmi	r3, [r6, #0]
 8005fbe:	3302      	addmi	r3, #2
 8005fc0:	6033      	strmi	r3, [r6, #0]
 8005fc2:	6825      	ldr	r5, [r4, #0]
 8005fc4:	f015 0506 	ands.w	r5, r5, #6
 8005fc8:	d106      	bne.n	8005fd8 <_printf_common+0x48>
 8005fca:	f104 0a19 	add.w	sl, r4, #25
 8005fce:	68e3      	ldr	r3, [r4, #12]
 8005fd0:	6832      	ldr	r2, [r6, #0]
 8005fd2:	1a9b      	subs	r3, r3, r2
 8005fd4:	42ab      	cmp	r3, r5
 8005fd6:	dc26      	bgt.n	8006026 <_printf_common+0x96>
 8005fd8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005fdc:	1e13      	subs	r3, r2, #0
 8005fde:	6822      	ldr	r2, [r4, #0]
 8005fe0:	bf18      	it	ne
 8005fe2:	2301      	movne	r3, #1
 8005fe4:	0692      	lsls	r2, r2, #26
 8005fe6:	d42b      	bmi.n	8006040 <_printf_common+0xb0>
 8005fe8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005fec:	4649      	mov	r1, r9
 8005fee:	4638      	mov	r0, r7
 8005ff0:	47c0      	blx	r8
 8005ff2:	3001      	adds	r0, #1
 8005ff4:	d01e      	beq.n	8006034 <_printf_common+0xa4>
 8005ff6:	6823      	ldr	r3, [r4, #0]
 8005ff8:	68e5      	ldr	r5, [r4, #12]
 8005ffa:	6832      	ldr	r2, [r6, #0]
 8005ffc:	f003 0306 	and.w	r3, r3, #6
 8006000:	2b04      	cmp	r3, #4
 8006002:	bf08      	it	eq
 8006004:	1aad      	subeq	r5, r5, r2
 8006006:	68a3      	ldr	r3, [r4, #8]
 8006008:	6922      	ldr	r2, [r4, #16]
 800600a:	bf0c      	ite	eq
 800600c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006010:	2500      	movne	r5, #0
 8006012:	4293      	cmp	r3, r2
 8006014:	bfc4      	itt	gt
 8006016:	1a9b      	subgt	r3, r3, r2
 8006018:	18ed      	addgt	r5, r5, r3
 800601a:	2600      	movs	r6, #0
 800601c:	341a      	adds	r4, #26
 800601e:	42b5      	cmp	r5, r6
 8006020:	d11a      	bne.n	8006058 <_printf_common+0xc8>
 8006022:	2000      	movs	r0, #0
 8006024:	e008      	b.n	8006038 <_printf_common+0xa8>
 8006026:	2301      	movs	r3, #1
 8006028:	4652      	mov	r2, sl
 800602a:	4649      	mov	r1, r9
 800602c:	4638      	mov	r0, r7
 800602e:	47c0      	blx	r8
 8006030:	3001      	adds	r0, #1
 8006032:	d103      	bne.n	800603c <_printf_common+0xac>
 8006034:	f04f 30ff 	mov.w	r0, #4294967295
 8006038:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800603c:	3501      	adds	r5, #1
 800603e:	e7c6      	b.n	8005fce <_printf_common+0x3e>
 8006040:	18e1      	adds	r1, r4, r3
 8006042:	1c5a      	adds	r2, r3, #1
 8006044:	2030      	movs	r0, #48	; 0x30
 8006046:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800604a:	4422      	add	r2, r4
 800604c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006050:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006054:	3302      	adds	r3, #2
 8006056:	e7c7      	b.n	8005fe8 <_printf_common+0x58>
 8006058:	2301      	movs	r3, #1
 800605a:	4622      	mov	r2, r4
 800605c:	4649      	mov	r1, r9
 800605e:	4638      	mov	r0, r7
 8006060:	47c0      	blx	r8
 8006062:	3001      	adds	r0, #1
 8006064:	d0e6      	beq.n	8006034 <_printf_common+0xa4>
 8006066:	3601      	adds	r6, #1
 8006068:	e7d9      	b.n	800601e <_printf_common+0x8e>
	...

0800606c <_printf_i>:
 800606c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006070:	460c      	mov	r4, r1
 8006072:	4691      	mov	r9, r2
 8006074:	7e27      	ldrb	r7, [r4, #24]
 8006076:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006078:	2f78      	cmp	r7, #120	; 0x78
 800607a:	4680      	mov	r8, r0
 800607c:	469a      	mov	sl, r3
 800607e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006082:	d807      	bhi.n	8006094 <_printf_i+0x28>
 8006084:	2f62      	cmp	r7, #98	; 0x62
 8006086:	d80a      	bhi.n	800609e <_printf_i+0x32>
 8006088:	2f00      	cmp	r7, #0
 800608a:	f000 80d8 	beq.w	800623e <_printf_i+0x1d2>
 800608e:	2f58      	cmp	r7, #88	; 0x58
 8006090:	f000 80a3 	beq.w	80061da <_printf_i+0x16e>
 8006094:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006098:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800609c:	e03a      	b.n	8006114 <_printf_i+0xa8>
 800609e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80060a2:	2b15      	cmp	r3, #21
 80060a4:	d8f6      	bhi.n	8006094 <_printf_i+0x28>
 80060a6:	a001      	add	r0, pc, #4	; (adr r0, 80060ac <_printf_i+0x40>)
 80060a8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80060ac:	08006105 	.word	0x08006105
 80060b0:	08006119 	.word	0x08006119
 80060b4:	08006095 	.word	0x08006095
 80060b8:	08006095 	.word	0x08006095
 80060bc:	08006095 	.word	0x08006095
 80060c0:	08006095 	.word	0x08006095
 80060c4:	08006119 	.word	0x08006119
 80060c8:	08006095 	.word	0x08006095
 80060cc:	08006095 	.word	0x08006095
 80060d0:	08006095 	.word	0x08006095
 80060d4:	08006095 	.word	0x08006095
 80060d8:	08006225 	.word	0x08006225
 80060dc:	08006149 	.word	0x08006149
 80060e0:	08006207 	.word	0x08006207
 80060e4:	08006095 	.word	0x08006095
 80060e8:	08006095 	.word	0x08006095
 80060ec:	08006247 	.word	0x08006247
 80060f0:	08006095 	.word	0x08006095
 80060f4:	08006149 	.word	0x08006149
 80060f8:	08006095 	.word	0x08006095
 80060fc:	08006095 	.word	0x08006095
 8006100:	0800620f 	.word	0x0800620f
 8006104:	680b      	ldr	r3, [r1, #0]
 8006106:	1d1a      	adds	r2, r3, #4
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	600a      	str	r2, [r1, #0]
 800610c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006110:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006114:	2301      	movs	r3, #1
 8006116:	e0a3      	b.n	8006260 <_printf_i+0x1f4>
 8006118:	6825      	ldr	r5, [r4, #0]
 800611a:	6808      	ldr	r0, [r1, #0]
 800611c:	062e      	lsls	r6, r5, #24
 800611e:	f100 0304 	add.w	r3, r0, #4
 8006122:	d50a      	bpl.n	800613a <_printf_i+0xce>
 8006124:	6805      	ldr	r5, [r0, #0]
 8006126:	600b      	str	r3, [r1, #0]
 8006128:	2d00      	cmp	r5, #0
 800612a:	da03      	bge.n	8006134 <_printf_i+0xc8>
 800612c:	232d      	movs	r3, #45	; 0x2d
 800612e:	426d      	negs	r5, r5
 8006130:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006134:	485e      	ldr	r0, [pc, #376]	; (80062b0 <_printf_i+0x244>)
 8006136:	230a      	movs	r3, #10
 8006138:	e019      	b.n	800616e <_printf_i+0x102>
 800613a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800613e:	6805      	ldr	r5, [r0, #0]
 8006140:	600b      	str	r3, [r1, #0]
 8006142:	bf18      	it	ne
 8006144:	b22d      	sxthne	r5, r5
 8006146:	e7ef      	b.n	8006128 <_printf_i+0xbc>
 8006148:	680b      	ldr	r3, [r1, #0]
 800614a:	6825      	ldr	r5, [r4, #0]
 800614c:	1d18      	adds	r0, r3, #4
 800614e:	6008      	str	r0, [r1, #0]
 8006150:	0628      	lsls	r0, r5, #24
 8006152:	d501      	bpl.n	8006158 <_printf_i+0xec>
 8006154:	681d      	ldr	r5, [r3, #0]
 8006156:	e002      	b.n	800615e <_printf_i+0xf2>
 8006158:	0669      	lsls	r1, r5, #25
 800615a:	d5fb      	bpl.n	8006154 <_printf_i+0xe8>
 800615c:	881d      	ldrh	r5, [r3, #0]
 800615e:	4854      	ldr	r0, [pc, #336]	; (80062b0 <_printf_i+0x244>)
 8006160:	2f6f      	cmp	r7, #111	; 0x6f
 8006162:	bf0c      	ite	eq
 8006164:	2308      	moveq	r3, #8
 8006166:	230a      	movne	r3, #10
 8006168:	2100      	movs	r1, #0
 800616a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800616e:	6866      	ldr	r6, [r4, #4]
 8006170:	60a6      	str	r6, [r4, #8]
 8006172:	2e00      	cmp	r6, #0
 8006174:	bfa2      	ittt	ge
 8006176:	6821      	ldrge	r1, [r4, #0]
 8006178:	f021 0104 	bicge.w	r1, r1, #4
 800617c:	6021      	strge	r1, [r4, #0]
 800617e:	b90d      	cbnz	r5, 8006184 <_printf_i+0x118>
 8006180:	2e00      	cmp	r6, #0
 8006182:	d04d      	beq.n	8006220 <_printf_i+0x1b4>
 8006184:	4616      	mov	r6, r2
 8006186:	fbb5 f1f3 	udiv	r1, r5, r3
 800618a:	fb03 5711 	mls	r7, r3, r1, r5
 800618e:	5dc7      	ldrb	r7, [r0, r7]
 8006190:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006194:	462f      	mov	r7, r5
 8006196:	42bb      	cmp	r3, r7
 8006198:	460d      	mov	r5, r1
 800619a:	d9f4      	bls.n	8006186 <_printf_i+0x11a>
 800619c:	2b08      	cmp	r3, #8
 800619e:	d10b      	bne.n	80061b8 <_printf_i+0x14c>
 80061a0:	6823      	ldr	r3, [r4, #0]
 80061a2:	07df      	lsls	r7, r3, #31
 80061a4:	d508      	bpl.n	80061b8 <_printf_i+0x14c>
 80061a6:	6923      	ldr	r3, [r4, #16]
 80061a8:	6861      	ldr	r1, [r4, #4]
 80061aa:	4299      	cmp	r1, r3
 80061ac:	bfde      	ittt	le
 80061ae:	2330      	movle	r3, #48	; 0x30
 80061b0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80061b4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80061b8:	1b92      	subs	r2, r2, r6
 80061ba:	6122      	str	r2, [r4, #16]
 80061bc:	f8cd a000 	str.w	sl, [sp]
 80061c0:	464b      	mov	r3, r9
 80061c2:	aa03      	add	r2, sp, #12
 80061c4:	4621      	mov	r1, r4
 80061c6:	4640      	mov	r0, r8
 80061c8:	f7ff fee2 	bl	8005f90 <_printf_common>
 80061cc:	3001      	adds	r0, #1
 80061ce:	d14c      	bne.n	800626a <_printf_i+0x1fe>
 80061d0:	f04f 30ff 	mov.w	r0, #4294967295
 80061d4:	b004      	add	sp, #16
 80061d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061da:	4835      	ldr	r0, [pc, #212]	; (80062b0 <_printf_i+0x244>)
 80061dc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80061e0:	6823      	ldr	r3, [r4, #0]
 80061e2:	680e      	ldr	r6, [r1, #0]
 80061e4:	061f      	lsls	r7, r3, #24
 80061e6:	f856 5b04 	ldr.w	r5, [r6], #4
 80061ea:	600e      	str	r6, [r1, #0]
 80061ec:	d514      	bpl.n	8006218 <_printf_i+0x1ac>
 80061ee:	07d9      	lsls	r1, r3, #31
 80061f0:	bf44      	itt	mi
 80061f2:	f043 0320 	orrmi.w	r3, r3, #32
 80061f6:	6023      	strmi	r3, [r4, #0]
 80061f8:	b91d      	cbnz	r5, 8006202 <_printf_i+0x196>
 80061fa:	6823      	ldr	r3, [r4, #0]
 80061fc:	f023 0320 	bic.w	r3, r3, #32
 8006200:	6023      	str	r3, [r4, #0]
 8006202:	2310      	movs	r3, #16
 8006204:	e7b0      	b.n	8006168 <_printf_i+0xfc>
 8006206:	6823      	ldr	r3, [r4, #0]
 8006208:	f043 0320 	orr.w	r3, r3, #32
 800620c:	6023      	str	r3, [r4, #0]
 800620e:	2378      	movs	r3, #120	; 0x78
 8006210:	4828      	ldr	r0, [pc, #160]	; (80062b4 <_printf_i+0x248>)
 8006212:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006216:	e7e3      	b.n	80061e0 <_printf_i+0x174>
 8006218:	065e      	lsls	r6, r3, #25
 800621a:	bf48      	it	mi
 800621c:	b2ad      	uxthmi	r5, r5
 800621e:	e7e6      	b.n	80061ee <_printf_i+0x182>
 8006220:	4616      	mov	r6, r2
 8006222:	e7bb      	b.n	800619c <_printf_i+0x130>
 8006224:	680b      	ldr	r3, [r1, #0]
 8006226:	6826      	ldr	r6, [r4, #0]
 8006228:	6960      	ldr	r0, [r4, #20]
 800622a:	1d1d      	adds	r5, r3, #4
 800622c:	600d      	str	r5, [r1, #0]
 800622e:	0635      	lsls	r5, r6, #24
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	d501      	bpl.n	8006238 <_printf_i+0x1cc>
 8006234:	6018      	str	r0, [r3, #0]
 8006236:	e002      	b.n	800623e <_printf_i+0x1d2>
 8006238:	0671      	lsls	r1, r6, #25
 800623a:	d5fb      	bpl.n	8006234 <_printf_i+0x1c8>
 800623c:	8018      	strh	r0, [r3, #0]
 800623e:	2300      	movs	r3, #0
 8006240:	6123      	str	r3, [r4, #16]
 8006242:	4616      	mov	r6, r2
 8006244:	e7ba      	b.n	80061bc <_printf_i+0x150>
 8006246:	680b      	ldr	r3, [r1, #0]
 8006248:	1d1a      	adds	r2, r3, #4
 800624a:	600a      	str	r2, [r1, #0]
 800624c:	681e      	ldr	r6, [r3, #0]
 800624e:	6862      	ldr	r2, [r4, #4]
 8006250:	2100      	movs	r1, #0
 8006252:	4630      	mov	r0, r6
 8006254:	f7f9 ffcc 	bl	80001f0 <memchr>
 8006258:	b108      	cbz	r0, 800625e <_printf_i+0x1f2>
 800625a:	1b80      	subs	r0, r0, r6
 800625c:	6060      	str	r0, [r4, #4]
 800625e:	6863      	ldr	r3, [r4, #4]
 8006260:	6123      	str	r3, [r4, #16]
 8006262:	2300      	movs	r3, #0
 8006264:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006268:	e7a8      	b.n	80061bc <_printf_i+0x150>
 800626a:	6923      	ldr	r3, [r4, #16]
 800626c:	4632      	mov	r2, r6
 800626e:	4649      	mov	r1, r9
 8006270:	4640      	mov	r0, r8
 8006272:	47d0      	blx	sl
 8006274:	3001      	adds	r0, #1
 8006276:	d0ab      	beq.n	80061d0 <_printf_i+0x164>
 8006278:	6823      	ldr	r3, [r4, #0]
 800627a:	079b      	lsls	r3, r3, #30
 800627c:	d413      	bmi.n	80062a6 <_printf_i+0x23a>
 800627e:	68e0      	ldr	r0, [r4, #12]
 8006280:	9b03      	ldr	r3, [sp, #12]
 8006282:	4298      	cmp	r0, r3
 8006284:	bfb8      	it	lt
 8006286:	4618      	movlt	r0, r3
 8006288:	e7a4      	b.n	80061d4 <_printf_i+0x168>
 800628a:	2301      	movs	r3, #1
 800628c:	4632      	mov	r2, r6
 800628e:	4649      	mov	r1, r9
 8006290:	4640      	mov	r0, r8
 8006292:	47d0      	blx	sl
 8006294:	3001      	adds	r0, #1
 8006296:	d09b      	beq.n	80061d0 <_printf_i+0x164>
 8006298:	3501      	adds	r5, #1
 800629a:	68e3      	ldr	r3, [r4, #12]
 800629c:	9903      	ldr	r1, [sp, #12]
 800629e:	1a5b      	subs	r3, r3, r1
 80062a0:	42ab      	cmp	r3, r5
 80062a2:	dcf2      	bgt.n	800628a <_printf_i+0x21e>
 80062a4:	e7eb      	b.n	800627e <_printf_i+0x212>
 80062a6:	2500      	movs	r5, #0
 80062a8:	f104 0619 	add.w	r6, r4, #25
 80062ac:	e7f5      	b.n	800629a <_printf_i+0x22e>
 80062ae:	bf00      	nop
 80062b0:	08006589 	.word	0x08006589
 80062b4:	0800659a 	.word	0x0800659a

080062b8 <memcpy>:
 80062b8:	440a      	add	r2, r1
 80062ba:	4291      	cmp	r1, r2
 80062bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80062c0:	d100      	bne.n	80062c4 <memcpy+0xc>
 80062c2:	4770      	bx	lr
 80062c4:	b510      	push	{r4, lr}
 80062c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80062ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80062ce:	4291      	cmp	r1, r2
 80062d0:	d1f9      	bne.n	80062c6 <memcpy+0xe>
 80062d2:	bd10      	pop	{r4, pc}

080062d4 <memmove>:
 80062d4:	4288      	cmp	r0, r1
 80062d6:	b510      	push	{r4, lr}
 80062d8:	eb01 0402 	add.w	r4, r1, r2
 80062dc:	d902      	bls.n	80062e4 <memmove+0x10>
 80062de:	4284      	cmp	r4, r0
 80062e0:	4623      	mov	r3, r4
 80062e2:	d807      	bhi.n	80062f4 <memmove+0x20>
 80062e4:	1e43      	subs	r3, r0, #1
 80062e6:	42a1      	cmp	r1, r4
 80062e8:	d008      	beq.n	80062fc <memmove+0x28>
 80062ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80062ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80062f2:	e7f8      	b.n	80062e6 <memmove+0x12>
 80062f4:	4402      	add	r2, r0
 80062f6:	4601      	mov	r1, r0
 80062f8:	428a      	cmp	r2, r1
 80062fa:	d100      	bne.n	80062fe <memmove+0x2a>
 80062fc:	bd10      	pop	{r4, pc}
 80062fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006302:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006306:	e7f7      	b.n	80062f8 <memmove+0x24>

08006308 <_free_r>:
 8006308:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800630a:	2900      	cmp	r1, #0
 800630c:	d048      	beq.n	80063a0 <_free_r+0x98>
 800630e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006312:	9001      	str	r0, [sp, #4]
 8006314:	2b00      	cmp	r3, #0
 8006316:	f1a1 0404 	sub.w	r4, r1, #4
 800631a:	bfb8      	it	lt
 800631c:	18e4      	addlt	r4, r4, r3
 800631e:	f000 f8d3 	bl	80064c8 <__malloc_lock>
 8006322:	4a20      	ldr	r2, [pc, #128]	; (80063a4 <_free_r+0x9c>)
 8006324:	9801      	ldr	r0, [sp, #4]
 8006326:	6813      	ldr	r3, [r2, #0]
 8006328:	4615      	mov	r5, r2
 800632a:	b933      	cbnz	r3, 800633a <_free_r+0x32>
 800632c:	6063      	str	r3, [r4, #4]
 800632e:	6014      	str	r4, [r2, #0]
 8006330:	b003      	add	sp, #12
 8006332:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006336:	f000 b8cd 	b.w	80064d4 <__malloc_unlock>
 800633a:	42a3      	cmp	r3, r4
 800633c:	d90b      	bls.n	8006356 <_free_r+0x4e>
 800633e:	6821      	ldr	r1, [r4, #0]
 8006340:	1862      	adds	r2, r4, r1
 8006342:	4293      	cmp	r3, r2
 8006344:	bf04      	itt	eq
 8006346:	681a      	ldreq	r2, [r3, #0]
 8006348:	685b      	ldreq	r3, [r3, #4]
 800634a:	6063      	str	r3, [r4, #4]
 800634c:	bf04      	itt	eq
 800634e:	1852      	addeq	r2, r2, r1
 8006350:	6022      	streq	r2, [r4, #0]
 8006352:	602c      	str	r4, [r5, #0]
 8006354:	e7ec      	b.n	8006330 <_free_r+0x28>
 8006356:	461a      	mov	r2, r3
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	b10b      	cbz	r3, 8006360 <_free_r+0x58>
 800635c:	42a3      	cmp	r3, r4
 800635e:	d9fa      	bls.n	8006356 <_free_r+0x4e>
 8006360:	6811      	ldr	r1, [r2, #0]
 8006362:	1855      	adds	r5, r2, r1
 8006364:	42a5      	cmp	r5, r4
 8006366:	d10b      	bne.n	8006380 <_free_r+0x78>
 8006368:	6824      	ldr	r4, [r4, #0]
 800636a:	4421      	add	r1, r4
 800636c:	1854      	adds	r4, r2, r1
 800636e:	42a3      	cmp	r3, r4
 8006370:	6011      	str	r1, [r2, #0]
 8006372:	d1dd      	bne.n	8006330 <_free_r+0x28>
 8006374:	681c      	ldr	r4, [r3, #0]
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	6053      	str	r3, [r2, #4]
 800637a:	4421      	add	r1, r4
 800637c:	6011      	str	r1, [r2, #0]
 800637e:	e7d7      	b.n	8006330 <_free_r+0x28>
 8006380:	d902      	bls.n	8006388 <_free_r+0x80>
 8006382:	230c      	movs	r3, #12
 8006384:	6003      	str	r3, [r0, #0]
 8006386:	e7d3      	b.n	8006330 <_free_r+0x28>
 8006388:	6825      	ldr	r5, [r4, #0]
 800638a:	1961      	adds	r1, r4, r5
 800638c:	428b      	cmp	r3, r1
 800638e:	bf04      	itt	eq
 8006390:	6819      	ldreq	r1, [r3, #0]
 8006392:	685b      	ldreq	r3, [r3, #4]
 8006394:	6063      	str	r3, [r4, #4]
 8006396:	bf04      	itt	eq
 8006398:	1949      	addeq	r1, r1, r5
 800639a:	6021      	streq	r1, [r4, #0]
 800639c:	6054      	str	r4, [r2, #4]
 800639e:	e7c7      	b.n	8006330 <_free_r+0x28>
 80063a0:	b003      	add	sp, #12
 80063a2:	bd30      	pop	{r4, r5, pc}
 80063a4:	20000790 	.word	0x20000790

080063a8 <_malloc_r>:
 80063a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063aa:	1ccd      	adds	r5, r1, #3
 80063ac:	f025 0503 	bic.w	r5, r5, #3
 80063b0:	3508      	adds	r5, #8
 80063b2:	2d0c      	cmp	r5, #12
 80063b4:	bf38      	it	cc
 80063b6:	250c      	movcc	r5, #12
 80063b8:	2d00      	cmp	r5, #0
 80063ba:	4606      	mov	r6, r0
 80063bc:	db01      	blt.n	80063c2 <_malloc_r+0x1a>
 80063be:	42a9      	cmp	r1, r5
 80063c0:	d903      	bls.n	80063ca <_malloc_r+0x22>
 80063c2:	230c      	movs	r3, #12
 80063c4:	6033      	str	r3, [r6, #0]
 80063c6:	2000      	movs	r0, #0
 80063c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80063ca:	f000 f87d 	bl	80064c8 <__malloc_lock>
 80063ce:	4921      	ldr	r1, [pc, #132]	; (8006454 <_malloc_r+0xac>)
 80063d0:	680a      	ldr	r2, [r1, #0]
 80063d2:	4614      	mov	r4, r2
 80063d4:	b99c      	cbnz	r4, 80063fe <_malloc_r+0x56>
 80063d6:	4f20      	ldr	r7, [pc, #128]	; (8006458 <_malloc_r+0xb0>)
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	b923      	cbnz	r3, 80063e6 <_malloc_r+0x3e>
 80063dc:	4621      	mov	r1, r4
 80063de:	4630      	mov	r0, r6
 80063e0:	f000 f862 	bl	80064a8 <_sbrk_r>
 80063e4:	6038      	str	r0, [r7, #0]
 80063e6:	4629      	mov	r1, r5
 80063e8:	4630      	mov	r0, r6
 80063ea:	f000 f85d 	bl	80064a8 <_sbrk_r>
 80063ee:	1c43      	adds	r3, r0, #1
 80063f0:	d123      	bne.n	800643a <_malloc_r+0x92>
 80063f2:	230c      	movs	r3, #12
 80063f4:	6033      	str	r3, [r6, #0]
 80063f6:	4630      	mov	r0, r6
 80063f8:	f000 f86c 	bl	80064d4 <__malloc_unlock>
 80063fc:	e7e3      	b.n	80063c6 <_malloc_r+0x1e>
 80063fe:	6823      	ldr	r3, [r4, #0]
 8006400:	1b5b      	subs	r3, r3, r5
 8006402:	d417      	bmi.n	8006434 <_malloc_r+0x8c>
 8006404:	2b0b      	cmp	r3, #11
 8006406:	d903      	bls.n	8006410 <_malloc_r+0x68>
 8006408:	6023      	str	r3, [r4, #0]
 800640a:	441c      	add	r4, r3
 800640c:	6025      	str	r5, [r4, #0]
 800640e:	e004      	b.n	800641a <_malloc_r+0x72>
 8006410:	6863      	ldr	r3, [r4, #4]
 8006412:	42a2      	cmp	r2, r4
 8006414:	bf0c      	ite	eq
 8006416:	600b      	streq	r3, [r1, #0]
 8006418:	6053      	strne	r3, [r2, #4]
 800641a:	4630      	mov	r0, r6
 800641c:	f000 f85a 	bl	80064d4 <__malloc_unlock>
 8006420:	f104 000b 	add.w	r0, r4, #11
 8006424:	1d23      	adds	r3, r4, #4
 8006426:	f020 0007 	bic.w	r0, r0, #7
 800642a:	1ac2      	subs	r2, r0, r3
 800642c:	d0cc      	beq.n	80063c8 <_malloc_r+0x20>
 800642e:	1a1b      	subs	r3, r3, r0
 8006430:	50a3      	str	r3, [r4, r2]
 8006432:	e7c9      	b.n	80063c8 <_malloc_r+0x20>
 8006434:	4622      	mov	r2, r4
 8006436:	6864      	ldr	r4, [r4, #4]
 8006438:	e7cc      	b.n	80063d4 <_malloc_r+0x2c>
 800643a:	1cc4      	adds	r4, r0, #3
 800643c:	f024 0403 	bic.w	r4, r4, #3
 8006440:	42a0      	cmp	r0, r4
 8006442:	d0e3      	beq.n	800640c <_malloc_r+0x64>
 8006444:	1a21      	subs	r1, r4, r0
 8006446:	4630      	mov	r0, r6
 8006448:	f000 f82e 	bl	80064a8 <_sbrk_r>
 800644c:	3001      	adds	r0, #1
 800644e:	d1dd      	bne.n	800640c <_malloc_r+0x64>
 8006450:	e7cf      	b.n	80063f2 <_malloc_r+0x4a>
 8006452:	bf00      	nop
 8006454:	20000790 	.word	0x20000790
 8006458:	20000794 	.word	0x20000794

0800645c <_realloc_r>:
 800645c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800645e:	4607      	mov	r7, r0
 8006460:	4614      	mov	r4, r2
 8006462:	460e      	mov	r6, r1
 8006464:	b921      	cbnz	r1, 8006470 <_realloc_r+0x14>
 8006466:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800646a:	4611      	mov	r1, r2
 800646c:	f7ff bf9c 	b.w	80063a8 <_malloc_r>
 8006470:	b922      	cbnz	r2, 800647c <_realloc_r+0x20>
 8006472:	f7ff ff49 	bl	8006308 <_free_r>
 8006476:	4625      	mov	r5, r4
 8006478:	4628      	mov	r0, r5
 800647a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800647c:	f000 f830 	bl	80064e0 <_malloc_usable_size_r>
 8006480:	42a0      	cmp	r0, r4
 8006482:	d20f      	bcs.n	80064a4 <_realloc_r+0x48>
 8006484:	4621      	mov	r1, r4
 8006486:	4638      	mov	r0, r7
 8006488:	f7ff ff8e 	bl	80063a8 <_malloc_r>
 800648c:	4605      	mov	r5, r0
 800648e:	2800      	cmp	r0, #0
 8006490:	d0f2      	beq.n	8006478 <_realloc_r+0x1c>
 8006492:	4631      	mov	r1, r6
 8006494:	4622      	mov	r2, r4
 8006496:	f7ff ff0f 	bl	80062b8 <memcpy>
 800649a:	4631      	mov	r1, r6
 800649c:	4638      	mov	r0, r7
 800649e:	f7ff ff33 	bl	8006308 <_free_r>
 80064a2:	e7e9      	b.n	8006478 <_realloc_r+0x1c>
 80064a4:	4635      	mov	r5, r6
 80064a6:	e7e7      	b.n	8006478 <_realloc_r+0x1c>

080064a8 <_sbrk_r>:
 80064a8:	b538      	push	{r3, r4, r5, lr}
 80064aa:	4d06      	ldr	r5, [pc, #24]	; (80064c4 <_sbrk_r+0x1c>)
 80064ac:	2300      	movs	r3, #0
 80064ae:	4604      	mov	r4, r0
 80064b0:	4608      	mov	r0, r1
 80064b2:	602b      	str	r3, [r5, #0]
 80064b4:	f7fb ffb0 	bl	8002418 <_sbrk>
 80064b8:	1c43      	adds	r3, r0, #1
 80064ba:	d102      	bne.n	80064c2 <_sbrk_r+0x1a>
 80064bc:	682b      	ldr	r3, [r5, #0]
 80064be:	b103      	cbz	r3, 80064c2 <_sbrk_r+0x1a>
 80064c0:	6023      	str	r3, [r4, #0]
 80064c2:	bd38      	pop	{r3, r4, r5, pc}
 80064c4:	20003c20 	.word	0x20003c20

080064c8 <__malloc_lock>:
 80064c8:	4801      	ldr	r0, [pc, #4]	; (80064d0 <__malloc_lock+0x8>)
 80064ca:	f000 b811 	b.w	80064f0 <__retarget_lock_acquire_recursive>
 80064ce:	bf00      	nop
 80064d0:	20003c28 	.word	0x20003c28

080064d4 <__malloc_unlock>:
 80064d4:	4801      	ldr	r0, [pc, #4]	; (80064dc <__malloc_unlock+0x8>)
 80064d6:	f000 b80c 	b.w	80064f2 <__retarget_lock_release_recursive>
 80064da:	bf00      	nop
 80064dc:	20003c28 	.word	0x20003c28

080064e0 <_malloc_usable_size_r>:
 80064e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80064e4:	1f18      	subs	r0, r3, #4
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	bfbc      	itt	lt
 80064ea:	580b      	ldrlt	r3, [r1, r0]
 80064ec:	18c0      	addlt	r0, r0, r3
 80064ee:	4770      	bx	lr

080064f0 <__retarget_lock_acquire_recursive>:
 80064f0:	4770      	bx	lr

080064f2 <__retarget_lock_release_recursive>:
 80064f2:	4770      	bx	lr

080064f4 <_init>:
 80064f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064f6:	bf00      	nop
 80064f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064fa:	bc08      	pop	{r3}
 80064fc:	469e      	mov	lr, r3
 80064fe:	4770      	bx	lr

08006500 <_fini>:
 8006500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006502:	bf00      	nop
 8006504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006506:	bc08      	pop	{r3}
 8006508:	469e      	mov	lr, r3
 800650a:	4770      	bx	lr
